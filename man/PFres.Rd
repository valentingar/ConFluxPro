% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PFres.R
\name{PFres}
\alias{PFres}
\alias{cfp_id_cols}
\alias{cfp_get_layers_map}
\alias{pf_storage_term}
\alias{pf_known_flux}
\alias{pf_known_flux_factor}
\alias{pf_zero_flux}
\alias{pf_evenness_factor}
\alias{cfp_get_profiles}
\title{PFres}
\usage{
PFres(
  tbl,
  layers_map,
  id_cols,
  storage_term,
  zero_flux,
  zero_limits,
  known_flux,
  known_flux_factor,
  DSD0_optim,
  evenness_factor,
  gasdata,
  profiles
)

cfp_id_cols(x)

cfp_get_layers_map(x)

pf_storage_term(x)

pf_known_flux(x)

pf_known_flux_factor(x)

pf_zero_flux(x)

pf_evenness_factor(x)

cfp_get_profiles(x)
}
\arguments{
\item{layers_map}{(dataframe) That defines the layers of homogeneous
production as well as the upper and lower limits of production rate. \ Must
include
\itemize{
\item the relevant id_cols (see below)
\item the upper
and lower boundaries of each layer (upper, lower)
\item upper and lower
limits of the production rate to be modeled in \eqn{\mu mol m^{-3}}
(highlim, lowlim)
\item the parameter layer_couple, that indicates how
strongly the layer should be linked to the one below it (0 for no coupling)
}}

\item{id_cols}{(character vector) The names of the columns that together
uniquely identify one profile. Must be present in gasdata.}

\item{storage_term}{(logical) Should changes in storage be accounted for?
Default is F. Only works if data is present in a temporal dimension as well
and is probably only representative for a high temporal resolution (hours).}

\item{zero_flux}{(logical) Applies the zero-flux boundary condition? If
FALSE, the first value in X represents the incoming flux to the lowest
layer.}

\item{zero_limits}{(numeric vector) a vector of length 2 defining the lower
and upper limit of the lowest flux if zero_flux = F.}

\item{known_flux}{(dataframe) a dataframe that gives a known efflux for each
profile defined by id_cols. If this is provided, the productions are
optimised to meet this flux as well as the concentration measurements
provided.}

\item{known_flux_factor}{(numeric) a numeric value > 0 that represents a
weight for the error calculation with the known flux. A higher value means
that the optimisation will weigh the error to the efflux more than in
regard to the concentration measurements. Must be determined manually by
trying out!}

\item{DSD0_optim}{(logical) If True, the diffusion coefficient (DSD0) values are
also object to optimisation together with the production. DSD0 is varied between
values 0 and 1, DS is then recalculated from D0 to be used in the model. The fit values
are given as DSD0_fit in the return table. Only makes sense to use in
combination with known_flux.}

\item{evenness_factor}{(numeric) A user defined factor used to penalise strong
differences between the optimised production rates. This must be identified by
trial-and-error and can help prevent that production rates are simply set to zero
basically the lower a production is relative to the the maximum of the absolute of
all productions, the higher it is penalised. The \code{evenness_factor} then
defines the weight of this penalty in the optimisation algorithm \code{\link{prod_optim}}.}

\item{gasdata}{(dataframe)}
}
\description{
This is the central S3 class generated by pro_flux() that
stores all the additional function arguments used in the pro_flux()
function call, except for \code{gasdata} \code{soilphys} and \code{known_flux}.

It behaves just like a data.frame but stores additional information
in the attributes. This enables the extraction of additional information
such as efflux and also helps keeping track of different models, similar
to the \code{lm} class.
}
