% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pro_flux.R
\name{pro_flux}
\alias{pro_flux}
\title{pro_flux}
\usage{
pro_flux(x, ...)
}
\arguments{
\item{x}{A \code{cfp_dat} object with all the necessary input datasets.}

\item{...}{
  Arguments passed on to \code{\link[=cfp_pfmod]{cfp_pfmod}}
  \describe{
    \item{\code{zero_flux}}{(logical) Applies the zero-flux boundary condition? If
FALSE, the first value in X represents the incoming flux to the lowest
layer.}
    \item{\code{zero_limits}}{(numeric vector) a vector of length 2 defining the lower
and upper limit of the lowest flux if zero_flux = F.}
    \item{\code{known_flux_factor}}{RESERVED FOR FUTURE EXPANSION}
    \item{\code{DSD0_optim}}{RESERVED FOR FUTURE EXPANSION}
    \item{\code{evenness_factor}}{(numeric) A user defined factor used to penalise strong
differences between the optimised production rates. This must be identified by
trial-and-error and can help prevent that production rates are simply set to zero
basically the lower a production is relative to the the maximum of the absolute of
all productions, the higher it is penalised. The \code{evenness_factor} then
defines the weight of this penalty in the optimisation algorithm \code{\link{prod_optim}}.}
  }}
}
\description{
This implements an inverse modeling approach which optimizes
  vertically resolved production (or consumption) of the gases in question to
  fit a modeled concentration profile to observed data.

  One boundary condition of this model is, that there is no incoming or
  outgoing flux at the bottom of the lowest layer of the profile. If this
  boundary condition is not met, the flux must be optimised as well. This can
  be set in \code{zero_flux}.
}
\examples{
{

library(dplyr)

soilphys <-
 ConFluxPro::soilphys \%>\%
 cfp_soilphys(id_cols = c("site", "Date"))

gasdata <-
 ConFluxPro::gasdata \%>\%
 cfp_gasdata(id_cols = c("site", "Date"))


lmap <- soilphys \%>\%
 select(upper,site) \%>\%
 distinct() \%>\%
 group_by(site) \%>\%
 slice_max(upper) \%>\%
 reframe(upper = c(upper,0),
           lower = c(0,-100)) \%>\%
 cfp_layers_map(gas = "CO2",
                layer_couple = 0,
                lowlim = 0,
                highlim = 1000,
                id_cols = "site")
PROFLUX <-
 cfp_dat(gasdata,
         soilphys,
         lmap ) \%>\%
 pro_flux()
}

}
\seealso{
Other proflux: 
\code{\link{prod_mod_conc}()},
\code{\link{prod_optim}()}
}
\concept{proflux}
