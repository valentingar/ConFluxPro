// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cumsumcpp
NumericVector cumsumcpp(NumericVector x);
RcppExport SEXP _ConFluxPro_cumsumcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsumcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// prod_mod_cpp
NumericVector prod_mod_cpp(Rcpp::NumericVector prod, Rcpp::NumericVector height, Rcpp::NumericVector DS, double Fnull, double Cnull);
RcppExport SEXP _ConFluxPro_prod_mod_cpp(SEXP prodSEXP, SEXP heightSEXP, SEXP DSSEXP, SEXP FnullSEXP, SEXP CnullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prod(prodSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DS(DSSEXP);
    Rcpp::traits::input_parameter< double >::type Fnull(FnullSEXP);
    Rcpp::traits::input_parameter< double >::type Cnull(CnullSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_mod_cpp(prod, height, DS, Fnull, Cnull));
    return rcpp_result_gen;
END_RCPP
}
// prod_conc
NumericVector prod_conc(Rcpp::NumericVector prod, Rcpp::NumericVector height, Rcpp::NumericVector DS, double Fnull, double Cnull);
RcppExport SEXP _ConFluxPro_prod_conc(SEXP prodSEXP, SEXP heightSEXP, SEXP DSSEXP, SEXP FnullSEXP, SEXP CnullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prod(prodSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DS(DSSEXP);
    Rcpp::traits::input_parameter< double >::type Fnull(FnullSEXP);
    Rcpp::traits::input_parameter< double >::type Cnull(CnullSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_conc(prod, height, DS, Fnull, Cnull));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ConFluxPro_cumsumcpp", (DL_FUNC) &_ConFluxPro_cumsumcpp, 1},
    {"_ConFluxPro_prod_mod_cpp", (DL_FUNC) &_ConFluxPro_prod_mod_cpp, 5},
    {"_ConFluxPro_prod_conc", (DL_FUNC) &_ConFluxPro_prod_conc, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ConFluxPro(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
