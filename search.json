[{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://valentingar.github.io/ConFluxPro/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"overview","text":"Hello welcome ConFluxPro - toolkit soil gas analysis. package implements Flux-Gradient Method (FGM) calculation gas fluxes concentration profiles. provides range functions cover complete process raw data modeling fluxes beyond. framework S3 classes methods aim make process straightforward possible keeping control specific model hands user. vignette provides overview package structure, including important functions workflows. vignettes introduce different models, functions processes detail.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"package-structure","dir":"Articles","previous_headings":"","what":"Package structure","title":"overview","text":"following graph gives overview important functions within ConFluxPro. two main data objects required ConFluxPro models gasdata soilphys. former contains information gas concentration profiles, latter corresponding information soil physical parameters , importantly, diffusivity. model structure defined layers_map, layers defined different parameters set. data comes together single object cfp_dat(). , different data sources checked prepared modelling. Models include traditional FGM approach fg_flux(), well inverse approach pro_flux(). every model result, soil efflux parameters can extracted. functions help improve analyse models. framework designed modular possible, kind approach can implemented. function documentation attached (?my_function) help setting data models. next chapter typical workflow presented using synthetic datasets included package.","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"data-preparation","dir":"Articles","previous_headings":"General workflow","what":"data preparation","title":"overview","text":"two datasets required ConFluxPro flux model. One giving information gas concentration profiles (gasdata) one physical properties diffusivity soil (soilphys). ConFluxPro ships synthetic example dataset illustrate form datasets required. access datasets use data() function:","code":"library(ConFluxPro) #>  #> Attaching package: 'ConFluxPro' #> The following object is masked from 'package:stats': #>  #>     filter  data(gasdata) data(soilphys)"},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"gasdata","dir":"Articles","previous_headings":"General workflow > data preparation","what":"gasdata","title":"overview","text":"gasdata three important columns: depth gives depth data entry cm, x_ppm concentration ppm gas type gas character string. columns may identify profile. example datasets, include site well Date: profile single vertical snapshot soil column. profile result single efflux / atmosphere. Parameters characterise profile id_cols ConFluxPro. set gasdata model, run cfp_gasdata(). , define id_cols dataset. used verify dataset ready, .e. incomplete profiles. Otherwise, error returned.","code":"head(gasdata) #> # A tibble: 6 × 5 #>   site   Date       depth x_ppm gas   #>   <chr>  <date>     <dbl> <dbl> <chr> #> 1 site_a 2021-01-01     5  423. CO2   #> 2 site_a 2021-01-01     0  552. CO2   #> 3 site_a 2021-01-01     0  556. CO2   #> 4 site_a 2021-01-01     0  557. CO2   #> 5 site_a 2021-01-01   -10  716. CO2   #> 6 site_a 2021-01-01   -10  713. CO2 gasdata <- cfp_gasdata(gasdata, id_cols = c(\"site\", \"Date\")) #>  #> added 'gas' to id_cols"},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"soilphys","dir":"Articles","previous_headings":"General workflow > data preparation","what":"soilphys","title":"overview","text":"next part prepare soilphys object. profile separated discrete steps soil physical parameters defined. step upper lower boundary cover complete depth profile without overlapping gaps. ConFluxPro, called upper/lower consistency. step considered homogeneous, means parameter (e.g. total pore space) assumed constant within step. flux modeling, soilphys needs following columns: upper lower boundaries step cm, apparent diffusion coefficient DS m2 s-1 gas. get place, different functions help set dataset different sources (see discretize_depth() complete_soilphys()), example dataset already shape, can run cfp_soilphys() directly. , id_cols need defined. cfp_soilphys() checks upper/lower consistency indicators data integrety. data fail (cfp_soilphys() return error), make sure single entry per step profile (idfentified id_cols provided) steps overlapping without gaps.","code":"head(soilphys) #>     site  TPS   a   b depth upper lower       Date        SWC            t    p #> 1 site_a 0.38 1.2 1.5   -80   -60  -100 2021-01-01 0.16135277 -0.789903514 1013 #> 2 site_a 0.38 1.2 1.5   -80   -60  -100 2021-02-01 0.12392743  0.005814771 1013 #> 3 site_a 0.38 1.2 1.5   -80   -60  -100 2021-03-01 0.12227893  2.059937865 1013 #> 4 site_a 0.38 1.2 1.5   -80   -60  -100 2021-04-01 0.14464345  4.725217894 1013 #> 5 site_a 0.38 1.2 1.5   -80   -60  -100 2021-05-01 0.11446588  8.825682240 1013 #> 6 site_a 0.38 1.2 1.5   -80   -60  -100 2021-06-01 0.09537391 10.377836383 1013 #>        AFPS      DSD0 gas           D0           DS    c_air #> 1 0.2186472 0.1226866 CO2 1.373780e-05 1.685444e-06 44.73588 #> 2 0.2560726 0.1554984 CO2 1.381053e-05 2.147515e-06 44.60556 #> 3 0.2577211 0.1570023 CO2 1.399908e-05 2.197889e-06 44.27263 #> 4 0.2353565 0.1370158 CO2 1.424543e-05 1.951850e-06 43.84798 #> 5 0.2655341 0.1641957 CO2 1.462819e-05 2.401886e-06 43.21035 #> 6 0.2846261 0.1822189 CO2 1.477426e-05 2.692149e-06 42.97380  soilphys <- cfp_soilphys(soilphys, id_cols = c(\"site\", \"Date\")) #>  #> added 'gas' to id_cols"},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"layers_map","dir":"Articles","previous_headings":"General workflow > data preparation","what":"layers_map","title":"overview","text":"final puzzle-piece model-ready dataset layers_map. , layers defined, fluxes calculated independently , case inverse approach, production rates optimised. means, different layers_map can defined tried . Layers defined upper lower boundary cm. now, consider two layers per site: One Humus layer (: depth > 0 cm) one mineral soil (depth < 0 cm): Using cfp_layers_map() data checked integrity model-specific parameters defined.","code":"library(dplyr) layers_map <-      soilphys %>% # use limits of soilphys per site     select(upper,site) %>%     distinct() %>%     group_by(site) %>%     slice_max(upper) %>%     summarise(upper = c(upper,0),               lower = c(0,-100))  #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> `summarise()` has grouped output by 'site'. You can override using the #> `.groups` argument.    layers_map #> # A tibble: 4 × 3 #> # Groups:   site [2] #>   site   upper lower #>   <chr>  <dbl> <dbl> #> 1 site_a     5     0 #> 2 site_a     0  -100 #> 3 site_b     7     0 #> 4 site_b     0  -100 layers_map <-   cfp_layers_map(     layers_map,     gas = \"CO2\",     id_cols = \"site\",     layer_couple = 0,  # only for pro_flux()     lowlim = 0,        #        highlim = 1000     #   ) #>  #> added 'gas' to id_cols"},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"binding-it-all-together-cfp_dat","dir":"Articles","previous_headings":"General workflow > data preparation","what":"Binding it all together: cfp_dat()","title":"overview","text":"centrepiece every ConFluxPro model cfp_dat object. cfp_dat() takes cfp_gasdata, cfp_soilphys cfp_layers_map object connects different datasets together. combinations id_cols within datasets, single prof_id defined profile checked integrity. means, profile, three datasets need match: lowest highest depth gasdata must exactly match highest lowest upper lower boundary soilphys layers_map. profile must complete, meaning three corresponding datasets must matched uniquely per profile. mean, id_cols must datasets, must mappable datasets. E.g. notice, layers_map missing id_cols \"Date\", problem, can still matched using \"site\". everything ready, run cfp_dat() join datasets together. data yet ready, function giv information missing / matching data. cfp_dat object essentially list original datasets fourth data.frame information single profile defined ìd_cols. means, elements can accessed using normal $ operator: profiles data.frame, row corresponds single profile corresponding id_cols, well ids, mapping profile datasets: sp_id soilphys, gd_id gasdata group_id layers_map. printing cfp_dat object, relevant information displayed: Different dplyr-like methods implemented. Model data can subsampled using filter(). columns profiles data.frame can used filtering (ensures complete profiles filtered).","code":"my_dat <- cfp_dat(gasdata,                   soilphys,                   layers_map) #>  #> validating datasets #> id_cols: site, Date, gas #> 24 unique profiles my_dat$layers_map #>  #> A cfp_layers_map object  #> id_cols: site gas  #> 2  unique profiles  #>  #>     site upper lower gas lowlim highlim layer_couple layer pmap group_id #> 1 site_a     0  -100 CO2      0    1000            0     1    1        1 #> 2 site_b     0  -100 CO2      0    1000            0     1    1        2 #> 3 site_a     5     0 CO2      0    1000            0     2    2        1 #> 4 site_b     7     0 CO2      0    1000            0     2    2        2 my_dat #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  24  #> number of groups:  2 my_dat %>%   filter(site == \"site_a\") #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  12  #> number of groups:  1  my_dat %>%    filter(Date < \"2021-04-01\") #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  6  #> number of groups:  2   my_dat %>%    filter(prof_id %in% c(4, 6, 23)) #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  3  #> number of groups:  2"},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"flux-gradient-method-fgm-with-fg_flux","dir":"Articles","previous_headings":"General workflow > Models","what":"Flux-Gradient-Method FGM with fg_flux()","title":"overview","text":"‘classic’ approach calculating fluxes concentration profiles estimate gradient gas along direction diffusion use Fick’s law: F=−Ds⋅dcdz F = - D_s \\cdot \\frac{dc}{dz}  implemented ConFluxPro fg_flux() function. Within layer defined layers_map, gradient estimated. corresponding diffusion coefficient harmonic mean apparent diffusion coefficient within layer, weighed height step within soilphys. Different methods implemented estimate gradient, e.g. linear spline method, local linear regression . can defined function call. now, let’s use linear spline function estimate gradients within humus mineral soil layer defined beforehand: resulting object stores input datasets parameters flux results added list data.frames can thus accessed running FLUX$FLUX. advantage keeping input parameters twofold: ) always can check parameters produced model result b) makes easy tweak things try . also means can rerun model simple command: Let’s visualise results using ggplot: layer numbering always starts bottom, 1 (red) denotes mineral soil 2 (blue) humus layer.","code":"FLUX <- my_dat %>%   fg_flux(gases = \"CO2\",            modes = \"LS\", # use linear spline to estimate gradient            param = c(\"c_air\", \"DS\"), # soilphys parameters averaged per layer           funs = c(\"arith\", \"harm\") # averaging function corresponding to param           ) #>  #> validating datasets #> id_cols: site, Date, gas #> 24 unique profiles fg_flux(FLUX) # all the information is already there #>  #> A cfp_fgres fg_flux model result.  #> mean R2 achieved:  0.934057  #> number of failed fits:  0  #>  #> A cfp_fgmod fg_flux model.  #> gases: CO2   #> modes:  LS   #> param:  c_air DS   #> funs:  arith harm   #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  24  #> number of groups:  2 library(ggplot2) FLUX$FLUX %>%   left_join(FLUX$profiles) %>% # here is the info about the Date and site we need   ggplot(aes(x = Date, y = flux, col = factor(layer)))+   geom_line()+   facet_grid(rows = vars(site))+   theme(legend.position = 'bottom') #> Joining with `by = join_by(prof_id, gas)`"},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"inverse-flux-moddeling-pro_flux","dir":"Articles","previous_headings":"General workflow > Models","what":"Inverse Flux moddeling pro_flux()","title":"overview","text":"different approach implemented ConFluxPro using inverse modelling. Assuming gas either produced consumed within soil homogeneous step soil relevant fluxes boundaries known, concentration profile gas can calculated follows: C(z)=−P2⋅DS⋅z2−FinDS⋅z+C0 C(z) = -\\frac{P}{2 \\cdot D_S} \\cdot z^2 -\\frac{F_{}}{D_S} \\cdot z + C_0  C(z)C(z) concentration height zz, PP production rate FinF_{} incoming flux C0C_0 concentration lower boundary. ConFluxPro, solved step soil soilphys. production rates different layers soil optimised resulting concentration profile fits gasdata best. , lower upper limits production rates defined, stored layers_map can different different layers. Within layer, production rate assumed, total degrees freedom optimisation depend number layers defined layers_map. Let’s look layers_map defined . lower upper limits optimisation columns lowlim highlim. , assume CO[2] produced within soil, set lower limit 0. column pmap identifies layer can later retrieved PROFLUX soilphys data.frame starting 1 bottom. , set can calculate fluxes using pro_flux(): ‘classic’ approach, model result model input added dataset PROFLUX, can simply run model : model results stored structure soilphys added columns prod giving production rate within step conc giving concentration upper boundary step. Lets’s visualise , time can use production per layer directly: evaluation often first thing want pro_flux model complete, convenient function production() automates process, column prod_abs gives information calculated flux .","code":"my_dat$layers_map #>  #> A cfp_layers_map object  #> id_cols: site gas  #> 2  unique profiles  #>  #>     site upper lower gas lowlim highlim layer_couple layer pmap group_id #> 1 site_a     0  -100 CO2      0    1000            0     1    1        1 #> 2 site_b     0  -100 CO2      0    1000            0     1    1        2 #> 3 site_a     5     0 CO2      0    1000            0     2    2        1 #> 4 site_b     7     0 CO2      0    1000            0     2    2        2 PROFLUX <-   pro_flux(my_dat) pro_flux(PROFLUX) #>  #> A cfp_pfres pro_flux model result.  #> mean RMSE achieved:  0.035769  #> number of failed fits:  0  #>  #> A cfp_pfmod pro_flux model.  #> zero_flux: TRUE   #> zero_limits:  -Inf Inf   #> DSD0_optim:  FALSE   #> evenness_factor:  0   #> known_flux_factor:  0   #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  24  #> number of groups:  2 PROFLUX$PROFLUX PROFLUX$PROFLUX %>%   left_join(PROFLUX$profiles) %>%   mutate(layer = factor(ifelse(pmap == 2, \"humus\", \"mineral\")),          flux = prod*(upper-lower)/ 100 ) %>% # calculating absolute production per step   ggplot(aes(x = Date, y = flux,               fill = layer))+    geom_bar(stat = 'identity', position = 'stack')+   facet_grid(rows = vars(site)) #> Joining with `by = join_by(prof_id, sp_id)` production(PROFLUX) %>%    head() #>  #> A cfp_layered_profile object  #> id_cols: site Date gas  #> 3  unique profiles  #>  #>     site       Date gas upper lower layer   prod_abs   prod_rel    efflux F0 #> 1 site_a 2021-01-01 CO2     0  -100     1 0.09704722 0.11626198 0.8347288  0 #> 2 site_a 2021-01-01 CO2     5     0     2 0.73768158 0.88373802 0.8347288  0 #> 3 site_b 2021-01-01 CO2     0  -100     1 0.05406110 0.08019349 0.6741332  0 #> 4 site_b 2021-01-01 CO2     7     0     2 0.62007213 0.91980651 0.6741332  0 #> 5 site_a 2021-02-01 CO2     0  -100     1 0.14909176 0.10904179 1.3672901  0 #> 6 site_a 2021-02-01 CO2     5     0     2 1.21819835 0.89095821 1.3672901  0 #>   DELTA_F0 DELTA_prod_abs DELTA_prod_rel #> 1       NA             NA             NA #> 2       NA             NA             NA #> 3       NA             NA             NA #> 4       NA             NA             NA #> 5       NA             NA             NA #> 6       NA             NA             NA"},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"extract-and-calculate-the-efflux","dir":"Articles","previous_headings":"General workflow > Models","what":"Extract and calculate the efflux()","title":"overview","text":"matter approach, one goal often estimate efflux gas atmosphere/soil interface. can done using efflux() function. pro_flux() model result, straightforward, efflux simply sum production within soil optimised. Thus, efflux can directly estimated: model result fg_flux(), needs consideration. One option extrapolate soil internal fluxes top soil using linear regression. can defined call efflux: Let’s see two models differ: can see, inverse approach estimated higher efflux, models showed relative dynamics across datasets.","code":"PF_EFFLUX <- efflux(PROFLUX) head(PF_EFFLUX) #>  #> A cfp_profile object  #> id_cols: site Date gas  #> 6  unique profiles  #>  #>     site       Date gas    efflux prof_id #> 1 site_a 2021-01-01 CO2 0.8347288       1 #> 2 site_b 2021-01-01 CO2 0.6741332       2 #> 3 site_a 2021-02-01 CO2 1.3672901       3 #> 4 site_b 2021-02-01 CO2 1.0613224       4 #> 5 site_a 2021-03-01 CO2 1.7443084       5 #> 6 site_b 2021-03-01 CO2 1.3906597       6 FG_EFFLUX <- efflux(FLUX,                      method = \"lm\") # using a linear regression. head(FG_EFFLUX) #>  #> A cfp_profile object  #> id_cols: site Date gas  #> 6  unique profiles  #>  #>   mode prof_id    efflux   site       Date gas #> 1   LS       1 0.5774565 site_a 2021-01-01 CO2 #> 2   LS       2 0.3993311 site_b 2021-01-01 CO2 #> 3   LS       3 0.9335609 site_a 2021-02-01 CO2 #> 4   LS       4 0.6259608 site_b 2021-02-01 CO2 #> 5   LS       5 1.2242680 site_a 2021-03-01 CO2 #> 6   LS       6 0.8429107 site_b 2021-03-01 CO2 FG_EFFLUX %>%   mutate(model = \"classic\") %>%   bind_rows(PF_EFFLUX %>%                mutate(model = \"inverse\")) %>%   ggplot(aes(x = Date, y = efflux, col = model))+   geom_line()+   facet_grid(rows = vars(site))"},{"path":"https://valentingar.github.io/ConFluxPro/articles/overview.html","id":"outlook","dir":"Articles","previous_headings":"","what":"Outlook","title":"overview","text":"ends short overview important functions workflows ConFluxPro. Check vignettes package learn model analysis data preparation. Thank interest package good luck research!","code":""},{"path":"https://valentingar.github.io/ConFluxPro/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Valentin Gartiser. Author, maintainer.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gartiser V (2024). ConFluxPro: Toolkit Soil Gas Analysis. R package version 1.1.0.9000, https://valentingar.github.io/ConFluxPro/.","code":"@Manual{,   title = {ConFluxPro: A Toolkit for Soil Gas Analysis},   author = {Valentin Gartiser},   year = {2024},   note = {R package version 1.1.0.9000},   url = {https://valentingar.github.io/ConFluxPro/}, }"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"confluxpro-","dir":"","previous_headings":"","what":"A Toolkit for Soil Gas Analysis","title":"A Toolkit for Soil Gas Analysis","text":"ConFluxPro free toolbox modelling soil gas fluxes using Flux Gradient Method (FGM). provides functions data preparation, framework model set-implements different FGM models, including inverse approach.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Toolkit for Soil Gas Analysis","text":"Install current development version github: get started, check provided vignette installation:","code":"# install.packages(\"remotes\") remotes::install_github(\"valentingar/ConFluxPro\") vignette(\"overview\", package = \"ConFluxPro\")"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"basis","dir":"","previous_headings":"","what":"Basis","title":"A Toolkit for Soil Gas Analysis","text":"Flux Gradient Method (FGM) calculates diffusive flux rates FF gases vertical concentration gradients dc/dzdc/dz soil air apparent diffusion coefficient coefficient DsD_s. F=−Ds⋅dcdz F= -D_s\\cdot \\frac{dc}{dz} FGM excellent alternative methods, Eddy-Covariance chamber measurements, can costly work intensive. measuring concentration gradients soil deriving apparent diffusion coefficient soil physical parameters, continuous low-impact measurement soil gas fluxes vertical production profiles possible. basic calculation fluxes may simple, FGM requires combination different datasets varying methods. ConFluxPro comes . package can help easily process raw data, combine datasets set different model variants straightforward reproducible manner. background, see review method can deployed especially long-term monitoring soil gas fluxes.","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"data-handling","dir":"","previous_headings":"Workflow","what":"Data handling","title":"A Toolkit for Soil Gas Analysis","text":"central idea ConFluxPro distinct profile, .e. single time point given site given gas, can uniquely identified set columns called id_cols. Different classes help set validate datasets: cfp_gasdata() data.frame profile concentration data column x_ppm different depths column depth. cfp_soilphys() data.frame soil physical information. profile split layers defined upper lower boundary, without gaps overlaps. layer least information density air c_air diffusion coefficient DS given gas. cfp_layers_map() data.frame layered similarly gives information model structure, .e. layers production rate calculated. three datasets combined central data class cfp_dat(), automatically adjusted correctly match . object contains necessary information.","code":"gasdata <- cfp_gasdata(ConFluxPro::gasdata,                        id_cols = c(\"site\", \"Date\")) #>  #> added 'gas' to id_cols  soilphys <- cfp_soilphys(ConFluxPro::soilphys,                          id_cols = c(\"site\", \"Date\")) #>  #> added 'gas' to id_cols  layers_map <- cfp_layers_map(   data.frame(site = rep(c(\"site_a\", \"site_b\"), each = 3),              upper = c(5,   0,  -20, 7,   0,  -20),              lower = c(0, -20, -100, 0, -20, -100)),   gas = \"CO2\",    lowlim = 0,    highlim = 1000,   id_cols = \"site\") #>  #> added 'gas' to id_cols my_dat <- cfp_dat(gasdata, soilphys, layers_map) my_dat #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  24  #> number of groups:  2"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"flux-modeling","dir":"","previous_headings":"Workflow","what":"Flux modeling","title":"A Toolkit for Soil Gas Analysis","text":"cfp_dat() object created succesfully, modelling easy: modelling function can adapted different needs. example, can provide different modes argument fg_flux() calculate concentration gradient form exponential fit instead linear model. result cases object contains original data my_dat th flux rates different soil layers profiles identified cfp_dat(). , soil/atmoshere efflux rate specific production rate model soil layer can extracted. case forward model FLUX, may require consideration method extrapolation used (see manual ?efflux), different approaches implemented. efflux() returns data.frame one row per profile corresponding efflux rate.","code":"# 'normal' forward model FLUX <- fg_flux(my_dat) # inverse model PROFLUX <- pro_flux(my_dat) FLUX <- fg_flux(my_dat, modes = \"EF\") # soil/atmosphere efflux efflux(FLUX) efflux(PROFLUX)  # per-layer production rate production(FLUX) production(PROFLUX) library(ggplot2) efflux(PROFLUX) %>%   ggplot(aes(x = Date, y = efflux, col = site))+   geom_line()+   scale_color_viridis_d()+   scale_x_date(date_minor_breaks = \"1 month\")+   ylab(expression(\"CO\"[2]~\"efflux [\"*mu*\"mol m\"^\"-2\"~\"s\"^\"-1\"*\"]\"))+   theme_minimal()"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"extracting-information","dir":"","previous_headings":"Workflow","what":"Extracting information","title":"A Toolkit for Soil Gas Analysis","text":"information stored objects can easily extracted. Extraction functions prefix cfp_.","code":"# Get the id_cols that identify the unique profiles of an object: cfp_id_cols(gasdata) cfp_id_cols(FLUX)  # Get the layers_map from a combined dataset or model: cfp_layers_map(my_dat) cfp_layers_map(PROFLUX)"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"big-datasets-parallel-processing-and-progress-bars","dir":"","previous_headings":"Workflow","what":"Big datasets: Parallel processing and progress bars","title":"A Toolkit for Soil Gas Analysis","text":"big datasets (1000+ profiles), calculations may takes time. ConFluxPro uses excellent future progressr packages parallel processing progress bars cpu-intensive functions.","code":"library(future) library(progressr)  # enable paralell processing with future plan(multisession()) # disable plan(sequential())  # enable progress bars for one function call with_progress({pro_flux(my_dat)}) # or for all function calls automatically handlers(global = TRUE) # and change layout handlers(handler_progress(format = \":percent [:bar] :eta\"))"},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"subsetting","dir":"","previous_headings":"Workflow","what":"Subsetting","title":"A Toolkit for Soil Gas Analysis","text":"Subsetting main data types happens analogous dplyr calling filter(). can select profiles based id_cols selecting prof_id generated call cfp_dat(). also works model results.","code":"filter(soilphys,         Date == \"2021-04-01\",        site == \"site_b\") #>  #> A cfp_soilphys object  #> id_cols: site Date gas  #> 1  unique profiles  #>  #>     site  TPS   a   b depth upper lower       Date        SWC        t    p #> 1 site_b 0.35 1.2 1.5 -80.0   -60  -100 2021-04-01 0.14674436 5.131912 1013 #> 2 site_b 0.35 1.2 1.5 -50.0   -40   -60 2021-04-01 0.12995582 5.248726 1013 #> 3 site_b 0.20 0.8 1.3 -30.0   -20   -40 2021-04-01 0.04510915 5.326602 1013 #> 4 site_b 0.20 0.8 1.3 -16.5   -13   -20 2021-04-01 0.03230483 4.975450 1013 #> 5 site_b 0.61 0.7 1.4  -9.0    -5   -13 2021-04-01 0.12086816 5.118654 1013 #> 6 site_b 0.61 0.7 1.4  -2.5     0    -5 2021-04-01 0.12189161 5.242764 1013 #> 7 site_b 0.80 0.4 1.5   1.5     3     0 2021-04-01 0.15749876 5.378220 1013 #> 8 site_b 0.80 0.4 1.5   5.0     7     3 2021-04-01 0.12795519 5.582906 1013 #>        AFPS       DSD0 gas           D0           DS    c_air #> 1 0.2032556 0.10996264 CO2 1.428319e-05 1.570618e-06 43.78390 #> 2 0.2200442 0.12386427 CO2 1.429405e-05 1.770522e-06 43.76553 #> 3 0.1548909 0.07081471 CO2 1.430129e-05 1.012741e-06 43.75329 #> 4 0.1676952 0.07851755 CO2 1.426866e-05 1.120340e-06 43.80853 #> 5 0.4891318 0.25721385 CO2 1.428196e-05 3.673518e-06 43.78599 #> 6 0.4881084 0.25646070 CO2 1.429349e-05 3.665719e-06 43.76647 #> 7 0.6425012 0.20600177 CO2 1.430608e-05 2.947079e-06 43.74518 #> 8 0.6720448 0.22037247 CO2 1.432512e-05 3.156862e-06 43.71306 filter(my_dat, Date < \"2021-05-01\") #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  8  #> number of groups:  2 filter(PROFLUX, prof_id %in% c(1,7,9)) #>  #> A cfp_pfres pro_flux model result.  #> mean RMSE achieved:  0.007619  #> number of failed fits:  0  #>  #> A cfp_pfmod pro_flux model.  #> zero_flux: TRUE   #> zero_limits:  -Inf Inf   #> DSD0_optim:  FALSE   #> evenness_factor:  0   #> known_flux_factor:  0   #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  3  #> number of groups:  1"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"plotting","dir":"","previous_headings":"Workflow","what":"Plotting","title":"A Toolkit for Soil Gas Analysis","text":"get better understanding data, can plot profiles plot_profile() function. returns editable ggplot2 plot.","code":"PROFLUX %>%   filter(prof_id %in% c(16, 17)) %>%   plot_profile()+   ggplot2::theme_light() soilphys %>%   filter(Date == \"2021-08-01\") %>%   plot_profile()+   ggplot2::theme_light()"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"getting-help","dir":"","previous_headings":"Workflow","what":"Getting help","title":"A Toolkit for Soil Gas Analysis","text":"functionality, background output documented internal manual. Just run ?function_name access . Furthermore, can get descriptions parameters respective units special function cfp_parameter().","code":"cfp_parameter(\"efflux\") #>      name                             description           unit #> 29 efflux efflux at the soil/atmosphere interface µmol m^-2 s^-1 cfp_parameter(soilphys) #>  #> This object contains the following parameters: #>     name                    description     unit #> 2    gas                name of the gas     <NA> #> 3  depth  depth, higher values point up       cm #> 4  upper          upper border of layer       cm #> 5  lower          lower border of layer       cm #> 6    TPS               total pore space  vol/vol #> 7   AFPS          air-filled pore space  vol/vol #> 8    SWC             soil water content  vol/vol #> 9      t                    temperature       °C #> 10     p                       pressure      hPa #> 11  DSD0           relative diffusivity        1 #> 12    DS apparent diffusion coefficient m^2 s^-1 #> 13    D0   diffusion coefficient in air m^2 s^-1 #> 14 c_air          number density of air mol m^-3"},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"A Toolkit for Soil Gas Analysis","text":"package developed Valentin Gartiser: code [] valentingartiser.de Please contact experience problems questions - glad help can.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A Toolkit for Soil Gas Analysis","text":"program free software: can redistribute /modify terms GNU General Public License published Free Software Foundation, either version 3 License, (option) later version. program distributed hope useful, WITHOUT WARRANTY; without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE. See GNU General Public License details.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/ConFluxPro-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ConFluxPro: A Toolkit for Soil Gas Analysis — ConFluxPro-package","title":"ConFluxPro: A Toolkit for Soil Gas Analysis — ConFluxPro-package","text":"collection different functions help analysing soil gas profiles. implements different approaches flux calculation based gradient-flux method includes inverse model production-based flux estimation.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/ConFluxPro-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ConFluxPro: A Toolkit for Soil Gas Analysis — ConFluxPro-package","text":"Maintainer: Valentin Gartiser code@valentingartiser.de (ORCID)","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/D0_massman.html","id":null,"dir":"Reference","previous_headings":"","what":"D0_Massman — D0_massman","title":"D0_Massman — D0_massman","text":"function calculates Diffusion coefficients different gases air set temperature pressure.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/D0_massman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"D0_Massman — D0_massman","text":"","code":"D0_massman(gas, t, p)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/D0_massman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"D0_Massman — D0_massman","text":"gas (character) One \"CO2\",\"CH4\",\"N2O\",\"O2\",\"N2\" t (numeric) temperature °C p (numeric) pressure hpa","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/D0_massman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"D0_Massman — D0_massman","text":"D0 m^2/s","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/D0_massman.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"D0_Massman — D0_massman","text":"Massman, W. J. review molecular diffusivities H2O, CO2, CH4, CO, O3, SO2, NH3, N2O, , NO2 air, O2 N2 near STP. Atmospheric Environment 1998, 32(6), 1111–1127","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/DSD0.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate DSD0 — DSD0","title":"Calculate DSD0 — DSD0","text":"Different functions estimate soil diffusivity air-filled pore space.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/DSD0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate DSD0 — DSD0","text":"","code":"DSD0_millington_quirk(AFPS, TPS = NULL, tortuosity = NULL)  DSD0_moldrup(AFPS, AFPS_100, b_campbell)  DSD0_currie(AFPS, a_currie = 1.9, b_currie = 1.4)  DSD0_linear(AFPS, a_lin, b_lin)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/DSD0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate DSD0 — DSD0","text":"AFPS air-filled porosity. TPS Total pore space tortuosity tortuosity soil AFPS_100 Air filled porosity -100cm soil water matric head. b_campbell Campbell (1974) PSD index a_currie, b_currie fit parameter Currie-style models a_lin, b_lin linear model coefficients method method","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/DSD0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate DSD0 — DSD0","text":"DSD0_millington_quirk() form \\(D_s / D_0 = \\Xi \\cdot \\epsilon\\) \\(\\Xi\\) tortuosity factor (tortuosity) calulcated \\(\\Xi = \\frac{\\epsilon^{(10/3)}}{\\Phi^2}\\) ; \\(\\epsilon\\) air-filled pore space (AFPS) \\(\\Phi\\) porosity (TPS). Millington & Quirk (1961). DSD0_moldrup() form \\(D_s / D_0 = (2 \\cdot \\epsilon_{100}^3 + 0.04 \\cdot \\epsilon_{100}) \\cdot (\\frac{\\epsilon}{\\epsilon_{100}})^{(2 + \\frac{3}{b_{campbell}})}\\) \\(\\epsilon_{100}\\) air-filled pore space matric potential head -100 cm \\(b_{campbell}\\) slope water retention curve. Moldrup et al. (2000). DSD0_currie() form \\(D_s / D_0 = \\cdot \\epsilon^b\\) \\(\\) \\(b\\) fit parameter exponential model. Currie (1960) default values (=1.9; b=1.4)Troeh (1982). DSD0_linear() linear model form \\(D_s / D_0 = \\cdot \\epsilon + b\\).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/DSD0.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate DSD0 — DSD0","text":"Millington, R. J., & Quirk, J. P. (1961). Permeability porous solids. Transactions Faraday Society (Vol. 57, p. 1200). Royal Society Chemistry (RSC). https://doi.org/10.1039/tf9615701200 Moldrup, P., Olesen, T., Schjønning, P., Yamaguchi, T., & Rolston, D. E. (2000). Predicting Gas Diffusion Coefficient Undisturbed Soil Soil Water Characteristics. Soil Science Society America Journal (Vol. 64, Issue 1, pp. 94–100). Wiley. https://doi.org/10.2136/sssaj2000.64194x Currie, J. . (1960). Gaseous diffusion porous media. Part 2. - Dry granular materials. British Journal Applied Physics (Vol. 11, Issue 8, pp. 318–324). IOP Publishing. https://doi.org/10.1088/0508-3443/11/8/303 Troeh, F. R., Jabro, J. D., & Kirkham, D. (1982). Gaseous diffusion equations porous materials. Geoderma (Vol. 27, Issue 3, pp. 239–253). Elsevier BV. https://doi.org/10.1016/0016-7061(82)90033-7","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/DSD0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate DSD0 — DSD0","text":"","code":"DSD0_millington_quirk(0.5,0.6) #> [1] 0.1377952"},{"path":"https://valentingar.github.io/ConFluxPro/reference/Statvariable_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"variable bar — Statvariable_bar","title":"variable bar — Statvariable_bar","text":"custom ggplot2 stat implements variable-width bar plot.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/Statvariable_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"variable bar — Statvariable_bar","text":"","code":"Statvariable_bar"},{"path":"https://valentingar.github.io/ConFluxPro/reference/Statvariable_bar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"variable bar — Statvariable_bar","text":"object class variable_bar (inherits Stat, ggproto, gg) length 2.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/alternate.html","id":null,"dir":"Reference","previous_headings":"","what":"alternate — alternate","title":"alternate — alternate","text":"Alternate cfp_pfres / cfp_fgres models sensitivity analysis .","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/alternate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alternate — alternate","text":"","code":"alternate(   x,   f,   run_map,   return_raw = TRUE,   error_funs = NULL,   error_args = NULL )  alternate_model(run_map, x, f)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/alternate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"alternate — alternate","text":"x cfp_pfres cfp_fgres model result. f function taking soilphys object recalculates relevant columns. See complete_soilphys(). run_map data.frame created run_map() necessary information data changed distinct run_id. return_raw models returned , applying error_funs. Default TRUE - exporting models. error_funs list functions applied flux calculation return_raw == FALSE. can used output models quality parameters instead. Output must contain column RMSE. error_args list additional function arguments passed error_funs. Must match length error_funs","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/alternate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"alternate — alternate","text":"alternate_model() used internally change rerun one model, can also used update model given unique run_map, e.g. filtering best run_id original run_map.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/balance_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"balance_correction — balance_correction","title":"balance_correction — balance_correction","text":"function correct measured values non-complete gas exchange. Per sample, total balance (b_tot) obtained adding measurements gases , necessary, corrected missing gases.  Theoretically, bal (0;1), however values 1 can result calibration errors. Values 1 treated corrected. , x_ppm corrected: x_ppm / b_tot","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/balance_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"balance_correction — balance_correction","text":"","code":"balance_correction(   df,   limits = c(-999, +999),   gases = c(\"N2\", \"O2\", \"Ar\", \"CO2\"),   gases_std = c(0.78084, 0.20946, 0.00934, 0.0407),   gases_ob = c(\"N2\", \"O2\"),   set_na = F )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/balance_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"balance_correction — balance_correction","text":"df (dataframe) gasdata-dataframe. dataframe altered process function, overwritten (see examples ). limits (vector, numeric) vector two contains upper lower limits b_tot, x_ppm flagged set NA, set_na TRUE. gases (vector, character) character vector gases used balance approach. Default four abundant atmospheric gases (N2, O2, Ar, CO2). Spelling must match spelling gas-column gasdata exactly. gases_std (vector, numeric) numeric vector standard values used missing gases fraction total volume. Values b_tot recalculated account missing gases based gases present standard values. achieved assuming balance gases present first recalculating gases_st accordingly.  Order must match input gases. Defaults c(0.78084,0.20946,0.009340,0.0407)) gases_ob (vector, character) vector obligatory gases must present correct balance calculation. x_ppm samples missing gases flagged bal_flag corrected set NA. Defaults c(\"N2\",\"O2\"). set_na (logical) flagged values set NA (bal_flag == T)? Default F.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/balance_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"balance_correction — balance_correction","text":"gasdata (dataframe) added columns bal = balance bal_flag  TRUE value corrected (set NA). x_ppm, corrected balance","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/balance_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"balance_correction — balance_correction","text":"","code":"{ data(\"gasdata\")                               }"},{"path":"https://valentingar.github.io/ConFluxPro/reference/base_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"base_dat — base_dat","title":"base_dat — base_dat","text":"example cfp_dat() object combines example data.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/base_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"base_dat — base_dat","text":"","code":"base_dat"},{"path":"https://valentingar.github.io/ConFluxPro/reference/base_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"base_dat — base_dat","text":"cfp_dat() object list profiles profiles data. gasdata gasdata object. soilphys soilphys object. layers_map layers_map object.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/bootstrap_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap-estimate of Flux-error — bootstrap_error","title":"Bootstrap-estimate of Flux-error — bootstrap_error","text":"Bootstrap-estimate Flux-error","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/bootstrap_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap-estimate of Flux-error — bootstrap_error","text":"","code":"bootstrap_error(   x,   n_samples = 50,   sd_x_ppm = NULL,   n_replicates = NULL,   sample_from = \"gasdata\",   rep_cols = NULL )  # S3 method for class 'cfp_pfres' bootstrap_error(   x,   n_samples = 50,   sd_x_ppm = NULL,   n_replicates = NULL,   sample_from = \"gasdata\",   rep_cols = NULL )  make_bootstrap_model(   x,   n_samples = 50,   sd_x_ppm = NULL,   n_replicates = NULL,   sample_from = \"gasdata\",   rep_cols = NULL )  # S3 method for class 'cfp_pfres' make_bootstrap_model(   x,   n_samples = 50,   sd_x_ppm = NULL,   n_replicates = NULL,   sample_from = \"gasdata\",   rep_cols = NULL )  calculate_bootstrap_error(x, y)  # S3 method for class 'cfp_pfres' calculate_bootstrap_error(x, y)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/bootstrap_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap-estimate of Flux-error — bootstrap_error","text":"x cfp_pfres model result call pro_flux(). n_samples number samples take bootstrapping. sd_x_ppm optional estimate standard deviation x_ppm. Can either single value applied equally data.frame column name maps value every observation depth. See depth_structure() easy way create . provided column already present x$gasdata. n_replicates number replicates generated sd_x_ppm set. sample_from dataset sample bootstrapping dataset. Can either 'gasdata' 'soilphys' ''. rep_cols id_cols represent repetitions. removed, repetitions soilphys profile must match structure exactly. y result bootstrap model.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/bootstrap_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap-estimate of Flux-error — bootstrap_error","text":"x added columns DELTA_flux DELTA_prod estimate error corresponding columns units.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/bootstrap_error.html","id":"general-procedure","dir":"Reference","previous_headings":"","what":"General procedure","title":"Bootstrap-estimate of Flux-error — bootstrap_error","text":"bootstrap_error() mostly wrapper around two functions can also run separately. make_bootstrap_model(), sample_from = \"gasdata\" gasdata concentration data resampled every depth profile total number n_samples. done randomly sampling observations depth without changing number observations allowing replacing. rep_cols given, columns removed id_cols resulting profiles combined one. sample_from = \"soilphys\", soilphys data combined using rep_cols repetitions. Among every remaining profile depth, one observation across repetitions chosen n_samples. sample_from = \"\" applies methods . newly sampled profile identifiable added bootstrap_id column also added id_cols. new model run , bootstap error caculated calculate_bootstrap_error(). standard deviation production flux parameters across bootstrapped model runs calculated profile layer original model, destinct profile new model without rep_cols. returned together mean values prod, flux F0 across runs PROFLUX data.frame can thereby extracted efflux() production().","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/bootstrap_error.html","id":"artificial-observations-in-gasdata","dir":"Reference","previous_headings":"","what":"Artificial observations in gasdata","title":"Bootstrap-estimate of Flux-error — bootstrap_error","text":"enough observations per depth (e.g.) one measurement per depth, possible create artificial observations providing n_replicates sd_x_ppm. , every depth every profile first averaged mean (redundant one observation). , random dataset n_replicates observations generated normally distributed around mean standard deviation (ppm) sd_x_ppm. observations resampled described . Note error representative sampling error field measurement error measurement device, much lower.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/bootstrap_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap-estimate of Flux-error — bootstrap_error","text":"","code":"PROFLUX <- pro_flux(ConFluxPro::base_dat) PROFLUX_BSE <- bootstrap_error(PROFLUX) #>  #> validating datasets #> id_cols: site, Date, gas, bootstrap_id #> 1200 unique profiles efflux(PROFLUX_BSE) #>  #> A cfp_profile object  #> id_cols: site Date gas  #> 24  unique profiles  #>  #>      site       Date gas     efflux prof_id DELTA_efflux #> 1  site_a 2021-01-01 CO2  0.8429610       1   0.02633798 #> 2  site_b 2021-01-01 CO2  0.6763911       2   0.01389758 #> 3  site_a 2021-02-01 CO2  1.3784963       3   0.02182533 #> 4  site_b 2021-02-01 CO2  1.0666943       4   0.01496520 #> 5  site_a 2021-03-01 CO2  1.7424766       5   0.03833253 #> 6  site_b 2021-03-01 CO2  1.3910526       6   0.01160696 #> 7  site_a 2021-04-01 CO2  4.1396328       7   0.04253622 #> 8  site_b 2021-04-01 CO2  3.3456025       8   0.05015449 #> 9  site_a 2021-05-01 CO2  5.9676759       9   0.08219772 #> 10 site_b 2021-05-01 CO2  4.4710172      10   0.05518122 #> 11 site_a 2021-06-01 CO2  7.2678452      11   0.09628114 #> 12 site_b 2021-06-01 CO2  5.6783657      12   0.07184852 #> 13 site_a 2021-07-01 CO2 10.1469971      13   0.14381006 #> 14 site_b 2021-07-01 CO2  8.5688079      14   0.10590895 #> 15 site_a 2021-08-01 CO2  8.0515776      15   0.17054155 #> 16 site_b 2021-08-01 CO2  6.9149107      16   0.10510296 #> 17 site_a 2021-09-01 CO2  6.2443430      17   0.12090202 #> 18 site_b 2021-09-01 CO2  5.2440922      18   0.07166082 #> 19 site_a 2021-10-01 CO2  3.9959103      19   0.12215896 #> 20 site_b 2021-10-01 CO2  3.2447621      20   0.04116001 #> 21 site_a 2021-11-01 CO2  1.7529403      21   0.03401804 #> 22 site_b 2021-11-01 CO2  1.5550672      22   0.02664799 #> 23 site_a 2021-12-01 CO2  1.2077043      23   0.02362541 #> 24 site_b 2021-12-01 CO2  1.0862780      24   0.01307257  PROFLUX_BSE <- bootstrap_error(PROFLUX, n_replicates = 5, sd_x_ppm = 25) #> Adding gasdata replicates as normal distribution of 5 samples around the mean. #>  #> validating datasets #> id_cols: site, Date, gas, bootstrap_id #> 1200 unique profiles efflux(PROFLUX_BSE) #>  #> A cfp_profile object  #> id_cols: site Date gas  #> 24  unique profiles  #>  #>      site       Date gas     efflux prof_id DELTA_efflux #> 1  site_a 2021-01-01 CO2  0.8305233       1   0.06948057 #> 2  site_b 2021-01-01 CO2  0.6892845       2   0.02745311 #> 3  site_a 2021-02-01 CO2  1.3804727       3   0.08592559 #> 4  site_b 2021-02-01 CO2  1.0707094       4   0.03843973 #> 5  site_a 2021-03-01 CO2  1.7922332       5   0.05939070 #> 6  site_b 2021-03-01 CO2  1.4254358       6   0.05062181 #> 7  site_a 2021-04-01 CO2  3.9879387       7   0.07492112 #> 8  site_b 2021-04-01 CO2  3.3984600       8   0.05472674 #> 9  site_a 2021-05-01 CO2  5.9539752       9   0.11643840 #> 10 site_b 2021-05-01 CO2  4.4455024      10   0.05375143 #> 11 site_a 2021-06-01 CO2  7.2869279      11   0.06354410 #> 12 site_b 2021-06-01 CO2  5.7311535      12   0.12859636 #> 13 site_a 2021-07-01 CO2 10.2930064      13   0.09670892 #> 14 site_b 2021-07-01 CO2  8.5694332      14   0.05257841 #> 15 site_a 2021-08-01 CO2  8.1051011      15   0.08165216 #> 16 site_b 2021-08-01 CO2  6.8545510      16   0.03590167 #> 17 site_a 2021-09-01 CO2  6.2131739      17   0.05900213 #> 18 site_b 2021-09-01 CO2  5.1480204      18   0.04868803 #> 19 site_a 2021-10-01 CO2  4.1011940      19   0.09327191 #> 20 site_b 2021-10-01 CO2  3.2164744      20   0.06264923 #> 21 site_a 2021-11-01 CO2  1.6770558      21   0.09037221 #> 22 site_b 2021-11-01 CO2  1.5688890      22   0.03856545 #> 23 site_a 2021-12-01 CO2  1.1152357      23   0.07114110 #> 24 site_b 2021-12-01 CO2  0.9891861      24   0.02978153"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_altapply.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_altapply — cfp_altapply","title":"cfp_altapply — cfp_altapply","text":"Apply function list cfp_pfres pr cfp_fgres objects stored cfp_altres object. can used summarise alternate() results.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_altapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_altapply — cfp_altapply","text":"","code":"cfp_altapply(X, FUN, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_altapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_altapply — cfp_altapply","text":"X Either cfp_altres object list. FUN function applied element X:     see ‘Details’.  case functions like     +, %*%, function name must backquoted quoted. ... optional arguments FUN.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_altapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_altapply — cfp_altapply","text":"data.frame results FUN bound together added column run_id identifier original list elements.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_altres.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_altres — cfp_altres","title":"cfp_altres — cfp_altres","text":"S3 class result call alternate(). Essentially list added run_map attributes.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_altres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_altres — cfp_altres","text":"","code":"cfp_altres(   x,   og_model,   f,   run_map,   return_raw = TRUE,   error_funs = NULL,   error_args = NULL )  # S3 method for class 'cfp_altres' cfp_og_model(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_altres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_altres — cfp_altres","text":"x named list cfp_pfres cfp_fgres models. og_model original model altered f function taking soilphys object recalculates relevant columns. See complete_soilphys(). run_map data.frame created run_map() necessary information data changed distinct run_id. return_raw models returned , applying error_funs. Default TRUE - exporting models. error_funs list functions applied flux calculation return_raw == FALSE. can used output models quality parameters instead. Output must contain column RMSE. error_args list additional function arguments passed error_funs. Must match length error_funs","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_dat — cfp_dat","title":"cfp_dat — cfp_dat","text":"essential object class binds necessary input data run ConFluxPro model. automatically combines different datasets checks validity. may split soilphys layers correspond layers_map gasdata depths.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_dat — cfp_dat","text":"","code":"cfp_dat(gasdata, soilphys, layers_map)  as_cfp_dat(x)  # S3 method for class 'cfp_dat' as_cfp_dat(x)  # S3 method for class 'cfp_dat' filter(.data, ..., .preserve = FALSE)  split_by_group(x)  # S3 method for class 'cfp_dat' split_by_group(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_dat — cfp_dat","text":"gasdata cfp_gasdata object created running cfp_gasdata(). soilphys cfp_soilphys object created running cfp_soilphys(). layers_map cfp_layers_map object created running cfp_layers_map. x object class cfp_dat","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_dat — cfp_dat","text":"cfp_dat object following parameters: gasdata gasdata object added column \"gd_id\" unique profile. soilphys soilphys object added columns \"sp_id\" unique profile, \"step_id\" indicating position step bottom , \"height\" m layer, \"pmap\" indicating layer belongs bottom . Potentially, original steps split account depths within gasdata layers_map. layers_map layers_map object added column \"group_id\" indicating unique group layer parameterization set layers_map. profiles data.frame row indicates one unique profile characterised id_cols present original input well correspongin \"gd_id\", \"sp_id\", \"group_id\". row unique identifier \"prof_id\". id_cols character vector columns identify profile uniquely.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_dat — cfp_dat","text":"","code":"gasdata <- cfp_gasdata(   ConFluxPro::gasdata,   id_cols = c(\"site\", \"Date\")) #>  #> added 'gas' to id_cols soilphys <- cfp_soilphys(   ConFluxPro::soilphys,   id_cols = c(\"site\", \"Date\")) #>  #> added 'gas' to id_cols layers_map <-  cfp_layers_map(    ConFluxPro::layers_map,    gas = \"CO2\",    lowlim = 0,    highlim = 1000,    id_cols = \"site\") #>  #> added 'gas' to id_cols base_dat <- cfp_dat(gasdata, soilphys, layers_map) #>  #> validating datasets #> id_cols: site, Date, gas #> 24 unique profiles  ### filter similar to dplyr::fliter filter(base_dat, site == \"site_a\") #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  12  #> number of groups:  1  #>  filter(base_dat, prof_id %in%  1:5) #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  5  #> number of groups:  2  #>"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgmod.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_fgmod — cfp_fgmod","title":"cfp_fgmod — cfp_fgmod","text":"S3 class fg_flux() models. class inherits cfp_dat adds model specific parameters.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_fgmod — cfp_fgmod","text":"","code":"cfp_fgmod(   x,   gases = unique_gases(x),   modes = \"LL\",   param = c(\"c_air\", \"DS\"),   funs = c(\"arith\", \"harm\") )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_fgmod — cfp_fgmod","text":"x cfp_dat object necessary input datasets. gases (character) character vector defining gases fluxes shall calulated. modes (character) character vector specifying mode(s) dcdz calculation. Can \"LL\",\"LS\",\"EF\". LL local linear approach: within layer linear model evaluated concentration depth. LS linear spline approach: linear spline fitted complete profile nodes layer intersections. EF exponential fit approach: exponential function form y=+b*x^c fit concentration depth. Using first derivative function concentration gradient evaluated layer. DA exponential fit approach: exponential function form y=+b*(1-exp(-*x)) fit concentration depth. Using first derivative function concentration gradient evaluated layer. Davidson (2006) param (character) vector containing parameters soilphys, means calculated, must contain \"c_air\" \"DS\", parameters may help interpretation. funs (character) vector defining type mean used parameter param. One \"arith\" \"harm\".","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_fgmod — cfp_fgmod","text":"cfp_fgmod object. inherits cfp_dat() adds model specific parameters.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgmod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"cfp_fgmod — cfp_fgmod","text":"DAVIDSON, E. ., SAVAGE, K. E., TRUMBORE, S. E., & BORKEN, W. (2006). Vertical partitioning CO2 production within temperate forest soil. Global Change Biology (Vol. 12, Issue 6, pp. 944–956). Wiley. https://doi.org/10.1111/j.1365-2486.2005.01142.x","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_fgmod — cfp_fgmod","text":"","code":"cfp_fgmod(ConFluxPro::base_dat) #>  #> A cfp_fgmod fg_flux model.  #> gases: CO2   #> modes:  LL   #> param:  c_air DS   #> funs:  arith harm   #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  24  #> number of groups:  2  #>"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgres.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_fgres — cfp_fgres","title":"cfp_fgres — cfp_fgres","text":"function create object class cfp_fgres. central result class generated running fg_flux(). Intended internal use .","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_fgres — cfp_fgres","text":"","code":"cfp_fgres(x, y)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_fgres — cfp_fgres","text":"x valid cfp_fgmod object y corresponding FLUX data.frame.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_fgres — cfp_fgres","text":"cfp_fgres object. inherits cfp_fgmod().","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_fgres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_fgres — cfp_fgres","text":"","code":"if (FALSE) { # interactive() FLUX <- fg_flux(ConFluxPro::base_dat) cfp_fgres(   cfp_fgmod(ConFluxPro::base_dat),   FLUX$FLUX ) }"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_gasdata.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_gasdata — cfp_gasdata","title":"cfp_gasdata — cfp_gasdata","text":"Create cfp_gasdata object. data.frame containing gas concentration data one multiple soil profiles. soil profile uniquely identified columns data.frame specified id_cols attribute.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_gasdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_gasdata — cfp_gasdata","text":"","code":"cfp_gasdata(x, ...)  # S3 method for class 'data.frame' cfp_gasdata(x, id_cols, ...)  # S3 method for class 'cfp_dat' cfp_gasdata(x, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_gasdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_gasdata — cfp_gasdata","text":"x data.frame following columns: gas gas observation. depth (cm) depth observation. x_ppm (ppm) concentration ppm. id_cols id_cols identify one profile uniquely. ... used id_cols Column names data.frame uniquely identify profile.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_gasdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_gasdata — cfp_gasdata","text":"cfp_gasdata object.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_gasdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_gasdata — cfp_gasdata","text":"","code":"cfp_gasdata(   ConFluxPro::gasdata,   id_cols = c(\"site\", \"Date\")) #>  #> added 'gas' to id_cols #>  #> A cfp_gasdata object  #> id_cols: site Date gas  #> 24  unique profiles  #>  #>       site       Date depth     x_ppm gas #> 1   site_a 2021-01-01     5  422.7419 CO2 #> 2   site_a 2021-01-01     0  552.1412 CO2 #> 3   site_a 2021-01-01     0  555.8525 CO2 #> 4   site_a 2021-01-01     0  556.9315 CO2 #> 5   site_a 2021-01-01   -10  716.4256 CO2 #> 6   site_a 2021-01-01   -10  713.3633 CO2 #> 7   site_a 2021-01-01   -10  723.0691 CO2 #> 8   site_a 2021-01-01   -20  797.0534 CO2 #> 9   site_a 2021-01-01   -20  818.1842 CO2 #> 10  site_a 2021-01-01   -20  797.3729 CO2 #> 11  site_a 2021-01-01  -100 1111.5730 CO2 #> 12  site_a 2021-01-01  -100 1126.2997 CO2 #> 13  site_a 2021-01-01  -100 1071.1671 CO2 #> 14  site_b 2021-01-01     7  419.4424 CO2 #> 15  site_b 2021-01-01     0  566.4667 CO2 #> 16  site_b 2021-01-01     0  569.5438 CO2 #> 17  site_b 2021-01-01     0  565.8630 CO2 #> 18  site_b 2021-01-01   -10  656.0613 CO2 #> 19  site_b 2021-01-01   -10  657.3572 CO2 #> 20  site_b 2021-01-01   -10  679.9207 CO2 #> 21  site_b 2021-01-01   -20  794.9336 CO2 #> 22  site_b 2021-01-01   -20  780.1869 CO2 #> 23  site_b 2021-01-01   -20  796.2808 CO2 #> 24  site_b 2021-01-01  -100 1068.2201 CO2 #> 25  site_b 2021-01-01  -100 1078.4279 CO2 #> 26  site_b 2021-01-01  -100 1043.5430 CO2 #> 27  site_a 2021-02-01     5  419.2282 CO2 #> 28  site_a 2021-02-01     0  611.0210 CO2 #> 29  site_a 2021-02-01     0  624.3606 CO2 #> 30  site_a 2021-02-01     0  617.7600 CO2 #> 31  site_a 2021-02-01   -10  865.0991 CO2 #> 32  site_a 2021-02-01   -10  867.3435 CO2 #> 33  site_a 2021-02-01   -10  870.3159 CO2 #> 34  site_a 2021-02-01   -20  977.8661 CO2 #> 35  site_a 2021-02-01   -20  994.5743 CO2 #> 36  site_a 2021-02-01   -20  961.2449 CO2 #> 37  site_a 2021-02-01  -100 1410.3497 CO2 #> 38  site_a 2021-02-01  -100 1408.8546 CO2 #> 39  site_a 2021-02-01  -100 1373.6803 CO2 #> 40  site_b 2021-02-01     7  420.1084 CO2 #> 41  site_b 2021-02-01     0  641.7360 CO2 #> 42  site_b 2021-02-01     0  638.3337 CO2 #> 43  site_b 2021-02-01     0  645.0490 CO2 #> 44  site_b 2021-02-01   -10  791.4597 CO2 #> 45  site_b 2021-02-01   -10  785.6855 CO2 #> 46  site_b 2021-02-01   -10  801.8954 CO2 #> 47  site_b 2021-02-01   -20  974.8291 CO2 #> 48  site_b 2021-02-01   -20 1008.6615 CO2 #> 49  site_b 2021-02-01   -20  980.5283 CO2 #> 50  site_b 2021-02-01  -100 1379.7521 CO2 #> 51  site_b 2021-02-01  -100 1372.2433 CO2 #> 52  site_b 2021-02-01  -100 1347.3636 CO2 #> 53  site_a 2021-03-01     5  426.3029 CO2 #> 54  site_a 2021-03-01     0  693.9432 CO2 #> 55  site_a 2021-03-01     0  689.5181 CO2 #> 56  site_a 2021-03-01     0  691.0124 CO2 #> 57  site_a 2021-03-01   -10 1016.1515 CO2 #> 58  site_a 2021-03-01   -10 1009.0780 CO2 #> 59  site_a 2021-03-01   -10  972.0829 CO2 #> 60  site_a 2021-03-01   -20 1181.6977 CO2 #> 61  site_a 2021-03-01   -20 1168.6553 CO2 #> 62  site_a 2021-03-01   -20 1179.7046 CO2 #> 63  site_a 2021-03-01  -100 1781.4547 CO2 #> 64  site_a 2021-03-01  -100 1805.9921 CO2 #> 65  site_a 2021-03-01  -100 1742.1812 CO2 #> 66  site_b 2021-03-01     7  425.2102 CO2 #> 67  site_b 2021-03-01     0  716.6868 CO2 #> 68  site_b 2021-03-01     0  722.3080 CO2 #> 69  site_b 2021-03-01     0  721.3658 CO2 #> 70  site_b 2021-03-01   -10  932.6505 CO2 #> 71  site_b 2021-03-01   -10  911.4826 CO2 #> 72  site_b 2021-03-01   -10  922.9178 CO2 #> 73  site_b 2021-03-01   -20 1188.4704 CO2 #> 74  site_b 2021-03-01   -20 1156.9295 CO2 #> 75  site_b 2021-03-01   -20 1165.1434 CO2 #> 76  site_b 2021-03-01  -100 1697.4299 CO2 #> 77  site_b 2021-03-01  -100 1703.0454 CO2 #> 78  site_b 2021-03-01  -100 1693.9130 CO2 #> 79  site_a 2021-04-01     5  412.0280 CO2 #> 80  site_a 2021-04-01     0 1005.0039 CO2 #> 81  site_a 2021-04-01     0 1052.0287 CO2 #> 82  site_a 2021-04-01     0 1029.4426 CO2 #> 83  site_a 2021-04-01   -10 1745.3879 CO2 #> 84  site_a 2021-04-01   -10 1739.7358 CO2 #> 85  site_a 2021-04-01   -10 1710.7531 CO2 #> 86  site_a 2021-04-01   -20 2148.5399 CO2 #> 87  site_a 2021-04-01   -20 2111.2287 CO2 #> 88  site_a 2021-04-01   -20 2112.7759 CO2 #> 89  site_a 2021-04-01  -100 3507.0009 CO2 #> 90  site_a 2021-04-01  -100 3499.4697 CO2 #> 91  site_a 2021-04-01  -100 3537.9679 CO2 #> 92  site_b 2021-04-01     7  415.7144 CO2 #> 93  site_b 2021-04-01     0 1093.2063 CO2 #> 94  site_b 2021-04-01     0 1106.5400 CO2 #> 95  site_b 2021-04-01     0 1061.5058 CO2 #> 96  site_b 2021-04-01   -10 1530.7586 CO2 #> 97  site_b 2021-04-01   -10 1523.4431 CO2 #> 98  site_b 2021-04-01   -10 1514.6012 CO2 #> 99  site_b 2021-04-01   -20 2124.5992 CO2 #> 100 site_b 2021-04-01   -20 2150.3942 CO2 #> 101 site_b 2021-04-01   -20 2175.0434 CO2 #> 102 site_b 2021-04-01  -100 3325.5207 CO2 #> 103 site_b 2021-04-01  -100 3187.2834 CO2 #> 104 site_b 2021-04-01  -100 3379.7725 CO2 #> 105 site_a 2021-05-01     5  411.9987 CO2 #> 106 site_a 2021-05-01     0 1228.9323 CO2 #> 107 site_a 2021-05-01     0 1216.2659 CO2 #> 108 site_a 2021-05-01     0 1223.4636 CO2 #> 109 site_a 2021-05-01   -10 2190.7749 CO2 #> 110 site_a 2021-05-01   -10 2188.2898 CO2 #> 111 site_a 2021-05-01   -10 2183.0967 CO2 #> 112 site_a 2021-05-01   -20 2694.4844 CO2 #> 113 site_a 2021-05-01   -20 2658.8739 CO2 #> 114 site_a 2021-05-01   -20 2657.7470 CO2 #> 115 site_a 2021-05-01  -100 4302.5011 CO2 #> 116 site_a 2021-05-01  -100 4417.5900 CO2 #> 117 site_a 2021-05-01  -100 4405.8615 CO2 #> 118 site_b 2021-05-01     7  452.4227 CO2 #> 119 site_b 2021-05-01     0 1269.3092 CO2 #> 120 site_b 2021-05-01     0 1305.2941 CO2 #> 121 site_b 2021-05-01     0 1266.1530 CO2 #> 122 site_b 2021-05-01   -10 1879.0643 CO2 #> 123 site_b 2021-05-01   -10 1936.4893 CO2 #> 124 site_b 2021-05-01   -10 1896.1210 CO2 #> 125 site_b 2021-05-01   -20 2687.8906 CO2 #> 126 site_b 2021-05-01   -20 2662.3045 CO2 #> 127 site_b 2021-05-01   -20 2651.1797 CO2 #> 128 site_b 2021-05-01  -100 4017.7790 CO2 #> 129 site_b 2021-05-01  -100 4089.7727 CO2 #> 130 site_b 2021-05-01  -100 4216.1565 CO2 #> 131 site_a 2021-06-01     5  427.9467 CO2 #> 132 site_a 2021-06-01     0 1346.9994 CO2 #> 133 site_a 2021-06-01     0 1360.8018 CO2 #> 134 site_a 2021-06-01     0 1392.2409 CO2 #> 135 site_a 2021-06-01   -10 2538.4739 CO2 #> 136 site_a 2021-06-01   -10 2431.9212 CO2 #> 137 site_a 2021-06-01   -10 2473.0726 CO2 #> 138 site_a 2021-06-01   -20 3150.1049 CO2 #> 139 site_a 2021-06-01   -20 3033.1189 CO2 #> 140 site_a 2021-06-01   -20 3062.3271 CO2 #> 141 site_a 2021-06-01  -100 5114.9587 CO2 #> 142 site_a 2021-06-01  -100 5030.7937 CO2 #> 143 site_a 2021-06-01  -100 5077.3082 CO2 #> 144 site_b 2021-06-01     7  419.5878 CO2 #> 145 site_b 2021-06-01     0 1437.4117 CO2 #> 146 site_b 2021-06-01     0 1480.1748 CO2 #> 147 site_b 2021-06-01     0 1435.5322 CO2 #> 148 site_b 2021-06-01   -10 2165.8069 CO2 #> 149 site_b 2021-06-01   -10 2213.2682 CO2 #> 150 site_b 2021-06-01   -10 2139.6325 CO2 #> 151 site_b 2021-06-01   -20 3063.1511 CO2 #> 152 site_b 2021-06-01   -20 2957.3919 CO2 #> 153 site_b 2021-06-01   -20 3147.7019 CO2 #> 154 site_b 2021-06-01  -100 4801.2672 CO2 #> 155 site_b 2021-06-01  -100 4780.8762 CO2 #> 156 site_b 2021-06-01  -100 4699.9835 CO2 #> 157 site_a 2021-07-01     5  419.8448 CO2 #> 158 site_a 2021-07-01     0 1731.9887 CO2 #> 159 site_a 2021-07-01     0 1742.6603 CO2 #> 160 site_a 2021-07-01     0 1815.5070 CO2 #> 161 site_a 2021-07-01   -10 3349.4684 CO2 #> 162 site_a 2021-07-01   -10 3295.6931 CO2 #> 163 site_a 2021-07-01   -10 3369.7924 CO2 #> 164 site_a 2021-07-01   -20 4163.7262 CO2 #> 165 site_a 2021-07-01   -20 4259.0014 CO2 #> 166 site_a 2021-07-01   -20 4343.2422 CO2 #> 167 site_a 2021-07-01  -100 6991.0961 CO2 #> 168 site_a 2021-07-01  -100 7208.1975 CO2 #> 169 site_a 2021-07-01  -100 7152.7347 CO2 #> 170 site_b 2021-07-01     7  437.9113 CO2 #> 171 site_b 2021-07-01     0 1880.8089 CO2 #> 172 site_b 2021-07-01     0 1923.4648 CO2 #> 173 site_b 2021-07-01     0 1820.1978 CO2 #> 174 site_b 2021-07-01   -10 3041.3675 CO2 #> 175 site_b 2021-07-01   -10 2991.8867 CO2 #> 176 site_b 2021-07-01   -10 2930.9534 CO2 #> 177 site_b 2021-07-01   -20 4055.0993 CO2 #> 178 site_b 2021-07-01   -20 4264.3009 CO2 #> 179 site_b 2021-07-01   -20 4248.3194 CO2 #> 180 site_b 2021-07-01  -100 6719.0467 CO2 #> 181 site_b 2021-07-01  -100 6742.7184 CO2 #> 182 site_b 2021-07-01  -100 6632.3837 CO2 #> 183 site_a 2021-08-01     5  425.9009 CO2 #> 184 site_a 2021-08-01     0 1504.6289 CO2 #> 185 site_a 2021-08-01     0 1486.2637 CO2 #> 186 site_a 2021-08-01     0 1452.4404 CO2 #> 187 site_a 2021-08-01   -10 2805.6359 CO2 #> 188 site_a 2021-08-01   -10 2798.6014 CO2 #> 189 site_a 2021-08-01   -10 2731.8573 CO2 #> 190 site_a 2021-08-01   -20 3316.4329 CO2 #> 191 site_a 2021-08-01   -20 3460.3967 CO2 #> 192 site_a 2021-08-01   -20 3416.3930 CO2 #> 193 site_a 2021-08-01  -100 5826.3134 CO2 #> 194 site_a 2021-08-01  -100 5640.7197 CO2 #> 195 site_a 2021-08-01  -100 5680.8995 CO2 #> 196 site_b 2021-08-01     7  437.3724 CO2 #> 197 site_b 2021-08-01     0 1608.9208 CO2 #> 198 site_b 2021-08-01     0 1614.7676 CO2 #> 199 site_b 2021-08-01     0 1654.0873 CO2 #> 200 site_b 2021-08-01   -10 2442.1834 CO2 #> 201 site_b 2021-08-01   -10 2339.9554 CO2 #> 202 site_b 2021-08-01   -10 2452.0213 CO2 #> 203 site_b 2021-08-01   -20 3537.7060 CO2 #> 204 site_b 2021-08-01   -20 3608.7631 CO2 #> 205 site_b 2021-08-01   -20 3333.8511 CO2 #> 206 site_b 2021-08-01  -100 5321.8973 CO2 #> 207 site_b 2021-08-01  -100 5375.3014 CO2 #> 208 site_b 2021-08-01  -100 5333.5133 CO2 #> 209 site_a 2021-09-01     5  412.2511 CO2 #> 210 site_a 2021-09-01     0 1221.9509 CO2 #> 211 site_a 2021-09-01     0 1197.5707 CO2 #> 212 site_a 2021-09-01     0 1275.2873 CO2 #> 213 site_a 2021-09-01   -10 2187.8799 CO2 #> 214 site_a 2021-09-01   -10 2180.9721 CO2 #> 215 site_a 2021-09-01   -10 2201.8423 CO2 #> 216 site_a 2021-09-01   -20 2690.2449 CO2 #> 217 site_a 2021-09-01   -20 2680.0747 CO2 #> 218 site_a 2021-09-01   -20 2776.6072 CO2 #> 219 site_a 2021-09-01  -100 4432.4673 CO2 #> 220 site_a 2021-09-01  -100 4336.4758 CO2 #> 221 site_a 2021-09-01  -100 4486.7101 CO2 #> 222 site_b 2021-09-01     7  415.7818 CO2 #> 223 site_b 2021-09-01     0 1289.4769 CO2 #> 224 site_b 2021-09-01     0 1276.3649 CO2 #> 225 site_b 2021-09-01     0 1312.2808 CO2 #> 226 site_b 2021-09-01   -10 1925.7353 CO2 #> 227 site_b 2021-09-01   -10 1950.5640 CO2 #> 228 site_b 2021-09-01   -10 1923.5629 CO2 #> 229 site_b 2021-09-01   -20 2648.4898 CO2 #> 230 site_b 2021-09-01   -20 2763.0142 CO2 #> 231 site_b 2021-09-01   -20 2671.6942 CO2 #> 232 site_b 2021-09-01  -100 4285.3157 CO2 #> 233 site_b 2021-09-01  -100 4091.8576 CO2 #> 234 site_b 2021-09-01  -100 4158.0496 CO2 #> 235 site_a 2021-10-01     5  417.8452 CO2 #> 236 site_a 2021-10-01     0  951.3446 CO2 #> 237 site_a 2021-10-01     0  979.1793 CO2 #> 238 site_a 2021-10-01     0  957.2358 CO2 #> 239 site_a 2021-10-01   -10 1601.8614 CO2 #> 240 site_a 2021-10-01   -10 1573.3831 CO2 #> 241 site_a 2021-10-01   -10 1578.4988 CO2 #> 242 site_a 2021-10-01   -20 1971.9228 CO2 #> 243 site_a 2021-10-01   -20 1982.3393 CO2 #> 244 site_a 2021-10-01   -20 1981.9545 CO2 #> 245 site_a 2021-10-01  -100 3025.1618 CO2 #> 246 site_a 2021-10-01  -100 3230.9976 CO2 #> 247 site_a 2021-10-01  -100 3169.0124 CO2 #> 248 site_b 2021-10-01     7  419.7863 CO2 #> 249 site_b 2021-10-01     0 1019.2577 CO2 #> 250 site_b 2021-10-01     0  992.4578 CO2 #> 251 site_b 2021-10-01     0  990.4615 CO2 #> 252 site_b 2021-10-01   -10 1429.1772 CO2 #> 253 site_b 2021-10-01   -10 1399.2361 CO2 #> 254 site_b 2021-10-01   -10 1432.5605 CO2 #> 255 site_b 2021-10-01   -20 1983.9082 CO2 #> 256 site_b 2021-10-01   -20 1890.6451 CO2 #> 257 site_b 2021-10-01   -20 1902.4624 CO2 #> 258 site_b 2021-10-01  -100 2942.7938 CO2 #> 259 site_b 2021-10-01  -100 2878.9442 CO2 #> 260 site_b 2021-10-01  -100 2917.0030 CO2 #> 261 site_a 2021-11-01     5  423.4910 CO2 #> 262 site_a 2021-11-01     0  696.5564 CO2 #> 263 site_a 2021-11-01     0  691.8708 CO2 #> 264 site_a 2021-11-01     0  673.9876 CO2 #> 265 site_a 2021-11-01   -10 1007.3520 CO2 #> 266 site_a 2021-11-01   -10 1020.7773 CO2 #> 267 site_a 2021-11-01   -10 1017.7583 CO2 #> 268 site_a 2021-11-01   -20 1172.1837 CO2 #> 269 site_a 2021-11-01   -20 1122.0014 CO2 #> 270 site_a 2021-11-01   -20 1177.2193 CO2 #> 271 site_a 2021-11-01  -100 1781.2126 CO2 #> 272 site_a 2021-11-01  -100 1765.3741 CO2 #> 273 site_a 2021-11-01  -100 1768.7224 CO2 #> 274 site_b 2021-11-01     7  421.7263 CO2 #> 275 site_b 2021-11-01     0  710.8276 CO2 #> 276 site_b 2021-11-01     0  724.4798 CO2 #> 277 site_b 2021-11-01     0  717.7631 CO2 #> 278 site_b 2021-11-01   -10  909.0880 CO2 #> 279 site_b 2021-11-01   -10  940.5789 CO2 #> 280 site_b 2021-11-01   -10  938.4535 CO2 #> 281 site_b 2021-11-01   -20 1192.4815 CO2 #> 282 site_b 2021-11-01   -20 1142.7474 CO2 #> 283 site_b 2021-11-01   -20 1164.6139 CO2 #> 284 site_b 2021-11-01  -100 1699.0654 CO2 #> 285 site_b 2021-11-01  -100 1681.3117 CO2 #> 286 site_b 2021-11-01  -100 1690.4404 CO2 #> 287 site_a 2021-12-01     5  427.3788 CO2 #> 288 site_a 2021-12-01     0  616.6897 CO2 #> 289 site_a 2021-12-01     0  608.9208 CO2 #> 290 site_a 2021-12-01     0  623.2422 CO2 #> 291 site_a 2021-12-01   -10  854.8116 CO2 #> 292 site_a 2021-12-01   -10  865.0144 CO2 #> 293 site_a 2021-12-01   -10  853.6885 CO2 #> 294 site_a 2021-12-01   -20 1020.1808 CO2 #> 295 site_a 2021-12-01   -20  985.1444 CO2 #> 296 site_a 2021-12-01   -20  979.8400 CO2 #> 297 site_a 2021-12-01  -100 1424.2591 CO2 #> 298 site_a 2021-12-01  -100 1447.4077 CO2 #> 299 site_a 2021-12-01  -100 1430.1902 CO2 #> 300 site_b 2021-12-01     7  415.1231 CO2 #> 301 site_b 2021-12-01     0  640.4723 CO2 #> 302 site_b 2021-12-01     0  645.0615 CO2 #> 303 site_b 2021-12-01     0  640.7339 CO2 #> 304 site_b 2021-12-01   -10  804.6156 CO2 #> 305 site_b 2021-12-01   -10  796.6817 CO2 #> 306 site_b 2021-12-01   -10  797.4790 CO2 #> 307 site_b 2021-12-01   -20  994.2355 CO2 #> 308 site_b 2021-12-01   -20 1001.8942 CO2 #> 309 site_b 2021-12-01   -20  968.3041 CO2 #> 310 site_b 2021-12-01  -100 1364.2465 CO2 #> 311 site_b 2021-12-01  -100 1363.4034 CO2 #> 312 site_b 2021-12-01  -100 1347.9243 CO2 ### Also used to extract the gasdata object from cfp_dat cfp_gasdata(ConFluxPro::base_dat) #>  #> A cfp_gasdata object  #> id_cols: site Date gas  #> 24  unique profiles  #>  #>       site       Date gas depth     x_ppm #> 1   site_a 2021-01-01 CO2     5  422.7419 #> 2   site_a 2021-01-01 CO2     0  552.1412 #> 3   site_a 2021-01-01 CO2     0  555.8525 #> 4   site_a 2021-01-01 CO2     0  556.9315 #> 5   site_a 2021-01-01 CO2   -10  716.4256 #> 6   site_a 2021-01-01 CO2   -10  713.3633 #> 7   site_a 2021-01-01 CO2   -10  723.0691 #> 8   site_a 2021-01-01 CO2   -20  797.0534 #> 9   site_a 2021-01-01 CO2   -20  818.1842 #> 10  site_a 2021-01-01 CO2   -20  797.3729 #> 11  site_a 2021-01-01 CO2  -100 1111.5730 #> 12  site_a 2021-01-01 CO2  -100 1126.2997 #> 13  site_a 2021-01-01 CO2  -100 1071.1671 #> 14  site_b 2021-01-01 CO2     7  419.4424 #> 15  site_b 2021-01-01 CO2     0  566.4667 #> 16  site_b 2021-01-01 CO2     0  569.5438 #> 17  site_b 2021-01-01 CO2     0  565.8630 #> 18  site_b 2021-01-01 CO2   -10  656.0613 #> 19  site_b 2021-01-01 CO2   -10  657.3572 #> 20  site_b 2021-01-01 CO2   -10  679.9207 #> 21  site_b 2021-01-01 CO2   -20  794.9336 #> 22  site_b 2021-01-01 CO2   -20  780.1869 #> 23  site_b 2021-01-01 CO2   -20  796.2808 #> 24  site_b 2021-01-01 CO2  -100 1068.2201 #> 25  site_b 2021-01-01 CO2  -100 1078.4279 #> 26  site_b 2021-01-01 CO2  -100 1043.5430 #> 27  site_a 2021-02-01 CO2     5  419.2282 #> 28  site_a 2021-02-01 CO2     0  611.0210 #> 29  site_a 2021-02-01 CO2     0  624.3606 #> 30  site_a 2021-02-01 CO2     0  617.7600 #> 31  site_a 2021-02-01 CO2   -10  865.0991 #> 32  site_a 2021-02-01 CO2   -10  867.3435 #> 33  site_a 2021-02-01 CO2   -10  870.3159 #> 34  site_a 2021-02-01 CO2   -20  977.8661 #> 35  site_a 2021-02-01 CO2   -20  994.5743 #> 36  site_a 2021-02-01 CO2   -20  961.2449 #> 37  site_a 2021-02-01 CO2  -100 1410.3497 #> 38  site_a 2021-02-01 CO2  -100 1408.8546 #> 39  site_a 2021-02-01 CO2  -100 1373.6803 #> 40  site_b 2021-02-01 CO2     7  420.1084 #> 41  site_b 2021-02-01 CO2     0  641.7360 #> 42  site_b 2021-02-01 CO2     0  638.3337 #> 43  site_b 2021-02-01 CO2     0  645.0490 #> 44  site_b 2021-02-01 CO2   -10  791.4597 #> 45  site_b 2021-02-01 CO2   -10  785.6855 #> 46  site_b 2021-02-01 CO2   -10  801.8954 #> 47  site_b 2021-02-01 CO2   -20  974.8291 #> 48  site_b 2021-02-01 CO2   -20 1008.6615 #> 49  site_b 2021-02-01 CO2   -20  980.5283 #> 50  site_b 2021-02-01 CO2  -100 1379.7521 #> 51  site_b 2021-02-01 CO2  -100 1372.2433 #> 52  site_b 2021-02-01 CO2  -100 1347.3636 #> 53  site_a 2021-03-01 CO2     5  426.3029 #> 54  site_a 2021-03-01 CO2     0  693.9432 #> 55  site_a 2021-03-01 CO2     0  689.5181 #> 56  site_a 2021-03-01 CO2     0  691.0124 #> 57  site_a 2021-03-01 CO2   -10 1016.1515 #> 58  site_a 2021-03-01 CO2   -10 1009.0780 #> 59  site_a 2021-03-01 CO2   -10  972.0829 #> 60  site_a 2021-03-01 CO2   -20 1181.6977 #> 61  site_a 2021-03-01 CO2   -20 1168.6553 #> 62  site_a 2021-03-01 CO2   -20 1179.7046 #> 63  site_a 2021-03-01 CO2  -100 1781.4547 #> 64  site_a 2021-03-01 CO2  -100 1805.9921 #> 65  site_a 2021-03-01 CO2  -100 1742.1812 #> 66  site_b 2021-03-01 CO2     7  425.2102 #> 67  site_b 2021-03-01 CO2     0  716.6868 #> 68  site_b 2021-03-01 CO2     0  722.3080 #> 69  site_b 2021-03-01 CO2     0  721.3658 #> 70  site_b 2021-03-01 CO2   -10  932.6505 #> 71  site_b 2021-03-01 CO2   -10  911.4826 #> 72  site_b 2021-03-01 CO2   -10  922.9178 #> 73  site_b 2021-03-01 CO2   -20 1188.4704 #> 74  site_b 2021-03-01 CO2   -20 1156.9295 #> 75  site_b 2021-03-01 CO2   -20 1165.1434 #> 76  site_b 2021-03-01 CO2  -100 1697.4299 #> 77  site_b 2021-03-01 CO2  -100 1703.0454 #> 78  site_b 2021-03-01 CO2  -100 1693.9130 #> 79  site_a 2021-04-01 CO2     5  412.0280 #> 80  site_a 2021-04-01 CO2     0 1005.0039 #> 81  site_a 2021-04-01 CO2     0 1052.0287 #> 82  site_a 2021-04-01 CO2     0 1029.4426 #> 83  site_a 2021-04-01 CO2   -10 1745.3879 #> 84  site_a 2021-04-01 CO2   -10 1739.7358 #> 85  site_a 2021-04-01 CO2   -10 1710.7531 #> 86  site_a 2021-04-01 CO2   -20 2148.5399 #> 87  site_a 2021-04-01 CO2   -20 2111.2287 #> 88  site_a 2021-04-01 CO2   -20 2112.7759 #> 89  site_a 2021-04-01 CO2  -100 3507.0009 #> 90  site_a 2021-04-01 CO2  -100 3499.4697 #> 91  site_a 2021-04-01 CO2  -100 3537.9679 #> 92  site_b 2021-04-01 CO2     7  415.7144 #> 93  site_b 2021-04-01 CO2     0 1093.2063 #> 94  site_b 2021-04-01 CO2     0 1106.5400 #> 95  site_b 2021-04-01 CO2     0 1061.5058 #> 96  site_b 2021-04-01 CO2   -10 1530.7586 #> 97  site_b 2021-04-01 CO2   -10 1523.4431 #> 98  site_b 2021-04-01 CO2   -10 1514.6012 #> 99  site_b 2021-04-01 CO2   -20 2124.5992 #> 100 site_b 2021-04-01 CO2   -20 2150.3942 #> 101 site_b 2021-04-01 CO2   -20 2175.0434 #> 102 site_b 2021-04-01 CO2  -100 3325.5207 #> 103 site_b 2021-04-01 CO2  -100 3187.2834 #> 104 site_b 2021-04-01 CO2  -100 3379.7725 #> 105 site_a 2021-05-01 CO2     5  411.9987 #> 106 site_a 2021-05-01 CO2     0 1228.9323 #> 107 site_a 2021-05-01 CO2     0 1216.2659 #> 108 site_a 2021-05-01 CO2     0 1223.4636 #> 109 site_a 2021-05-01 CO2   -10 2190.7749 #> 110 site_a 2021-05-01 CO2   -10 2188.2898 #> 111 site_a 2021-05-01 CO2   -10 2183.0967 #> 112 site_a 2021-05-01 CO2   -20 2694.4844 #> 113 site_a 2021-05-01 CO2   -20 2658.8739 #> 114 site_a 2021-05-01 CO2   -20 2657.7470 #> 115 site_a 2021-05-01 CO2  -100 4302.5011 #> 116 site_a 2021-05-01 CO2  -100 4417.5900 #> 117 site_a 2021-05-01 CO2  -100 4405.8615 #> 118 site_b 2021-05-01 CO2     7  452.4227 #> 119 site_b 2021-05-01 CO2     0 1269.3092 #> 120 site_b 2021-05-01 CO2     0 1305.2941 #> 121 site_b 2021-05-01 CO2     0 1266.1530 #> 122 site_b 2021-05-01 CO2   -10 1879.0643 #> 123 site_b 2021-05-01 CO2   -10 1936.4893 #> 124 site_b 2021-05-01 CO2   -10 1896.1210 #> 125 site_b 2021-05-01 CO2   -20 2687.8906 #> 126 site_b 2021-05-01 CO2   -20 2662.3045 #> 127 site_b 2021-05-01 CO2   -20 2651.1797 #> 128 site_b 2021-05-01 CO2  -100 4017.7790 #> 129 site_b 2021-05-01 CO2  -100 4089.7727 #> 130 site_b 2021-05-01 CO2  -100 4216.1565 #> 131 site_a 2021-06-01 CO2     5  427.9467 #> 132 site_a 2021-06-01 CO2     0 1346.9994 #> 133 site_a 2021-06-01 CO2     0 1360.8018 #> 134 site_a 2021-06-01 CO2     0 1392.2409 #> 135 site_a 2021-06-01 CO2   -10 2538.4739 #> 136 site_a 2021-06-01 CO2   -10 2431.9212 #> 137 site_a 2021-06-01 CO2   -10 2473.0726 #> 138 site_a 2021-06-01 CO2   -20 3150.1049 #> 139 site_a 2021-06-01 CO2   -20 3033.1189 #> 140 site_a 2021-06-01 CO2   -20 3062.3271 #> 141 site_a 2021-06-01 CO2  -100 5114.9587 #> 142 site_a 2021-06-01 CO2  -100 5030.7937 #> 143 site_a 2021-06-01 CO2  -100 5077.3082 #> 144 site_b 2021-06-01 CO2     7  419.5878 #> 145 site_b 2021-06-01 CO2     0 1437.4117 #> 146 site_b 2021-06-01 CO2     0 1480.1748 #> 147 site_b 2021-06-01 CO2     0 1435.5322 #> 148 site_b 2021-06-01 CO2   -10 2165.8069 #> 149 site_b 2021-06-01 CO2   -10 2213.2682 #> 150 site_b 2021-06-01 CO2   -10 2139.6325 #> 151 site_b 2021-06-01 CO2   -20 3063.1511 #> 152 site_b 2021-06-01 CO2   -20 2957.3919 #> 153 site_b 2021-06-01 CO2   -20 3147.7019 #> 154 site_b 2021-06-01 CO2  -100 4801.2672 #> 155 site_b 2021-06-01 CO2  -100 4780.8762 #> 156 site_b 2021-06-01 CO2  -100 4699.9835 #> 157 site_a 2021-07-01 CO2     5  419.8448 #> 158 site_a 2021-07-01 CO2     0 1731.9887 #> 159 site_a 2021-07-01 CO2     0 1742.6603 #> 160 site_a 2021-07-01 CO2     0 1815.5070 #> 161 site_a 2021-07-01 CO2   -10 3349.4684 #> 162 site_a 2021-07-01 CO2   -10 3295.6931 #> 163 site_a 2021-07-01 CO2   -10 3369.7924 #> 164 site_a 2021-07-01 CO2   -20 4163.7262 #> 165 site_a 2021-07-01 CO2   -20 4259.0014 #> 166 site_a 2021-07-01 CO2   -20 4343.2422 #> 167 site_a 2021-07-01 CO2  -100 6991.0961 #> 168 site_a 2021-07-01 CO2  -100 7208.1975 #> 169 site_a 2021-07-01 CO2  -100 7152.7347 #> 170 site_b 2021-07-01 CO2     7  437.9113 #> 171 site_b 2021-07-01 CO2     0 1880.8089 #> 172 site_b 2021-07-01 CO2     0 1923.4648 #> 173 site_b 2021-07-01 CO2     0 1820.1978 #> 174 site_b 2021-07-01 CO2   -10 3041.3675 #> 175 site_b 2021-07-01 CO2   -10 2991.8867 #> 176 site_b 2021-07-01 CO2   -10 2930.9534 #> 177 site_b 2021-07-01 CO2   -20 4055.0993 #> 178 site_b 2021-07-01 CO2   -20 4264.3009 #> 179 site_b 2021-07-01 CO2   -20 4248.3194 #> 180 site_b 2021-07-01 CO2  -100 6719.0467 #> 181 site_b 2021-07-01 CO2  -100 6742.7184 #> 182 site_b 2021-07-01 CO2  -100 6632.3837 #> 183 site_a 2021-08-01 CO2     5  425.9009 #> 184 site_a 2021-08-01 CO2     0 1504.6289 #> 185 site_a 2021-08-01 CO2     0 1486.2637 #> 186 site_a 2021-08-01 CO2     0 1452.4404 #> 187 site_a 2021-08-01 CO2   -10 2805.6359 #> 188 site_a 2021-08-01 CO2   -10 2798.6014 #> 189 site_a 2021-08-01 CO2   -10 2731.8573 #> 190 site_a 2021-08-01 CO2   -20 3316.4329 #> 191 site_a 2021-08-01 CO2   -20 3460.3967 #> 192 site_a 2021-08-01 CO2   -20 3416.3930 #> 193 site_a 2021-08-01 CO2  -100 5826.3134 #> 194 site_a 2021-08-01 CO2  -100 5640.7197 #> 195 site_a 2021-08-01 CO2  -100 5680.8995 #> 196 site_b 2021-08-01 CO2     7  437.3724 #> 197 site_b 2021-08-01 CO2     0 1608.9208 #> 198 site_b 2021-08-01 CO2     0 1614.7676 #> 199 site_b 2021-08-01 CO2     0 1654.0873 #> 200 site_b 2021-08-01 CO2   -10 2442.1834 #> 201 site_b 2021-08-01 CO2   -10 2339.9554 #> 202 site_b 2021-08-01 CO2   -10 2452.0213 #> 203 site_b 2021-08-01 CO2   -20 3537.7060 #> 204 site_b 2021-08-01 CO2   -20 3608.7631 #> 205 site_b 2021-08-01 CO2   -20 3333.8511 #> 206 site_b 2021-08-01 CO2  -100 5321.8973 #> 207 site_b 2021-08-01 CO2  -100 5375.3014 #> 208 site_b 2021-08-01 CO2  -100 5333.5133 #> 209 site_a 2021-09-01 CO2     5  412.2511 #> 210 site_a 2021-09-01 CO2     0 1221.9509 #> 211 site_a 2021-09-01 CO2     0 1197.5707 #> 212 site_a 2021-09-01 CO2     0 1275.2873 #> 213 site_a 2021-09-01 CO2   -10 2187.8799 #> 214 site_a 2021-09-01 CO2   -10 2180.9721 #> 215 site_a 2021-09-01 CO2   -10 2201.8423 #> 216 site_a 2021-09-01 CO2   -20 2690.2449 #> 217 site_a 2021-09-01 CO2   -20 2680.0747 #> 218 site_a 2021-09-01 CO2   -20 2776.6072 #> 219 site_a 2021-09-01 CO2  -100 4432.4673 #> 220 site_a 2021-09-01 CO2  -100 4336.4758 #> 221 site_a 2021-09-01 CO2  -100 4486.7101 #> 222 site_b 2021-09-01 CO2     7  415.7818 #> 223 site_b 2021-09-01 CO2     0 1289.4769 #> 224 site_b 2021-09-01 CO2     0 1276.3649 #> 225 site_b 2021-09-01 CO2     0 1312.2808 #> 226 site_b 2021-09-01 CO2   -10 1925.7353 #> 227 site_b 2021-09-01 CO2   -10 1950.5640 #> 228 site_b 2021-09-01 CO2   -10 1923.5629 #> 229 site_b 2021-09-01 CO2   -20 2648.4898 #> 230 site_b 2021-09-01 CO2   -20 2763.0142 #> 231 site_b 2021-09-01 CO2   -20 2671.6942 #> 232 site_b 2021-09-01 CO2  -100 4285.3157 #> 233 site_b 2021-09-01 CO2  -100 4091.8576 #> 234 site_b 2021-09-01 CO2  -100 4158.0496 #> 235 site_a 2021-10-01 CO2     5  417.8452 #> 236 site_a 2021-10-01 CO2     0  951.3446 #> 237 site_a 2021-10-01 CO2     0  979.1793 #> 238 site_a 2021-10-01 CO2     0  957.2358 #> 239 site_a 2021-10-01 CO2   -10 1601.8614 #> 240 site_a 2021-10-01 CO2   -10 1573.3831 #> 241 site_a 2021-10-01 CO2   -10 1578.4988 #> 242 site_a 2021-10-01 CO2   -20 1971.9228 #> 243 site_a 2021-10-01 CO2   -20 1982.3393 #> 244 site_a 2021-10-01 CO2   -20 1981.9545 #> 245 site_a 2021-10-01 CO2  -100 3025.1618 #> 246 site_a 2021-10-01 CO2  -100 3230.9976 #> 247 site_a 2021-10-01 CO2  -100 3169.0124 #> 248 site_b 2021-10-01 CO2     7  419.7863 #> 249 site_b 2021-10-01 CO2     0 1019.2577 #> 250 site_b 2021-10-01 CO2     0  992.4578 #> 251 site_b 2021-10-01 CO2     0  990.4615 #> 252 site_b 2021-10-01 CO2   -10 1429.1772 #> 253 site_b 2021-10-01 CO2   -10 1399.2361 #> 254 site_b 2021-10-01 CO2   -10 1432.5605 #> 255 site_b 2021-10-01 CO2   -20 1983.9082 #> 256 site_b 2021-10-01 CO2   -20 1890.6451 #> 257 site_b 2021-10-01 CO2   -20 1902.4624 #> 258 site_b 2021-10-01 CO2  -100 2942.7938 #> 259 site_b 2021-10-01 CO2  -100 2878.9442 #> 260 site_b 2021-10-01 CO2  -100 2917.0030 #> 261 site_a 2021-11-01 CO2     5  423.4910 #> 262 site_a 2021-11-01 CO2     0  696.5564 #> 263 site_a 2021-11-01 CO2     0  691.8708 #> 264 site_a 2021-11-01 CO2     0  673.9876 #> 265 site_a 2021-11-01 CO2   -10 1007.3520 #> 266 site_a 2021-11-01 CO2   -10 1020.7773 #> 267 site_a 2021-11-01 CO2   -10 1017.7583 #> 268 site_a 2021-11-01 CO2   -20 1172.1837 #> 269 site_a 2021-11-01 CO2   -20 1122.0014 #> 270 site_a 2021-11-01 CO2   -20 1177.2193 #> 271 site_a 2021-11-01 CO2  -100 1781.2126 #> 272 site_a 2021-11-01 CO2  -100 1765.3741 #> 273 site_a 2021-11-01 CO2  -100 1768.7224 #> 274 site_b 2021-11-01 CO2     7  421.7263 #> 275 site_b 2021-11-01 CO2     0  710.8276 #> 276 site_b 2021-11-01 CO2     0  724.4798 #> 277 site_b 2021-11-01 CO2     0  717.7631 #> 278 site_b 2021-11-01 CO2   -10  909.0880 #> 279 site_b 2021-11-01 CO2   -10  940.5789 #> 280 site_b 2021-11-01 CO2   -10  938.4535 #> 281 site_b 2021-11-01 CO2   -20 1192.4815 #> 282 site_b 2021-11-01 CO2   -20 1142.7474 #> 283 site_b 2021-11-01 CO2   -20 1164.6139 #> 284 site_b 2021-11-01 CO2  -100 1699.0654 #> 285 site_b 2021-11-01 CO2  -100 1681.3117 #> 286 site_b 2021-11-01 CO2  -100 1690.4404 #> 287 site_a 2021-12-01 CO2     5  427.3788 #> 288 site_a 2021-12-01 CO2     0  616.6897 #> 289 site_a 2021-12-01 CO2     0  608.9208 #> 290 site_a 2021-12-01 CO2     0  623.2422 #> 291 site_a 2021-12-01 CO2   -10  854.8116 #> 292 site_a 2021-12-01 CO2   -10  865.0144 #> 293 site_a 2021-12-01 CO2   -10  853.6885 #> 294 site_a 2021-12-01 CO2   -20 1020.1808 #> 295 site_a 2021-12-01 CO2   -20  985.1444 #> 296 site_a 2021-12-01 CO2   -20  979.8400 #> 297 site_a 2021-12-01 CO2  -100 1424.2591 #> 298 site_a 2021-12-01 CO2  -100 1447.4077 #> 299 site_a 2021-12-01 CO2  -100 1430.1902 #> 300 site_b 2021-12-01 CO2     7  415.1231 #> 301 site_b 2021-12-01 CO2     0  640.4723 #> 302 site_b 2021-12-01 CO2     0  645.0615 #> 303 site_b 2021-12-01 CO2     0  640.7339 #> 304 site_b 2021-12-01 CO2   -10  804.6156 #> 305 site_b 2021-12-01 CO2   -10  796.6817 #> 306 site_b 2021-12-01 CO2   -10  797.4790 #> 307 site_b 2021-12-01 CO2   -20  994.2355 #> 308 site_b 2021-12-01 CO2   -20 1001.8942 #> 309 site_b 2021-12-01 CO2   -20  968.3041 #> 310 site_b 2021-12-01 CO2  -100 1364.2465 #> 311 site_b 2021-12-01 CO2  -100 1363.4034 #> 312 site_b 2021-12-01 CO2  -100 1347.9243"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layered_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_layered_profile — cfp_layered_profile","title":"cfp_layered_profile — cfp_layered_profile","text":"subclass cfp_profile() profile consists layers defined upper lower boundary without gaps duplicates.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layered_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_layered_profile — cfp_layered_profile","text":"","code":"cfp_layered_profile(x, id_cols = NULL)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layered_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_layered_profile — cfp_layered_profile","text":"x data.frame columns upper lower. id_cols Column names data.frame uniquely identify profile.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layered_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_layered_profile — cfp_layered_profile","text":"cfp_layered_profile object. [cfp_profile()] subdivided layers columns upper lower.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layered_profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cfp_layered_profile — cfp_layered_profile","text":"upper lower define upper lower bounds layer cm. Higher values lay top lower values.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layered_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_layered_profile — cfp_layered_profile","text":"","code":"df <- data.frame(   site = rep(c(\"site_a\", \"site_b\"), each = 2),   upper = c(10, 0, 7, 0),   lower = c(0, -100, 0, -100),   variable = 1:4)  cfp_layered_profile(df, id_cols = \"site\") #>  #> A cfp_layered_profile object  #> id_cols: site  #> 2  unique profiles  #>  #>     site upper lower variable #> 1 site_a    10     0        1 #> 2 site_a     0  -100        2 #> 3 site_b     7     0        3 #> 4 site_b     0  -100        4"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layers_map.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_layers_map — cfp_layers_map","title":"cfp_layers_map — cfp_layers_map","text":"function create cfp_layers_map object defines layers fg_flux() pro_flux() models.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layers_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_layers_map — cfp_layers_map","text":"","code":"cfp_layers_map(x, ...)  # S3 method for class 'cfp_dat' cfp_layers_map(x, ...)  # S3 method for class 'data.frame' cfp_layers_map(   x,   id_cols,   gas = NULL,   lowlim = NULL,   highlim = NULL,   layer_couple = 0,   ... )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layers_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_layers_map — cfp_layers_map","text":"x (data.frame) defines layers production flux modeled. Note parameters can also provided directly function call instead (see Details). id_cols relevant id_cols (see ) gas, gas modelled. upper, lower upper lower boundaries layer lowlim, highlim lower upper limits production rate modeled \\(\\mu~mol~m^{-3}\\) parameter layer_couple, indicates strongly layer linked one (0 coupling) ... used id_cols Column names data.frame uniquely identify profile. gas (character vector) gas names added x repeated gas. lowlim (numeric vector) length gas lower limit possible production allowed pro_flux() models. highlim (numeric vector)  length gas upper limit possible production allowed pro_flux() models. layer_couple (numeric_vector) vector length gas indicates strongly layer linked one (0 coupling, default).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layers_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_layers_map — cfp_layers_map","text":"cfp_layered_profile() data.frame columns described well layer pmap columns identify layer integer (ascending bottom top).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layers_map.html","id":"add-lowlim-and-highlim-for-multiple-gases","dir":"Reference","previous_headings":"","what":"Add lowlim and highlim for multiple gases","title":"cfp_layers_map — cfp_layers_map","text":"Sometimes practical model different gases different limits. example, reasonable assumption CO2 consumed relevant amounts soils, whereas CH4 may produced consumed. Therefore may want limit production rates CO2 positive values, whereas allowing negative CH4 production rates (.e. consumption) well. make setup easy, can provide gas vector function together highlim lowlim vectors length. provided layers_map data.frame replicated gas respective values production limits provided.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_layers_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_layers_map — cfp_layers_map","text":"","code":"cfp_layers_map(    ConFluxPro::layers_map,    gas = \"CO2\",    lowlim = 0,    highlim = 1000,    id_cols = \"site\") #>  #> added 'gas' to id_cols #>  #> A cfp_layers_map object  #> id_cols: site gas  #> 2  unique profiles  #>  #>     site upper lower gas lowlim highlim layer_couple layer pmap #> 1 site_a     0  -100 CO2      0    1000            0     1    1 #> 2 site_b     0  -100 CO2      0    1000            0     1    1 #> 3 site_a     5     0 CO2      0    1000            0     2    2 #> 4 site_b     7     0 CO2      0    1000            0     2    2  ### add multiple gases at once cfp_layers_map(    ConFluxPro::layers_map,    id_cols = \"site\",    gas = c(\"CO2\", \"CH4\"),    lowlim = c(0, -1000),    highlim = c(1000, 1000)) #>  #> added 'gas' to id_cols #>  #> A cfp_layers_map object  #> id_cols: site gas  #> 4  unique profiles  #>  #>     site upper lower gas lowlim highlim layer_couple layer pmap #> 1 site_a     0  -100 CO2      0    1000            0     1    1 #> 2 site_b     0  -100 CO2      0    1000            0     1    1 #> 3 site_a     0  -100 CH4  -1000    1000            0     1    1 #> 4 site_b     0  -100 CH4  -1000    1000            0     1    1 #> 5 site_a     5     0 CO2      0    1000            0     2    2 #> 6 site_a     5     0 CH4  -1000    1000            0     2    2 #> 7 site_b     7     0 CO2      0    1000            0     2    2 #> 8 site_b     7     0 CH4  -1000    1000            0     2    2  ### Extract from an existing cfp_dat cfp_layers_map(ConFluxPro::base_dat) #>  #> A cfp_layers_map object  #> id_cols: site gas  #> 2  unique profiles  #>  #>     site upper lower gas lowlim highlim layer_couple layer pmap #> 1 site_a     0  -100 CO2      0    1000            0     1    1 #> 2 site_b     0  -100 CO2      0    1000            0     1    1 #> 3 site_a     5     0 CO2      0    1000            0     2    2 #> 4 site_b     7     0 CO2      0    1000            0     2    2"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_parameter — cfp_parameter","title":"cfp_parameter — cfp_parameter","text":"Function access parameter descriptions units used ConFluxPro","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_parameter — cfp_parameter","text":"","code":"cfp_parameter(x = NULL)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_parameter — cfp_parameter","text":"x object data.frame match parameters , character vector parameter names.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfmod.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_pfmod — cfp_pfmod","title":"cfp_pfmod — cfp_pfmod","text":"S3 class pro_flux() models. class inherits cfp_dat adds model specific parameters.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_pfmod — cfp_pfmod","text":"","code":"cfp_pfmod(   x,   zero_flux = TRUE,   zero_limits = c(-Inf, Inf),   DSD0_optim = FALSE,   evenness_factor = 0,   known_flux_factor = 0 )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_pfmod — cfp_pfmod","text":"x cfp_dat object necessary input datasets. zero_flux (logical) Applies zero-flux boundary condition? FALSE, first value X represents incoming flux lowest layer. zero_limits (numeric vector) vector length 2 defining lower upper limit lowest flux zero_flux = F. DSD0_optim RESERVED FUTURE EXPANSION evenness_factor (numeric) user defined factor used penalise strong differences optimised production rates. must identified trial--error can help prevent production rates simply set zero basically lower production relative maximum absolute productions, higher penalised. evenness_factor defines weight penalty optimisation algorithm prod_optim. known_flux_factor RESERVED FUTURE EXPANSION","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_pfmod — cfp_pfmod","text":"cfp_pfmod object inherits cfp_dat()","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_pfmod — cfp_pfmod","text":"","code":"cfp_pfmod(ConFluxPro::base_dat) #>  #> A cfp_pfmod pro_flux model.  #> zero_flux: TRUE   #> zero_limits:  -Inf Inf   #> DSD0_optim:  FALSE   #> evenness_factor:  0   #> known_flux_factor:  0   #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  24  #> number of groups:  2  #>"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfres.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_pfres — cfp_pfres","title":"cfp_pfres — cfp_pfres","text":"function create object class cfp_pfres. central result class generated running pro_flux(). Intended internal use .","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_pfres — cfp_pfres","text":"","code":"cfp_pfres(x, y)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_pfres — cfp_pfres","text":"x valid cfp_pfmod object y corresponding PROFULX data.frame.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_pfres — cfp_pfres","text":"cfp_pfres object. inherits cfp_pfmod().","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_pfres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_pfres — cfp_pfres","text":"","code":"if (FALSE) { # interactive() PROFLUX <- pro_flux(ConFluxPro::base_dat) cfp_pfres(   cfp_pfmod(ConFluxPro::base_dat),   PROFLUX$PROFLUX ) }"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_profile — cfp_profile","title":"cfp_profile — cfp_profile","text":"central S3 class defines data.frame columns given id_cols define distinct soil profiles.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_profile — cfp_profile","text":"","code":"cfp_profile(x, id_cols = NULL)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_profile — cfp_profile","text":"x data.frame id_cols Column names data.frame uniquely identify profile.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_profile — cfp_profile","text":"cfp_profile object. data.frame id_cols attribute.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_profile — cfp_profile","text":"","code":"df <- data.frame(   site = rep(c(\"site_a\", \"site_b\"), each = 2),   variable = 1:4)  cfp_profile(df, id_cols = \"site\") #>  #> A cfp_profile object  #> id_cols: site  #> 2  unique profiles  #>  #>     site variable #> 1 site_a        1 #> 2 site_a        2 #> 3 site_b        3 #> 4 site_b        4  ### multiple id_cols df <- data.frame(   site = rep(c(\"site_a\", \"site_b\"), each = 4),   replicate = rep(c(1,2), times = 4),   variable = 1:8)  cfp_profile(df, id_cols = c(\"site\", \"replicate\")) #>  #> A cfp_profile object  #> id_cols: site replicate  #> 4  unique profiles  #>  #>     site replicate variable #> 1 site_a         1        1 #> 2 site_a         2        2 #> 3 site_a         1        3 #> 4 site_a         2        4 #> 5 site_b         1        5 #> 6 site_b         2        6 #> 7 site_b         1        7 #> 8 site_b         2        8"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_run_map.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_run_map — cfp_run_map","title":"cfp_run_map — cfp_run_map","text":"S3 class cfp_run_map used alternate(). Either create new run map cfp_pfres cfp_fgres model extract existing run_map cfp_altres object.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_run_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_run_map — cfp_run_map","text":"","code":"cfp_run_map(   x,   params = list(),   type = NULL,   method = NULL,   n_runs = NULL,   layers_different = FALSE,   layers_from = \"layers_map\",   layers_altmap = NULL,   topheight_adjust = FALSE )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_run_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_run_map — cfp_run_map","text":"x Either cfp_pfres cfp_fgres model result. params named list numeric vectors. Names indicate column names soilphys, vectors either distinct values (method permutation) limits (method random). type vector length param indicating values params represent. One abs Absolute values applied -. factor Factors multiplied original values. addition Factors added original values. method Either 'random', random value chosen within bounds set params 'permutation', every permutation values params added. n_runs Integer value number alterations done method = 'random'. layers_different layers layers_map changed individually? TRUE allows different changes different depths. layers_from (character) layers_different TRUE, source layers created? One : layers_map (default) Use layers defined layers_map. soilphys Use layers defined soilphys layers_altmap Use layers defined provided layers_altmap object. layers_altmap optional layers_map created using layers_map() defines layers used layers_different = TRUE. topheight_adjust (logical) proposed change topheight larger highest layer soilphys, limits automatically adjusted per id_cols indivdually? Default FALSE, leads error case.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_soilphys.html","id":null,"dir":"Reference","previous_headings":"","what":"cfp_soilphys — cfp_soilphys","title":"cfp_soilphys — cfp_soilphys","text":"Create cfp_soilphys object. data.frame containing layered data soil physical properties, minimum air density c_air diffsution coeffecient DS one multiple soil profiles. soil profile uniquely identified columns data.frame specified id_cols attribute. profile subdivided layers columns upper lower (see cfp_layered_profile).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_soilphys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfp_soilphys — cfp_soilphys","text":"","code":"cfp_soilphys(x, ...)  # S3 method for class 'cfp_dat' cfp_soilphys(x, ...)  # S3 method for class 'data.frame' cfp_soilphys(x, id_cols, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_soilphys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfp_soilphys — cfp_soilphys","text":"x data.frame (least) following columns: upper (cm) upper bound step. lower (cm) lower bound step. gas gas step. DS (\\(m^2 s^-1\\)) specific diffusion coefficient gas step. c_air (\\(mol m^-3\\)) number density air step. id_cols id_cols identify one profile uniquely. id_cols Column names data.frame uniquely identify profile.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_soilphys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfp_soilphys — cfp_soilphys","text":"cfp_soilphys object.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/cfp_soilphys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfp_soilphys — cfp_soilphys","text":"","code":"cfp_soilphys(   ConFluxPro::soilphys,   id_cols = c(\"site\", \"Date\", \"gas\") ) #>  #> A cfp_soilphys object  #> id_cols: site Date gas  #> 24  unique profiles  #>  #>       site  TPS    a   b depth upper lower       Date        SWC            t #> 1   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-01-01 0.16135277 -0.789903514 #> 2   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-02-01 0.12392743  0.005814771 #> 3   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-03-01 0.12227893  2.059937865 #> 4   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-04-01 0.14464345  4.725217894 #> 5   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-05-01 0.11446588  8.825682240 #> 6   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-06-01 0.09537391 10.377836383 #> 7   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-07-01 0.06935668 11.202861092 #> 8   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-08-01 0.06097648 10.009073112 #> 9   site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-09-01 0.06987624  7.940632454 #> 10  site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-10-01 0.07014097  5.093914320 #> 11  site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-11-01 0.09199596  1.513765537 #> 12  site_a 0.38 1.20 1.5 -80.0   -60  -100 2021-12-01 0.13516790 -0.138361143 #> 13  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-01-01 0.12779751 -1.974758784 #> 14  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-02-01 0.12206169 -1.056152663 #> 15  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-03-01 0.12005613  1.279122687 #> 16  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-04-01 0.13754664  4.900923939 #> 17  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-05-01 0.08588769  9.041512140 #> 18  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-06-01 0.09087161 11.049650601 #> 19  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-07-01 0.06887892 12.872511761 #> 20  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-08-01 0.06647048 10.640454211 #> 21  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-09-01 0.05841746  7.837381218 #> 22  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-10-01 0.06444560  5.167411136 #> 23  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-11-01 0.07093349  1.156822624 #> 24  site_a 0.38 1.20 1.5 -50.0   -40   -60 2021-12-01 0.11855012 -1.379337638 #> 25  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-01-01 0.10824738 -2.705419534 #> 26  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-02-01 0.11046777 -1.711032581 #> 27  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-03-01 0.10054849  0.797619994 #> 28  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-04-01 0.09319393  5.009276001 #> 29  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-05-01 0.09450679  9.174607245 #> 30  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-06-01 0.07354319 11.463936036 #> 31  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-07-01 0.05759840 13.902129673 #> 32  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-08-01 0.05295930 11.029805889 #> 33  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-09-01 0.04922287  7.773709622 #> 34  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-10-01 0.05183900  5.212734172 #> 35  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-11-01 0.04445528  0.936707828 #> 36  site_a 0.38 1.20 1.5 -31.5   -23   -40 2021-12-01 0.10601860 -2.144606477 #> 37  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-01-01 0.10269426 -4.778507694 #> 38  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-02-01 0.09167729 -2.760253024 #> 39  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-03-01 0.06997404  0.438113008 #> 40  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-04-01 0.10165638  4.178396294 #> 41  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-05-01 0.08055249  9.950314584 #> 42  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-06-01 0.06479207 11.910006233 #> 43  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-07-01 0.06098852 14.510511310 #> 44  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-08-01 0.04653729 13.833408605 #> 45  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-09-01 0.03815859 10.468082402 #> 46  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-10-01 0.05305960  4.666227261 #> 47  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-11-01 0.06141455  0.474415162 #> 48  site_a 0.45 1.05 1.6 -19.0   -15   -23 2021-12-01 0.11749614 -2.452538053 #> 49  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-01-01 0.12111059 -4.941950172 #> 50  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-02-01 0.08458007 -3.450711479 #> 51  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-03-01 0.08159875  0.045924822 #> 52  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-04-01 0.07058679  4.658218991 #> 53  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-05-01 0.07305746 10.056091363 #> 54  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-06-01 0.05492004 11.386819636 #> 55  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-07-01 0.05215679 13.493560406 #> 56  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-08-01 0.04825040 14.932568341 #> 57  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-09-01 0.04443048 10.345954855 #> 58  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-10-01 0.04135314  4.431750849 #> 59  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-11-01 0.06293469  0.067754406 #> 60  site_a 0.45 1.05 1.6 -11.0    -7   -15 2021-12-01 0.07107141 -3.557185253 #> 61  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-01-01 0.09415401 -5.095177495 #> 62  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-02-01 0.09556181 -4.098016281 #> 63  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-03-01 0.09159233 -0.321751602 #> 64  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-04-01 0.10448052  5.108052769 #> 65  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-05-01 0.07428442 10.155257092 #> 66  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-06-01 0.04825304 10.896332201 #> 67  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-07-01 0.04138080 12.540168934 #> 68  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-08-01 0.05557555 15.963030593 #> 69  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-09-01 0.04235123 10.231460278 #> 70  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-10-01 0.04045612  4.211929213 #> 71  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-11-01 0.06440254 -0.313490052 #> 72  site_a 0.52 0.80 1.7  -3.5     0    -7 2021-12-01 0.11012308 -4.592792003 #> 73  site_a 0.84 0.35 1.2   2.5     5     0 2021-01-01 0.18170958 -5.979843913 #> 74  site_a 0.84 0.35 1.2   2.5     5     0 2021-02-01 0.14611772 -4.354791034 #> 75  site_a 0.84 0.35 1.2   2.5     5     0 2021-03-01 0.14588659 -0.723156720 #> 76  site_a 0.84 0.35 1.2   2.5     5     0 2021-04-01 0.15689576  5.317203251 #> 77  site_a 0.84 0.35 1.2   2.5     5     0 2021-05-01 0.12042988 11.281448127 #> 78  site_a 0.84 0.35 1.2   2.5     5     0 2021-06-01 0.10016325 14.059040328 #> 79  site_a 0.84 0.35 1.2   2.5     5     0 2021-07-01 0.09155761 17.249086822 #> 80  site_a 0.84 0.35 1.2   2.5     5     0 2021-08-01 0.07517403 16.956101791 #> 81  site_a 0.84 0.35 1.2   2.5     5     0 2021-09-01 0.07527369 12.157481114 #> 82  site_a 0.84 0.35 1.2   2.5     5     0 2021-10-01 0.07531779  4.538994367 #> 83  site_a 0.84 0.35 1.2   2.5     5     0 2021-11-01 0.10862922 -0.769278882 #> 84  site_a 0.84 0.35 1.2   2.5     5     0 2021-12-01 0.17177981 -5.461548369 #> 85  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-01-01 0.15177347 -0.760136684 #> 86  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-02-01 0.14754014  0.013657432 #> 87  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-03-01 0.12499533  2.069232975 #> 88  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-04-01 0.14674436  5.131912309 #> 89  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-05-01 0.08702691  7.977336506 #> 90  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-06-01 0.10550513 10.092462468 #> 91  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-07-01 0.08173583  9.298023160 #> 92  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-08-01 0.06670726 10.447606285 #> 93  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-09-01 0.05150596  7.482481342 #> 94  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-10-01 0.07206531  5.980034473 #> 95  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-11-01 0.09464874  1.816129076 #> 96  site_b 0.35 1.20 1.5 -80.0   -60  -100 2021-12-01 0.13536420 -0.059126606 #> 97  site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-01-01 0.12588911 -1.900341711 #> 98  site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-02-01 0.10311066 -0.982639296 #> 99  site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-03-01 0.10062188  1.432492143 #> 100 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-04-01 0.12995582  5.248726225 #> 101 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-05-01 0.08644474  9.239455905 #> 102 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-06-01 0.06641329 11.941627123 #> 103 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-07-01 0.06416576 10.736706519 #> 104 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-08-01 0.05436811 12.658908520 #> 105 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-09-01 0.05377151  8.032934896 #> 106 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-10-01 0.06590843  5.423667933 #> 107 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-11-01 0.06709121  1.301116278 #> 108 site_b 0.35 1.20 1.5 -50.0   -40   -60 2021-12-01 0.11924550 -1.166417621 #> 109 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-01-01 0.05038321 -2.660478396 #> 110 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-02-01 0.06399921 -1.646837116 #> 111 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-03-01 0.04205140  1.007998255 #> 112 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-04-01 0.04510915  5.326602170 #> 113 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-05-01 0.04582019 10.080868838 #> 114 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-06-01 0.02499814 13.174403560 #> 115 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-07-01 0.02772383 11.695828759 #> 116 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-08-01 0.01572449 14.133110009 #> 117 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-09-01 0.02873606  8.399903932 #> 118 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-10-01 0.02352881  5.052756906 #> 119 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-11-01 0.02979040  0.957774412 #> 120 site_b 0.20 0.80 1.3 -30.0   -20   -40 2021-12-01 0.03527563 -1.904611631 #> 121 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-01-01 0.05000081 -4.021340872 #> 122 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-02-01 0.05799344 -3.162888934 #> 123 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-03-01 0.05823557  0.320792733 #> 124 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-04-01 0.03230483  4.975450052 #> 125 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-05-01 0.03394412 10.547663028 #> 126 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-06-01 0.03926870 14.082632961 #> 127 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-07-01 0.02198031 15.709877051 #> 128 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-08-01 0.02219643 12.315149405 #> 129 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-09-01 0.01955716 10.462670598 #> 130 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-10-01 0.01736414  5.596401189 #> 131 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-11-01 0.02656958  0.278406107 #> 132 site_b 0.20 0.80 1.3 -16.5   -13   -20 2021-12-01 0.04465928 -2.889328092 #> 133 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-01-01 0.12826312 -5.090781792 #> 134 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-02-01 0.11569024 -3.586434020 #> 135 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-03-01 0.12572711 -0.039957854 #> 136 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-04-01 0.12086816  5.118653778 #> 137 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-05-01 0.10246451 10.892628777 #> 138 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-06-01 0.08471983 14.590509433 #> 139 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-07-01 0.06947414 15.197550175 #> 140 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-08-01 0.05481658 12.594039210 #> 141 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-09-01 0.05261122 11.201612308 #> 142 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-10-01 0.06686093  5.383928248 #> 143 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-11-01 0.09197552 -0.077424856 #> 144 site_b 0.61 0.70 1.4  -9.0    -5   -13 2021-12-01 0.12637355 -3.608523637 #> 145 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-01-01 0.13635078 -6.017630590 #> 146 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-02-01 0.12200566 -3.953506429 #> 147 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-03-01 0.11382624 -0.352608363 #> 148 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-04-01 0.12189161  5.242763674 #> 149 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-05-01 0.09005652 11.191599092 #> 150 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-06-01 0.07706251 15.030669043 #> 151 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-07-01 0.05760801 14.753533549 #> 152 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-08-01 0.05842371 12.835743708 #> 153 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-09-01 0.05133646 11.842028457 #> 154 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-10-01 0.07428544  5.199785032 #> 155 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-11-01 0.07117977 -0.385811691 #> 156 site_b 0.61 0.70 1.4  -2.5     0    -5 2021-12-01 0.12219178 -4.231826442 #> 157 site_b 0.80 0.40 1.5   1.5     3     0 2021-01-01 0.15587423 -6.203144794 #> 158 site_b 0.80 0.40 1.5   1.5     3     0 2021-02-01 0.13712901 -4.227370951 #> 159 site_b 0.80 0.40 1.5   1.5     3     0 2021-03-01 0.14352841 -0.580427948 #> 160 site_b 0.80 0.40 1.5   1.5     3     0 2021-04-01 0.15749876  5.378220427 #> 161 site_b 0.80 0.40 1.5   1.5     3     0 2021-05-01 0.12660724 11.265885759 #> 162 site_b 0.80 0.40 1.5   1.5     3     0 2021-06-01 0.10751626 16.146877945 #> 163 site_b 0.80 0.40 1.5   1.5     3     0 2021-07-01 0.07862567 15.830225898 #> 164 site_b 0.80 0.40 1.5   1.5     3     0 2021-08-01 0.08451232 14.275232537 #> 165 site_b 0.80 0.40 1.5   1.5     3     0 2021-09-01 0.06434240 12.268583588 #> 166 site_b 0.80 0.40 1.5   1.5     3     0 2021-10-01 0.07610873  5.178563225 #> 167 site_b 0.80 0.40 1.5   1.5     3     0 2021-11-01 0.09808550 -0.570407603 #> 168 site_b 0.80 0.40 1.5   1.5     3     0 2021-12-01 0.15002019 -4.491658964 #> 169 site_b 0.80 0.40 1.5   5.0     7     3 2021-01-01 0.13205671 -5.804223887 #> 170 site_b 0.80 0.40 1.5   5.0     7     3 2021-02-01 0.13510797 -4.536964214 #> 171 site_b 0.80 0.40 1.5   5.0     7     3 2021-03-01 0.12055431 -0.831423188 #> 172 site_b 0.80 0.40 1.5   5.0     7     3 2021-04-01 0.12795519  5.582905509 #> 173 site_b 0.80 0.40 1.5   5.0     7     3 2021-05-01 0.10733342 11.170914622 #> 174 site_b 0.80 0.40 1.5   5.0     7     3 2021-06-01 0.09133064 18.356350349 #> 175 site_b 0.80 0.40 1.5   5.0     7     3 2021-07-01 0.07896058 18.740984505 #> 176 site_b 0.80 0.40 1.5   5.0     7     3 2021-08-01 0.06265722 17.417125513 #> 177 site_b 0.80 0.40 1.5   5.0     7     3 2021-09-01 0.06020139 12.689146454 #> 178 site_b 0.80 0.40 1.5   5.0     7     3 2021-10-01 0.07106000  5.294302406 #> 179 site_b 0.80 0.40 1.5   5.0     7     3 2021-11-01 0.07973527 -0.724373984 #> 180 site_b 0.80 0.40 1.5   5.0     7     3 2021-12-01 0.12185287 -4.538560535 #>        p      AFPS       DSD0 gas           D0           DS    c_air #> 1   1013 0.2186472 0.12268662 CO2 1.373780e-05 1.685444e-06 44.73588 #> 2   1013 0.2560726 0.15549836 CO2 1.381053e-05 2.147515e-06 44.60556 #> 3   1013 0.2577211 0.15700234 CO2 1.399908e-05 2.197889e-06 44.27263 #> 4   1013 0.2353565 0.13701581 CO2 1.424543e-05 1.951850e-06 43.84798 #> 5   1013 0.2655341 0.16419569 CO2 1.462819e-05 2.401886e-06 43.21035 #> 6   1013 0.2846261 0.18221885 CO2 1.477426e-05 2.692149e-06 42.97380 #> 7   1013 0.3106433 0.20776590 CO2 1.485216e-05 3.085773e-06 42.84911 #> 8   1013 0.3190235 0.21622968 CO2 1.473950e-05 3.187117e-06 43.02976 #> 9   1013 0.3101238 0.20724488 CO2 1.454519e-05 3.014416e-06 43.34640 #> 10  1013 0.3098590 0.20697957 CO2 1.427966e-05 2.955599e-06 43.78988 #> 11  1013 0.2880040 0.18547232 CO2 1.394884e-05 2.587123e-06 44.36067 #> 12  1013 0.2448321 0.14537301 CO2 1.379734e-05 2.005761e-06 44.62911 #> 13  1013 0.2522025 0.15198660 CO2 1.362982e-05 2.071550e-06 44.93134 #> 14  1013 0.2579383 0.15720090 CO2 1.371350e-05 2.155775e-06 44.77965 #> 15  1013 0.2599439 0.15903790 CO2 1.392728e-05 2.214965e-06 44.39860 #> 16  1013 0.2424534 0.14325954 CO2 1.426174e-05 2.043130e-06 43.82027 #> 17  1013 0.2941123 0.19140402 CO2 1.464846e-05 2.803775e-06 43.17730 #> 18  1013 0.2891284 0.18655949 CO2 1.483768e-05 2.768111e-06 42.87221 #> 19  1013 0.3111211 0.20824539 CO2 1.501039e-05 3.125844e-06 42.59898 #> 20  1013 0.3135295 0.21066816 CO2 1.479904e-05 3.117686e-06 42.93403 #> 21  1013 0.3215825 0.21883659 CO2 1.453552e-05 3.180904e-06 43.36233 #> 22  1013 0.3155544 0.21271230 CO2 1.428649e-05 3.038912e-06 43.77832 #> 23  1013 0.3090665 0.20618600 CO2 1.391604e-05 2.869293e-06 44.41839 #> 24  1013 0.2614499 0.16042199 CO2 1.368403e-05 2.195220e-06 44.83290 #> 25  1013 0.2717526 0.16999723 CO2 1.356342e-05 2.305744e-06 45.05273 #> 26  1013 0.2695322 0.16791801 CO2 1.365382e-05 2.292722e-06 44.88769 #> 27  1013 0.2794515 0.17727233 CO2 1.388308e-05 2.461085e-06 44.47663 #> 28  1013 0.2868061 0.18431630 CO2 1.427180e-05 2.630526e-06 43.80320 #> 29  1013 0.2854932 0.18305219 CO2 1.466097e-05 2.683723e-06 43.15694 #> 30  1013 0.3064568 0.20358002 CO2 1.487686e-05 3.028631e-06 42.80981 #> 31  1013 0.3224016 0.21967317 CO2 1.510833e-05 3.318895e-06 42.44618 #> 32  1013 0.3270407 0.22443157 CO2 1.483581e-05 3.329624e-06 42.87521 #> 33  1013 0.3307771 0.22828872 CO2 1.452956e-05 3.316935e-06 43.37216 #> 34  1013 0.3281610 0.22558577 CO2 1.429070e-05 3.223779e-06 43.77119 #> 35  1013 0.3355447 0.23324206 CO2 1.389584e-05 3.241094e-06 44.45406 #> 36  1013 0.2739814 0.17209287 CO2 1.361437e-05 2.342936e-06 44.95950 #> 37  1013 0.3473057 0.19334299 CO2 1.337582e-05 2.586121e-06 45.40075 #> 38  1013 0.3583227 0.20324891 CO2 1.355844e-05 2.755739e-06 45.06187 #> 39  1013 0.3800260 0.22330092 CO2 1.385012e-05 3.092744e-06 44.53508 #> 40  1013 0.3483436 0.19426827 CO2 1.419473e-05 2.757586e-06 43.93444 #> 41  1013 0.3694475 0.21343896 CO2 1.473396e-05 3.144801e-06 43.03869 #> 42  1013 0.3852079 0.22819265 CO2 1.491908e-05 3.404425e-06 42.74282 #> 43  1013 0.3890115 0.23180840 CO2 1.516634e-05 3.515685e-06 42.35641 #> 44  1013 0.4034627 0.24573937 CO2 1.510179e-05 3.711103e-06 42.45635 #> 45  1013 0.4118414 0.25395532 CO2 1.478277e-05 3.754164e-06 42.96012 #> 46  1013 0.3969404 0.23941413 CO2 1.423996e-05 3.409248e-06 43.85729 #> 47  1013 0.3885854 0.23140234 CO2 1.385344e-05 3.205720e-06 44.52917 #> 48  1013 0.3325039 0.18032835 CO2 1.358638e-05 2.450010e-06 45.01065 #> 49  1013 0.3288894 0.17720221 CO2 1.336108e-05 2.367612e-06 45.42842 #> 50  1013 0.3654199 0.20972821 CO2 1.349584e-05 2.830459e-06 45.17723 #> 51  1013 0.3684013 0.21247266 CO2 1.381420e-05 2.935140e-06 44.59901 #> 52  1013 0.3794132 0.22272513 CO2 1.423922e-05 3.171431e-06 43.85856 #> 53  1013 0.3769425 0.22040911 CO2 1.474393e-05 3.249696e-06 43.02262 #> 54  1013 0.3950800 0.23762127 CO2 1.486956e-05 3.533324e-06 42.82141 #> 55  1013 0.3978432 0.24028597 CO2 1.506943e-05 3.620973e-06 42.50668 #> 56  1013 0.4017496 0.24407204 CO2 1.520664e-05 3.711515e-06 42.29436 #> 57  1013 0.4055695 0.24779571 CO2 1.477125e-05 3.660253e-06 42.97863 #> 58  1013 0.4086469 0.25081088 CO2 1.421821e-05 3.566083e-06 43.89434 #> 59  1013 0.3870653 0.22995566 CO2 1.381620e-05 3.177114e-06 44.59545 #> 60  1013 0.3789286 0.22227013 CO2 1.348620e-05 2.997579e-06 45.19508 #> 61  1013 0.4258460 0.18742147 CO2 1.334726e-05 2.501564e-06 45.45439 #> 62  1013 0.4244382 0.18636938 CO2 1.343727e-05 2.504296e-06 45.28592 #> 63  1013 0.4284077 0.18934214 CO2 1.378057e-05 2.609243e-06 44.65911 #> 64  1013 0.4155195 0.17976095 CO2 1.428098e-05 2.567162e-06 43.78765 #> 65  1013 0.4457156 0.20252950 CO2 1.475327e-05 2.987973e-06 43.00756 #> 66  1013 0.4717470 0.22304653 CO2 1.482320e-05 3.306263e-06 42.89535 #> 67  1013 0.4786192 0.22859840 CO2 1.497883e-05 3.424137e-06 42.64854 #> 68  1013 0.4644244 0.21719289 CO2 1.530523e-05 3.324188e-06 42.14361 #> 69  1013 0.4776488 0.22781101 CO2 1.476046e-05 3.362595e-06 42.99599 #> 70  1013 0.4795439 0.22934970 CO2 1.419784e-05 3.256271e-06 43.92913 #> 71  1013 0.4555975 0.21022201 CO2 1.378133e-05 2.897138e-06 44.65776 #> 72  1013 0.4098769 0.17563088 CO2 1.339258e-05 2.352150e-06 45.36936 #> 73  1013 0.6582904 0.21191860 CO2 1.326764e-05 2.811660e-06 45.60490 #> 74  1013 0.6938823 0.22574129 CO2 1.341407e-05 3.028109e-06 45.32918 #> 75  1013 0.6941134 0.22583152 CO2 1.374389e-05 3.103805e-06 44.72492 #> 76  1013 0.6831042 0.22154014 CO2 1.430041e-05 3.168115e-06 43.75477 #> 77  1013 0.7195701 0.23580651 CO2 1.485960e-05 3.503989e-06 42.83727 #> 78  1013 0.7398367 0.24379855 CO2 1.512328e-05 3.687034e-06 42.42299 #> 79  1013 0.7484424 0.24720548 CO2 1.542868e-05 3.814055e-06 41.95698 #> 80  1013 0.7648260 0.25371328 CO2 1.540052e-05 3.907317e-06 41.99935 #> 81  1013 0.7647263 0.25367360 CO2 1.494254e-05 3.790527e-06 42.70574 #> 82  1013 0.7646822 0.25365605 CO2 1.422816e-05 3.609058e-06 43.87739 #> 83  1013 0.7313708 0.24045465 CO2 1.373968e-05 3.303771e-06 44.73249 #> 84  1013 0.6682202 0.21576031 CO2 1.331426e-05 2.872690e-06 45.51660 #> 85  1013 0.1982265 0.10590682 CO2 1.374052e-05 1.455214e-06 44.73099 #> 86  1013 0.2024599 0.10931749 CO2 1.381125e-05 1.509811e-06 44.60428 #> 87  1013 0.2250047 0.12807623 CO2 1.399994e-05 1.793059e-06 44.27113 #> 88  1013 0.2032556 0.10996264 CO2 1.428319e-05 1.570618e-06 43.78390 #> 89  1013 0.2629731 0.16182596 CO2 1.454863e-05 2.354346e-06 43.34074 #> 90  1013 0.2444949 0.14507276 CO2 1.474735e-05 2.139439e-06 43.01709 #> 91  1013 0.2682642 0.16673441 CO2 1.467257e-05 2.446423e-06 43.13809 #> 92  1013 0.2832927 0.18093993 CO2 1.478084e-05 2.674444e-06 42.96322 #> 93  1013 0.2984940 0.19569726 CO2 1.450231e-05 2.838062e-06 43.41717 #> 94  1013 0.2779347 0.17583097 CO2 1.436208e-05 2.525299e-06 43.65087 #> 95  1013 0.2553513 0.15484181 CO2 1.397664e-05 2.164169e-06 44.31189 #> 96  1013 0.2146358 0.11932584 CO2 1.380459e-05 1.647244e-06 44.61617 #> 97  1013 0.2241109 0.12731386 CO2 1.363659e-05 1.736127e-06 44.91902 #> 98  1013 0.2468893 0.14720913 CO2 1.372021e-05 2.019740e-06 44.76756 #> 99  1013 0.2493781 0.14944066 CO2 1.394137e-05 2.083407e-06 44.37380 #> 100 1013 0.2200442 0.12386427 CO2 1.429405e-05 1.770522e-06 43.76553 #> 101 1013 0.2635553 0.16236364 CO2 1.466707e-05 2.381398e-06 43.14703 #> 102 1013 0.2835867 0.18122164 CO2 1.492208e-05 2.704204e-06 42.73808 #> 103 1013 0.2858342 0.18338027 CO2 1.480812e-05 2.715518e-06 42.91947 #> 104 1013 0.2956319 0.19288931 CO2 1.499010e-05 2.891431e-06 42.63082 #> 105 1013 0.2962285 0.19347350 CO2 1.455384e-05 2.815782e-06 43.33217 #> 106 1013 0.2840916 0.18170579 CO2 1.431031e-05 2.600266e-06 43.73804 #> 107 1013 0.2829088 0.18057221 CO2 1.392930e-05 2.515244e-06 44.39504 #> 108 1013 0.2307545 0.13301680 CO2 1.370345e-05 1.822788e-06 44.79781 #> 109 1013 0.1496168 0.06769622 CO2 1.356750e-05 9.184684e-07 45.04525 #> 110 1013 0.1360008 0.05979899 CO2 1.365967e-05 8.168341e-07 44.87707 #> 111 1013 0.1579486 0.07263743 CO2 1.390238e-05 1.009833e-06 44.44250 #> 112 1013 0.1548909 0.07081471 CO2 1.430129e-05 1.012741e-06 43.75329 #> 113 1013 0.1541798 0.07039239 CO2 1.474626e-05 1.038025e-06 43.01885 #> 114 1013 0.1750019 0.08299376 CO2 1.503908e-05 1.248149e-06 42.55407 #> 115 1013 0.1722762 0.08131726 CO2 1.489880e-05 1.211530e-06 42.77495 #> 116 1013 0.1842755 0.08875603 CO2 1.513034e-05 1.342909e-06 42.41206 #> 117 1013 0.1712639 0.08069668 CO2 1.458823e-05 1.177222e-06 43.27569 #> 118 1013 0.1764712 0.08390077 CO2 1.427584e-05 1.197754e-06 43.79636 #> 119 1013 0.1702096 0.08005146 CO2 1.389777e-05 1.112537e-06 44.45065 #> 120 1013 0.1647244 0.07671410 CO2 1.363620e-05 1.046089e-06 44.91972 #> 121 1013 0.1499992 0.06792124 CO2 1.344420e-05 9.131468e-07 45.27302 #> 122 1013 0.1420066 0.06325443 CO2 1.352192e-05 8.553213e-07 45.12907 #> 123 1013 0.1417644 0.06311426 CO2 1.383937e-05 8.734615e-07 44.55418 #> 124 1013 0.1676952 0.07851755 CO2 1.426866e-05 1.120340e-06 43.80853 #> 125 1013 0.1660559 0.07752120 CO2 1.479028e-05 1.146560e-06 42.94807 #> 126 1013 0.1607313 0.07430543 CO2 1.512553e-05 1.123909e-06 42.41951 #> 127 1013 0.1780197 0.08485910 CO2 1.528099e-05 1.296731e-06 42.18055 #> 128 1013 0.1778036 0.08472520 CO2 1.495749e-05 1.267276e-06 42.68215 #> 129 1013 0.1804428 0.08636376 CO2 1.478226e-05 1.276652e-06 42.96094 #> 130 1013 0.1826359 0.08773075 CO2 1.432637e-05 1.256864e-06 43.71094 #> 131 1013 0.1734304 0.08202625 CO2 1.383549e-05 1.134873e-06 44.56109 #> 132 1013 0.1553407 0.07108221 CO2 1.354673e-05 9.629314e-07 45.08339 #> 133 1013 0.4817369 0.25178618 CO2 1.334766e-05 3.360756e-06 45.45364 #> 134 1013 0.4943098 0.26103389 CO2 1.348355e-05 3.519664e-06 45.19998 #> 135 1013 0.4842729 0.25364381 CO2 1.380634e-05 3.501894e-06 44.61303 #> 136 1013 0.4891318 0.25721385 CO2 1.428196e-05 3.673518e-06 43.78599 #> 137 1013 0.5075355 0.27086384 CO2 1.482285e-05 4.014974e-06 42.89591 #> 138 1013 0.5252802 0.28421399 CO2 1.517397e-05 4.312656e-06 42.34464 #> 139 1013 0.5405259 0.29582925 CO2 1.523197e-05 4.506061e-06 42.25549 #> 140 1013 0.5551834 0.30712072 CO2 1.498395e-05 4.601880e-06 42.64050 #> 141 1013 0.5573888 0.30883005 CO2 1.485205e-05 4.586758e-06 42.84930 #> 142 1013 0.5431391 0.29783347 CO2 1.430661e-05 4.260989e-06 43.74428 #> 143 1013 0.5180245 0.27873303 CO2 1.380292e-05 3.847328e-06 44.61915 #> 144 1013 0.4836264 0.25316992 CO2 1.348155e-05 3.413123e-06 45.20368 #> 145 1013 0.4736492 0.24588815 CO2 1.326424e-05 3.261520e-06 45.61135 #> 146 1013 0.4879943 0.25637681 CO2 1.345034e-05 3.448354e-06 45.26161 #> 147 1013 0.4961738 0.26241300 CO2 1.377775e-05 3.615461e-06 44.66416 #> 148 1013 0.4881084 0.25646070 CO2 1.429349e-05 3.665719e-06 43.76647 #> 149 1013 0.5199435 0.28017968 CO2 1.485110e-05 4.160976e-06 42.85081 #> 150 1013 0.5329375 0.29003127 CO2 1.521601e-05 4.413119e-06 42.27996 #> 151 1013 0.5523920 0.30496104 CO2 1.518954e-05 4.632217e-06 42.32066 #> 152 1013 0.5515763 0.30433077 CO2 1.500689e-05 4.567060e-06 42.60446 #> 153 1013 0.5586635 0.30981933 CO2 1.491265e-05 4.620226e-06 42.75301 #> 154 1013 0.5357146 0.29214931 CO2 1.428950e-05 4.174667e-06 43.77322 #> 155 1013 0.5388202 0.29452318 CO2 1.377471e-05 4.056973e-06 44.66960 #> 156 1013 0.4878082 0.25623993 CO2 1.342518e-05 3.440066e-06 45.30846 #> 157 1013 0.6441258 0.20678356 CO2 1.324758e-05 2.739381e-06 45.64305 #> 158 1013 0.6628710 0.21587558 CO2 1.342558e-05 2.898254e-06 45.30771 #> 159 1013 0.6564716 0.21275702 CO2 1.375693e-05 2.926883e-06 44.70150 #> 160 1013 0.6425012 0.20600177 CO2 1.430608e-05 2.947079e-06 43.74518 #> 161 1013 0.6733928 0.22103582 CO2 1.485812e-05 3.284177e-06 42.83962 #> 162 1013 0.6924837 0.23050182 CO2 1.532285e-05 3.531946e-06 42.11683 #> 163 1013 0.7213743 0.24507613 CO2 1.529251e-05 3.747830e-06 42.16298 #> 164 1013 0.7154877 0.24208241 CO2 1.514389e-05 3.666070e-06 42.39109 #> 165 1013 0.7356576 0.25239084 CO2 1.495307e-05 3.774018e-06 42.68912 #> 166 1013 0.7238913 0.24635989 CO2 1.428753e-05 3.519874e-06 43.77656 #> 167 1013 0.7019145 0.23522654 CO2 1.375785e-05 3.236210e-06 44.69985 #> 168 1013 0.6499798 0.20960893 CO2 1.340171e-05 2.809117e-06 45.35228 #> 169 1013 0.6679433 0.21835814 CO2 1.328343e-05 2.900545e-06 45.57494 #> 170 1013 0.6648920 0.21686361 CO2 1.339762e-05 2.905455e-06 45.35993 #> 171 1013 0.6794457 0.22402274 CO2 1.373401e-05 3.076731e-06 44.74270 #> 172 1013 0.6720448 0.22037247 CO2 1.432512e-05 3.156862e-06 43.71306 #> 173 1013 0.6926666 0.23059312 CO2 1.484914e-05 3.424111e-06 42.85393 #> 174 1013 0.7086694 0.23863024 CO2 1.553533e-05 3.707199e-06 41.79761 #> 175 1013 0.7210394 0.24490548 CO2 1.557245e-05 3.813778e-06 41.74253 #> 176 1013 0.7373428 0.25325856 CO2 1.544485e-05 3.911540e-06 41.93271 #> 177 1013 0.7397986 0.25452489 CO2 1.499297e-05 3.816085e-06 42.62631 #> 178 1013 0.7289400 0.24894171 CO2 1.429828e-05 3.559439e-06 43.75837 #> 179 1013 0.7202647 0.24451090 CO2 1.374378e-05 3.360505e-06 44.72512 #> 180 1013 0.6781471 0.22338082 CO2 1.339747e-05 2.992738e-06 45.36020 ### Also used to extract an soilphys object from cfp_dat cfp_soilphys(ConFluxPro::base_dat) #>  #> A cfp_soilphys object  #> id_cols: site Date gas  #> 24  unique profiles  #>  #>       site       Date gas upper lower  TPS    a   b depth        SWC #> 1   site_a 2021-01-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.16135277 #> 2   site_a 2021-01-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.12779751 #> 3   site_a 2021-01-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.10824738 #> 4   site_a 2021-01-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.10269426 #> 5   site_a 2021-01-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.10269426 #> 6   site_a 2021-01-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.12111059 #> 7   site_a 2021-01-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.12111059 #> 8   site_a 2021-01-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.09415401 #> 9   site_a 2021-01-01 CO2     5     0 0.84 0.35 1.2   2.5 0.18170958 #> 10  site_b 2021-01-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.15177347 #> 11  site_b 2021-01-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.12588911 #> 12  site_b 2021-01-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.05038321 #> 13  site_b 2021-01-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.05000081 #> 14  site_b 2021-01-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.12826312 #> 15  site_b 2021-01-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.12826312 #> 16  site_b 2021-01-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.13635078 #> 17  site_b 2021-01-01 CO2     3     0 0.80 0.40 1.5   1.5 0.15587423 #> 18  site_b 2021-01-01 CO2     7     3 0.80 0.40 1.5   5.0 0.13205671 #> 19  site_a 2021-02-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.12392743 #> 20  site_a 2021-02-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.12206169 #> 21  site_a 2021-02-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.11046777 #> 22  site_a 2021-02-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.09167729 #> 23  site_a 2021-02-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.09167729 #> 24  site_a 2021-02-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.08458007 #> 25  site_a 2021-02-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.08458007 #> 26  site_a 2021-02-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.09556181 #> 27  site_a 2021-02-01 CO2     5     0 0.84 0.35 1.2   2.5 0.14611772 #> 28  site_b 2021-02-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.14754014 #> 29  site_b 2021-02-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.10311066 #> 30  site_b 2021-02-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.06399921 #> 31  site_b 2021-02-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.05799344 #> 32  site_b 2021-02-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.11569024 #> 33  site_b 2021-02-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.11569024 #> 34  site_b 2021-02-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.12200566 #> 35  site_b 2021-02-01 CO2     3     0 0.80 0.40 1.5   1.5 0.13712901 #> 36  site_b 2021-02-01 CO2     7     3 0.80 0.40 1.5   5.0 0.13510797 #> 37  site_a 2021-03-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.12227893 #> 38  site_a 2021-03-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.12005613 #> 39  site_a 2021-03-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.10054849 #> 40  site_a 2021-03-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.06997404 #> 41  site_a 2021-03-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.06997404 #> 42  site_a 2021-03-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.08159875 #> 43  site_a 2021-03-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.08159875 #> 44  site_a 2021-03-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.09159233 #> 45  site_a 2021-03-01 CO2     5     0 0.84 0.35 1.2   2.5 0.14588659 #> 46  site_b 2021-03-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.12499533 #> 47  site_b 2021-03-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.10062188 #> 48  site_b 2021-03-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.04205140 #> 49  site_b 2021-03-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.05823557 #> 50  site_b 2021-03-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.12572711 #> 51  site_b 2021-03-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.12572711 #> 52  site_b 2021-03-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.11382624 #> 53  site_b 2021-03-01 CO2     3     0 0.80 0.40 1.5   1.5 0.14352841 #> 54  site_b 2021-03-01 CO2     7     3 0.80 0.40 1.5   5.0 0.12055431 #> 55  site_a 2021-04-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.14464345 #> 56  site_a 2021-04-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.13754664 #> 57  site_a 2021-04-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.09319393 #> 58  site_a 2021-04-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.10165638 #> 59  site_a 2021-04-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.10165638 #> 60  site_a 2021-04-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.07058679 #> 61  site_a 2021-04-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.07058679 #> 62  site_a 2021-04-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.10448052 #> 63  site_a 2021-04-01 CO2     5     0 0.84 0.35 1.2   2.5 0.15689576 #> 64  site_b 2021-04-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.14674436 #> 65  site_b 2021-04-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.12995582 #> 66  site_b 2021-04-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.04510915 #> 67  site_b 2021-04-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.03230483 #> 68  site_b 2021-04-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.12086816 #> 69  site_b 2021-04-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.12086816 #> 70  site_b 2021-04-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.12189161 #> 71  site_b 2021-04-01 CO2     3     0 0.80 0.40 1.5   1.5 0.15749876 #> 72  site_b 2021-04-01 CO2     7     3 0.80 0.40 1.5   5.0 0.12795519 #> 73  site_a 2021-05-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.11446588 #> 74  site_a 2021-05-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.08588769 #> 75  site_a 2021-05-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.09450679 #> 76  site_a 2021-05-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.08055249 #> 77  site_a 2021-05-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.08055249 #> 78  site_a 2021-05-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.07305746 #> 79  site_a 2021-05-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.07305746 #> 80  site_a 2021-05-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.07428442 #> 81  site_a 2021-05-01 CO2     5     0 0.84 0.35 1.2   2.5 0.12042988 #> 82  site_b 2021-05-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.08702691 #> 83  site_b 2021-05-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.08644474 #> 84  site_b 2021-05-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.04582019 #> 85  site_b 2021-05-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.03394412 #> 86  site_b 2021-05-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.10246451 #> 87  site_b 2021-05-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.10246451 #> 88  site_b 2021-05-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.09005652 #> 89  site_b 2021-05-01 CO2     3     0 0.80 0.40 1.5   1.5 0.12660724 #> 90  site_b 2021-05-01 CO2     7     3 0.80 0.40 1.5   5.0 0.10733342 #> 91  site_a 2021-06-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.09537391 #> 92  site_a 2021-06-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.09087161 #> 93  site_a 2021-06-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.07354319 #> 94  site_a 2021-06-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.06479207 #> 95  site_a 2021-06-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.06479207 #> 96  site_a 2021-06-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.05492004 #> 97  site_a 2021-06-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.05492004 #> 98  site_a 2021-06-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.04825304 #> 99  site_a 2021-06-01 CO2     5     0 0.84 0.35 1.2   2.5 0.10016325 #> 100 site_b 2021-06-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.10550513 #> 101 site_b 2021-06-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.06641329 #> 102 site_b 2021-06-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.02499814 #> 103 site_b 2021-06-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.03926870 #> 104 site_b 2021-06-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.08471983 #> 105 site_b 2021-06-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.08471983 #> 106 site_b 2021-06-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.07706251 #> 107 site_b 2021-06-01 CO2     3     0 0.80 0.40 1.5   1.5 0.10751626 #> 108 site_b 2021-06-01 CO2     7     3 0.80 0.40 1.5   5.0 0.09133064 #> 109 site_a 2021-07-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.06935668 #> 110 site_a 2021-07-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.06887892 #> 111 site_a 2021-07-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.05759840 #> 112 site_a 2021-07-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.06098852 #> 113 site_a 2021-07-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.06098852 #> 114 site_a 2021-07-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.05215679 #> 115 site_a 2021-07-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.05215679 #> 116 site_a 2021-07-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.04138080 #> 117 site_a 2021-07-01 CO2     5     0 0.84 0.35 1.2   2.5 0.09155761 #> 118 site_b 2021-07-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.08173583 #> 119 site_b 2021-07-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.06416576 #> 120 site_b 2021-07-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.02772383 #> 121 site_b 2021-07-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.02198031 #> 122 site_b 2021-07-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.06947414 #> 123 site_b 2021-07-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.06947414 #> 124 site_b 2021-07-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.05760801 #> 125 site_b 2021-07-01 CO2     3     0 0.80 0.40 1.5   1.5 0.07862567 #> 126 site_b 2021-07-01 CO2     7     3 0.80 0.40 1.5   5.0 0.07896058 #> 127 site_a 2021-08-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.06097648 #> 128 site_a 2021-08-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.06647048 #> 129 site_a 2021-08-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.05295930 #> 130 site_a 2021-08-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.04653729 #> 131 site_a 2021-08-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.04653729 #> 132 site_a 2021-08-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.04825040 #> 133 site_a 2021-08-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.04825040 #> 134 site_a 2021-08-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.05557555 #> 135 site_a 2021-08-01 CO2     5     0 0.84 0.35 1.2   2.5 0.07517403 #> 136 site_b 2021-08-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.06670726 #> 137 site_b 2021-08-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.05436811 #> 138 site_b 2021-08-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.01572449 #> 139 site_b 2021-08-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.02219643 #> 140 site_b 2021-08-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.05481658 #> 141 site_b 2021-08-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.05481658 #> 142 site_b 2021-08-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.05842371 #> 143 site_b 2021-08-01 CO2     3     0 0.80 0.40 1.5   1.5 0.08451232 #> 144 site_b 2021-08-01 CO2     7     3 0.80 0.40 1.5   5.0 0.06265722 #> 145 site_a 2021-09-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.06987624 #> 146 site_a 2021-09-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.05841746 #> 147 site_a 2021-09-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.04922287 #> 148 site_a 2021-09-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.03815859 #> 149 site_a 2021-09-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.03815859 #> 150 site_a 2021-09-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.04443048 #> 151 site_a 2021-09-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.04443048 #> 152 site_a 2021-09-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.04235123 #> 153 site_a 2021-09-01 CO2     5     0 0.84 0.35 1.2   2.5 0.07527369 #> 154 site_b 2021-09-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.05150596 #> 155 site_b 2021-09-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.05377151 #> 156 site_b 2021-09-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.02873606 #> 157 site_b 2021-09-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.01955716 #> 158 site_b 2021-09-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.05261122 #> 159 site_b 2021-09-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.05261122 #> 160 site_b 2021-09-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.05133646 #> 161 site_b 2021-09-01 CO2     3     0 0.80 0.40 1.5   1.5 0.06434240 #> 162 site_b 2021-09-01 CO2     7     3 0.80 0.40 1.5   5.0 0.06020139 #> 163 site_a 2021-10-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.07014097 #> 164 site_a 2021-10-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.06444560 #> 165 site_a 2021-10-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.05183900 #> 166 site_a 2021-10-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.05305960 #> 167 site_a 2021-10-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.05305960 #> 168 site_a 2021-10-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.04135314 #> 169 site_a 2021-10-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.04135314 #> 170 site_a 2021-10-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.04045612 #> 171 site_a 2021-10-01 CO2     5     0 0.84 0.35 1.2   2.5 0.07531779 #> 172 site_b 2021-10-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.07206531 #> 173 site_b 2021-10-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.06590843 #> 174 site_b 2021-10-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.02352881 #> 175 site_b 2021-10-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.01736414 #> 176 site_b 2021-10-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.06686093 #> 177 site_b 2021-10-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.06686093 #> 178 site_b 2021-10-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.07428544 #> 179 site_b 2021-10-01 CO2     3     0 0.80 0.40 1.5   1.5 0.07610873 #> 180 site_b 2021-10-01 CO2     7     3 0.80 0.40 1.5   5.0 0.07106000 #> 181 site_a 2021-11-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.09199596 #> 182 site_a 2021-11-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.07093349 #> 183 site_a 2021-11-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.04445528 #> 184 site_a 2021-11-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.06141455 #> 185 site_a 2021-11-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.06141455 #> 186 site_a 2021-11-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.06293469 #> 187 site_a 2021-11-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.06293469 #> 188 site_a 2021-11-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.06440254 #> 189 site_a 2021-11-01 CO2     5     0 0.84 0.35 1.2   2.5 0.10862922 #> 190 site_b 2021-11-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.09464874 #> 191 site_b 2021-11-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.06709121 #> 192 site_b 2021-11-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.02979040 #> 193 site_b 2021-11-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.02656958 #> 194 site_b 2021-11-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.09197552 #> 195 site_b 2021-11-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.09197552 #> 196 site_b 2021-11-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.07117977 #> 197 site_b 2021-11-01 CO2     3     0 0.80 0.40 1.5   1.5 0.09808550 #> 198 site_b 2021-11-01 CO2     7     3 0.80 0.40 1.5   5.0 0.07973527 #> 199 site_a 2021-12-01 CO2   -60  -100 0.38 1.20 1.5 -80.0 0.13516790 #> 200 site_a 2021-12-01 CO2   -40   -60 0.38 1.20 1.5 -50.0 0.11855012 #> 201 site_a 2021-12-01 CO2   -23   -40 0.38 1.20 1.5 -31.5 0.10601860 #> 202 site_a 2021-12-01 CO2   -20   -23 0.45 1.05 1.6 -21.5 0.11749614 #> 203 site_a 2021-12-01 CO2   -15   -20 0.45 1.05 1.6 -17.5 0.11749614 #> 204 site_a 2021-12-01 CO2   -10   -15 0.45 1.05 1.6 -12.5 0.07107141 #> 205 site_a 2021-12-01 CO2    -7   -10 0.45 1.05 1.6  -8.5 0.07107141 #> 206 site_a 2021-12-01 CO2     0    -7 0.52 0.80 1.7  -3.5 0.11012308 #> 207 site_a 2021-12-01 CO2     5     0 0.84 0.35 1.2   2.5 0.17177981 #> 208 site_b 2021-12-01 CO2   -60  -100 0.35 1.20 1.5 -80.0 0.13536420 #> 209 site_b 2021-12-01 CO2   -40   -60 0.35 1.20 1.5 -50.0 0.11924550 #> 210 site_b 2021-12-01 CO2   -20   -40 0.20 0.80 1.3 -30.0 0.03527563 #> 211 site_b 2021-12-01 CO2   -13   -20 0.20 0.80 1.3 -16.5 0.04465928 #> 212 site_b 2021-12-01 CO2   -10   -13 0.61 0.70 1.4 -11.5 0.12637355 #> 213 site_b 2021-12-01 CO2    -5   -10 0.61 0.70 1.4  -7.5 0.12637355 #> 214 site_b 2021-12-01 CO2     0    -5 0.61 0.70 1.4  -2.5 0.12219178 #> 215 site_b 2021-12-01 CO2     3     0 0.80 0.40 1.5   1.5 0.15002019 #> 216 site_b 2021-12-01 CO2     7     3 0.80 0.40 1.5   5.0 0.12185287 #>                t    p      AFPS       DSD0           D0           DS    c_air #> 1   -0.789903514 1013 0.2186472 0.12268662 1.373780e-05 1.685444e-06 44.73588 #> 2   -1.974758784 1013 0.2522025 0.15198660 1.362982e-05 2.071550e-06 44.93134 #> 3   -2.705419534 1013 0.2717526 0.16999723 1.356342e-05 2.305744e-06 45.05273 #> 4   -4.778507694 1013 0.3473057 0.19334299 1.337582e-05 2.586121e-06 45.40075 #> 5   -4.778507694 1013 0.3473057 0.19334299 1.337582e-05 2.586121e-06 45.40075 #> 6   -4.941950172 1013 0.3288894 0.17720221 1.336108e-05 2.367612e-06 45.42842 #> 7   -4.941950172 1013 0.3288894 0.17720221 1.336108e-05 2.367612e-06 45.42842 #> 8   -5.095177495 1013 0.4258460 0.18742147 1.334726e-05 2.501564e-06 45.45439 #> 9   -5.979843913 1013 0.6582904 0.21191860 1.326764e-05 2.811660e-06 45.60490 #> 10  -0.760136684 1013 0.1982265 0.10590682 1.374052e-05 1.455214e-06 44.73099 #> 11  -1.900341711 1013 0.2241109 0.12731386 1.363659e-05 1.736127e-06 44.91902 #> 12  -2.660478396 1013 0.1496168 0.06769622 1.356750e-05 9.184684e-07 45.04525 #> 13  -4.021340872 1013 0.1499992 0.06792124 1.344420e-05 9.131468e-07 45.27302 #> 14  -5.090781792 1013 0.4817369 0.25178618 1.334766e-05 3.360756e-06 45.45364 #> 15  -5.090781792 1013 0.4817369 0.25178618 1.334766e-05 3.360756e-06 45.45364 #> 16  -6.017630590 1013 0.4736492 0.24588815 1.326424e-05 3.261520e-06 45.61135 #> 17  -6.203144794 1013 0.6441258 0.20678356 1.324758e-05 2.739381e-06 45.64305 #> 18  -5.804223887 1013 0.6679433 0.21835814 1.328343e-05 2.900545e-06 45.57494 #> 19   0.005814771 1013 0.2560726 0.15549836 1.381053e-05 2.147515e-06 44.60556 #> 20  -1.056152663 1013 0.2579383 0.15720090 1.371350e-05 2.155775e-06 44.77965 #> 21  -1.711032581 1013 0.2695322 0.16791801 1.365382e-05 2.292722e-06 44.88769 #> 22  -2.760253024 1013 0.3583227 0.20324891 1.355844e-05 2.755739e-06 45.06187 #> 23  -2.760253024 1013 0.3583227 0.20324891 1.355844e-05 2.755739e-06 45.06187 #> 24  -3.450711479 1013 0.3654199 0.20972821 1.349584e-05 2.830459e-06 45.17723 #> 25  -3.450711479 1013 0.3654199 0.20972821 1.349584e-05 2.830459e-06 45.17723 #> 26  -4.098016281 1013 0.4244382 0.18636938 1.343727e-05 2.504296e-06 45.28592 #> 27  -4.354791034 1013 0.6938823 0.22574129 1.341407e-05 3.028109e-06 45.32918 #> 28   0.013657432 1013 0.2024599 0.10931749 1.381125e-05 1.509811e-06 44.60428 #> 29  -0.982639296 1013 0.2468893 0.14720913 1.372021e-05 2.019740e-06 44.76756 #> 30  -1.646837116 1013 0.1360008 0.05979899 1.365967e-05 8.168341e-07 44.87707 #> 31  -3.162888934 1013 0.1420066 0.06325443 1.352192e-05 8.553213e-07 45.12907 #> 32  -3.586434020 1013 0.4943098 0.26103389 1.348355e-05 3.519664e-06 45.19998 #> 33  -3.586434020 1013 0.4943098 0.26103389 1.348355e-05 3.519664e-06 45.19998 #> 34  -3.953506429 1013 0.4879943 0.25637681 1.345034e-05 3.448354e-06 45.26161 #> 35  -4.227370951 1013 0.6628710 0.21587558 1.342558e-05 2.898254e-06 45.30771 #> 36  -4.536964214 1013 0.6648920 0.21686361 1.339762e-05 2.905455e-06 45.35993 #> 37   2.059937865 1013 0.2577211 0.15700234 1.399908e-05 2.197889e-06 44.27263 #> 38   1.279122687 1013 0.2599439 0.15903790 1.392728e-05 2.214965e-06 44.39860 #> 39   0.797619994 1013 0.2794515 0.17727233 1.388308e-05 2.461085e-06 44.47663 #> 40   0.438113008 1013 0.3800260 0.22330092 1.385012e-05 3.092744e-06 44.53508 #> 41   0.438113008 1013 0.3800260 0.22330092 1.385012e-05 3.092744e-06 44.53508 #> 42   0.045924822 1013 0.3684013 0.21247266 1.381420e-05 2.935140e-06 44.59901 #> 43   0.045924822 1013 0.3684013 0.21247266 1.381420e-05 2.935140e-06 44.59901 #> 44  -0.321751602 1013 0.4284077 0.18934214 1.378057e-05 2.609243e-06 44.65911 #> 45  -0.723156720 1013 0.6941134 0.22583152 1.374389e-05 3.103805e-06 44.72492 #> 46   2.069232975 1013 0.2250047 0.12807623 1.399994e-05 1.793059e-06 44.27113 #> 47   1.432492143 1013 0.2493781 0.14944066 1.394137e-05 2.083407e-06 44.37380 #> 48   1.007998255 1013 0.1579486 0.07263743 1.390238e-05 1.009833e-06 44.44250 #> 49   0.320792733 1013 0.1417644 0.06311426 1.383937e-05 8.734615e-07 44.55418 #> 50  -0.039957854 1013 0.4842729 0.25364381 1.380634e-05 3.501894e-06 44.61303 #> 51  -0.039957854 1013 0.4842729 0.25364381 1.380634e-05 3.501894e-06 44.61303 #> 52  -0.352608363 1013 0.4961738 0.26241300 1.377775e-05 3.615461e-06 44.66416 #> 53  -0.580427948 1013 0.6564716 0.21275702 1.375693e-05 2.926883e-06 44.70150 #> 54  -0.831423188 1013 0.6794457 0.22402274 1.373401e-05 3.076731e-06 44.74270 #> 55   4.725217894 1013 0.2353565 0.13701581 1.424543e-05 1.951850e-06 43.84798 #> 56   4.900923939 1013 0.2424534 0.14325954 1.426174e-05 2.043130e-06 43.82027 #> 57   5.009276001 1013 0.2868061 0.18431630 1.427180e-05 2.630526e-06 43.80320 #> 58   4.178396294 1013 0.3483436 0.19426827 1.419473e-05 2.757586e-06 43.93444 #> 59   4.178396294 1013 0.3483436 0.19426827 1.419473e-05 2.757586e-06 43.93444 #> 60   4.658218991 1013 0.3794132 0.22272513 1.423922e-05 3.171431e-06 43.85856 #> 61   4.658218991 1013 0.3794132 0.22272513 1.423922e-05 3.171431e-06 43.85856 #> 62   5.108052769 1013 0.4155195 0.17976095 1.428098e-05 2.567162e-06 43.78765 #> 63   5.317203251 1013 0.6831042 0.22154014 1.430041e-05 3.168115e-06 43.75477 #> 64   5.131912309 1013 0.2032556 0.10996264 1.428319e-05 1.570618e-06 43.78390 #> 65   5.248726225 1013 0.2200442 0.12386427 1.429405e-05 1.770522e-06 43.76553 #> 66   5.326602170 1013 0.1548909 0.07081471 1.430129e-05 1.012741e-06 43.75329 #> 67   4.975450052 1013 0.1676952 0.07851755 1.426866e-05 1.120340e-06 43.80853 #> 68   5.118653778 1013 0.4891318 0.25721385 1.428196e-05 3.673518e-06 43.78599 #> 69   5.118653778 1013 0.4891318 0.25721385 1.428196e-05 3.673518e-06 43.78599 #> 70   5.242763674 1013 0.4881084 0.25646070 1.429349e-05 3.665719e-06 43.76647 #> 71   5.378220427 1013 0.6425012 0.20600177 1.430608e-05 2.947079e-06 43.74518 #> 72   5.582905509 1013 0.6720448 0.22037247 1.432512e-05 3.156862e-06 43.71306 #> 73   8.825682240 1013 0.2655341 0.16419569 1.462819e-05 2.401886e-06 43.21035 #> 74   9.041512140 1013 0.2941123 0.19140402 1.464846e-05 2.803775e-06 43.17730 #> 75   9.174607245 1013 0.2854932 0.18305219 1.466097e-05 2.683723e-06 43.15694 #> 76   9.950314584 1013 0.3694475 0.21343896 1.473396e-05 3.144801e-06 43.03869 #> 77   9.950314584 1013 0.3694475 0.21343896 1.473396e-05 3.144801e-06 43.03869 #> 78  10.056091363 1013 0.3769425 0.22040911 1.474393e-05 3.249696e-06 43.02262 #> 79  10.056091363 1013 0.3769425 0.22040911 1.474393e-05 3.249696e-06 43.02262 #> 80  10.155257092 1013 0.4457156 0.20252950 1.475327e-05 2.987973e-06 43.00756 #> 81  11.281448127 1013 0.7195701 0.23580651 1.485960e-05 3.503989e-06 42.83727 #> 82   7.977336506 1013 0.2629731 0.16182596 1.454863e-05 2.354346e-06 43.34074 #> 83   9.239455905 1013 0.2635553 0.16236364 1.466707e-05 2.381398e-06 43.14703 #> 84  10.080868838 1013 0.1541798 0.07039239 1.474626e-05 1.038025e-06 43.01885 #> 85  10.547663028 1013 0.1660559 0.07752120 1.479028e-05 1.146560e-06 42.94807 #> 86  10.892628777 1013 0.5075355 0.27086384 1.482285e-05 4.014974e-06 42.89591 #> 87  10.892628777 1013 0.5075355 0.27086384 1.482285e-05 4.014974e-06 42.89591 #> 88  11.191599092 1013 0.5199435 0.28017968 1.485110e-05 4.160976e-06 42.85081 #> 89  11.265885759 1013 0.6733928 0.22103582 1.485812e-05 3.284177e-06 42.83962 #> 90  11.170914622 1013 0.6926666 0.23059312 1.484914e-05 3.424111e-06 42.85393 #> 91  10.377836383 1013 0.2846261 0.18221885 1.477426e-05 2.692149e-06 42.97380 #> 92  11.049650601 1013 0.2891284 0.18655949 1.483768e-05 2.768111e-06 42.87221 #> 93  11.463936036 1013 0.3064568 0.20358002 1.487686e-05 3.028631e-06 42.80981 #> 94  11.910006233 1013 0.3852079 0.22819265 1.491908e-05 3.404425e-06 42.74282 #> 95  11.910006233 1013 0.3852079 0.22819265 1.491908e-05 3.404425e-06 42.74282 #> 96  11.386819636 1013 0.3950800 0.23762127 1.486956e-05 3.533324e-06 42.82141 #> 97  11.386819636 1013 0.3950800 0.23762127 1.486956e-05 3.533324e-06 42.82141 #> 98  10.896332201 1013 0.4717470 0.22304653 1.482320e-05 3.306263e-06 42.89535 #> 99  14.059040328 1013 0.7398367 0.24379855 1.512328e-05 3.687034e-06 42.42299 #> 100 10.092462468 1013 0.2444949 0.14507276 1.474735e-05 2.139439e-06 43.01709 #> 101 11.941627123 1013 0.2835867 0.18122164 1.492208e-05 2.704204e-06 42.73808 #> 102 13.174403560 1013 0.1750019 0.08299376 1.503908e-05 1.248149e-06 42.55407 #> 103 14.082632961 1013 0.1607313 0.07430543 1.512553e-05 1.123909e-06 42.41951 #> 104 14.590509433 1013 0.5252802 0.28421399 1.517397e-05 4.312656e-06 42.34464 #> 105 14.590509433 1013 0.5252802 0.28421399 1.517397e-05 4.312656e-06 42.34464 #> 106 15.030669043 1013 0.5329375 0.29003127 1.521601e-05 4.413119e-06 42.27996 #> 107 16.146877945 1013 0.6924837 0.23050182 1.532285e-05 3.531946e-06 42.11683 #> 108 18.356350349 1013 0.7086694 0.23863024 1.553533e-05 3.707199e-06 41.79761 #> 109 11.202861092 1013 0.3106433 0.20776590 1.485216e-05 3.085773e-06 42.84911 #> 110 12.872511761 1013 0.3111211 0.20824539 1.501039e-05 3.125844e-06 42.59898 #> 111 13.902129673 1013 0.3224016 0.21967317 1.510833e-05 3.318895e-06 42.44618 #> 112 14.510511310 1013 0.3890115 0.23180840 1.516634e-05 3.515685e-06 42.35641 #> 113 14.510511310 1013 0.3890115 0.23180840 1.516634e-05 3.515685e-06 42.35641 #> 114 13.493560406 1013 0.3978432 0.24028597 1.506943e-05 3.620973e-06 42.50668 #> 115 13.493560406 1013 0.3978432 0.24028597 1.506943e-05 3.620973e-06 42.50668 #> 116 12.540168934 1013 0.4786192 0.22859840 1.497883e-05 3.424137e-06 42.64854 #> 117 17.249086822 1013 0.7484424 0.24720548 1.542868e-05 3.814055e-06 41.95698 #> 118  9.298023160 1013 0.2682642 0.16673441 1.467257e-05 2.446423e-06 43.13809 #> 119 10.736706519 1013 0.2858342 0.18338027 1.480812e-05 2.715518e-06 42.91947 #> 120 11.695828759 1013 0.1722762 0.08131726 1.489880e-05 1.211530e-06 42.77495 #> 121 15.709877051 1013 0.1780197 0.08485910 1.528099e-05 1.296731e-06 42.18055 #> 122 15.197550175 1013 0.5405259 0.29582925 1.523197e-05 4.506061e-06 42.25549 #> 123 15.197550175 1013 0.5405259 0.29582925 1.523197e-05 4.506061e-06 42.25549 #> 124 14.753533549 1013 0.5523920 0.30496104 1.518954e-05 4.632217e-06 42.32066 #> 125 15.830225898 1013 0.7213743 0.24507613 1.529251e-05 3.747830e-06 42.16298 #> 126 18.740984505 1013 0.7210394 0.24490548 1.557245e-05 3.813778e-06 41.74253 #> 127 10.009073112 1013 0.3190235 0.21622968 1.473950e-05 3.187117e-06 43.02976 #> 128 10.640454211 1013 0.3135295 0.21066816 1.479904e-05 3.117686e-06 42.93403 #> 129 11.029805889 1013 0.3270407 0.22443157 1.483581e-05 3.329624e-06 42.87521 #> 130 13.833408605 1013 0.4034627 0.24573937 1.510179e-05 3.711103e-06 42.45635 #> 131 13.833408605 1013 0.4034627 0.24573937 1.510179e-05 3.711103e-06 42.45635 #> 132 14.932568341 1013 0.4017496 0.24407204 1.520664e-05 3.711515e-06 42.29436 #> 133 14.932568341 1013 0.4017496 0.24407204 1.520664e-05 3.711515e-06 42.29436 #> 134 15.963030593 1013 0.4644244 0.21719289 1.530523e-05 3.324188e-06 42.14361 #> 135 16.956101791 1013 0.7648260 0.25371328 1.540052e-05 3.907317e-06 41.99935 #> 136 10.447606285 1013 0.2832927 0.18093993 1.478084e-05 2.674444e-06 42.96322 #> 137 12.658908520 1013 0.2956319 0.19288931 1.499010e-05 2.891431e-06 42.63082 #> 138 14.133110009 1013 0.1842755 0.08875603 1.513034e-05 1.342909e-06 42.41206 #> 139 12.315149405 1013 0.1778036 0.08472520 1.495749e-05 1.267276e-06 42.68215 #> 140 12.594039210 1013 0.5551834 0.30712072 1.498395e-05 4.601880e-06 42.64050 #> 141 12.594039210 1013 0.5551834 0.30712072 1.498395e-05 4.601880e-06 42.64050 #> 142 12.835743708 1013 0.5515763 0.30433077 1.500689e-05 4.567060e-06 42.60446 #> 143 14.275232537 1013 0.7154877 0.24208241 1.514389e-05 3.666070e-06 42.39109 #> 144 17.417125513 1013 0.7373428 0.25325856 1.544485e-05 3.911540e-06 41.93271 #> 145  7.940632454 1013 0.3101238 0.20724488 1.454519e-05 3.014416e-06 43.34640 #> 146  7.837381218 1013 0.3215825 0.21883659 1.453552e-05 3.180904e-06 43.36233 #> 147  7.773709622 1013 0.3307771 0.22828872 1.452956e-05 3.316935e-06 43.37216 #> 148 10.468082402 1013 0.4118414 0.25395532 1.478277e-05 3.754164e-06 42.96012 #> 149 10.468082402 1013 0.4118414 0.25395532 1.478277e-05 3.754164e-06 42.96012 #> 150 10.345954855 1013 0.4055695 0.24779571 1.477125e-05 3.660253e-06 42.97863 #> 151 10.345954855 1013 0.4055695 0.24779571 1.477125e-05 3.660253e-06 42.97863 #> 152 10.231460278 1013 0.4776488 0.22781101 1.476046e-05 3.362595e-06 42.99599 #> 153 12.157481114 1013 0.7647263 0.25367360 1.494254e-05 3.790527e-06 42.70574 #> 154  7.482481342 1013 0.2984940 0.19569726 1.450231e-05 2.838062e-06 43.41717 #> 155  8.032934896 1013 0.2962285 0.19347350 1.455384e-05 2.815782e-06 43.33217 #> 156  8.399903932 1013 0.1712639 0.08069668 1.458823e-05 1.177222e-06 43.27569 #> 157 10.462670598 1013 0.1804428 0.08636376 1.478226e-05 1.276652e-06 42.96094 #> 158 11.201612308 1013 0.5573888 0.30883005 1.485205e-05 4.586758e-06 42.84930 #> 159 11.201612308 1013 0.5573888 0.30883005 1.485205e-05 4.586758e-06 42.84930 #> 160 11.842028457 1013 0.5586635 0.30981933 1.491265e-05 4.620226e-06 42.75301 #> 161 12.268583588 1013 0.7356576 0.25239084 1.495307e-05 3.774018e-06 42.68912 #> 162 12.689146454 1013 0.7397986 0.25452489 1.499297e-05 3.816085e-06 42.62631 #> 163  5.093914320 1013 0.3098590 0.20697957 1.427966e-05 2.955599e-06 43.78988 #> 164  5.167411136 1013 0.3155544 0.21271230 1.428649e-05 3.038912e-06 43.77832 #> 165  5.212734172 1013 0.3281610 0.22558577 1.429070e-05 3.223779e-06 43.77119 #> 166  4.666227261 1013 0.3969404 0.23941413 1.423996e-05 3.409248e-06 43.85729 #> 167  4.666227261 1013 0.3969404 0.23941413 1.423996e-05 3.409248e-06 43.85729 #> 168  4.431750849 1013 0.4086469 0.25081088 1.421821e-05 3.566083e-06 43.89434 #> 169  4.431750849 1013 0.4086469 0.25081088 1.421821e-05 3.566083e-06 43.89434 #> 170  4.211929213 1013 0.4795439 0.22934970 1.419784e-05 3.256271e-06 43.92913 #> 171  4.538994367 1013 0.7646822 0.25365605 1.422816e-05 3.609058e-06 43.87739 #> 172  5.980034473 1013 0.2779347 0.17583097 1.436208e-05 2.525299e-06 43.65087 #> 173  5.423667933 1013 0.2840916 0.18170579 1.431031e-05 2.600266e-06 43.73804 #> 174  5.052756906 1013 0.1764712 0.08390077 1.427584e-05 1.197754e-06 43.79636 #> 175  5.596401189 1013 0.1826359 0.08773075 1.432637e-05 1.256864e-06 43.71094 #> 176  5.383928248 1013 0.5431391 0.29783347 1.430661e-05 4.260989e-06 43.74428 #> 177  5.383928248 1013 0.5431391 0.29783347 1.430661e-05 4.260989e-06 43.74428 #> 178  5.199785032 1013 0.5357146 0.29214931 1.428950e-05 4.174667e-06 43.77322 #> 179  5.178563225 1013 0.7238913 0.24635989 1.428753e-05 3.519874e-06 43.77656 #> 180  5.294302406 1013 0.7289400 0.24894171 1.429828e-05 3.559439e-06 43.75837 #> 181  1.513765537 1013 0.2880040 0.18547232 1.394884e-05 2.587123e-06 44.36067 #> 182  1.156822624 1013 0.3090665 0.20618600 1.391604e-05 2.869293e-06 44.41839 #> 183  0.936707828 1013 0.3355447 0.23324206 1.389584e-05 3.241094e-06 44.45406 #> 184  0.474415162 1013 0.3885854 0.23140234 1.385344e-05 3.205720e-06 44.52917 #> 185  0.474415162 1013 0.3885854 0.23140234 1.385344e-05 3.205720e-06 44.52917 #> 186  0.067754406 1013 0.3870653 0.22995566 1.381620e-05 3.177114e-06 44.59545 #> 187  0.067754406 1013 0.3870653 0.22995566 1.381620e-05 3.177114e-06 44.59545 #> 188 -0.313490052 1013 0.4555975 0.21022201 1.378133e-05 2.897138e-06 44.65776 #> 189 -0.769278882 1013 0.7313708 0.24045465 1.373968e-05 3.303771e-06 44.73249 #> 190  1.816129076 1013 0.2553513 0.15484181 1.397664e-05 2.164169e-06 44.31189 #> 191  1.301116278 1013 0.2829088 0.18057221 1.392930e-05 2.515244e-06 44.39504 #> 192  0.957774412 1013 0.1702096 0.08005146 1.389777e-05 1.112537e-06 44.45065 #> 193  0.278406107 1013 0.1734304 0.08202625 1.383549e-05 1.134873e-06 44.56109 #> 194 -0.077424856 1013 0.5180245 0.27873303 1.380292e-05 3.847328e-06 44.61915 #> 195 -0.077424856 1013 0.5180245 0.27873303 1.380292e-05 3.847328e-06 44.61915 #> 196 -0.385811691 1013 0.5388202 0.29452318 1.377471e-05 4.056973e-06 44.66960 #> 197 -0.570407603 1013 0.7019145 0.23522654 1.375785e-05 3.236210e-06 44.69985 #> 198 -0.724373984 1013 0.7202647 0.24451090 1.374378e-05 3.360505e-06 44.72512 #> 199 -0.138361143 1013 0.2448321 0.14537301 1.379734e-05 2.005761e-06 44.62911 #> 200 -1.379337638 1013 0.2614499 0.16042199 1.368403e-05 2.195220e-06 44.83290 #> 201 -2.144606477 1013 0.2739814 0.17209287 1.361437e-05 2.342936e-06 44.95950 #> 202 -2.452538053 1013 0.3325039 0.18032835 1.358638e-05 2.450010e-06 45.01065 #> 203 -2.452538053 1013 0.3325039 0.18032835 1.358638e-05 2.450010e-06 45.01065 #> 204 -3.557185253 1013 0.3789286 0.22227013 1.348620e-05 2.997579e-06 45.19508 #> 205 -3.557185253 1013 0.3789286 0.22227013 1.348620e-05 2.997579e-06 45.19508 #> 206 -4.592792003 1013 0.4098769 0.17563088 1.339258e-05 2.352150e-06 45.36936 #> 207 -5.461548369 1013 0.6682202 0.21576031 1.331426e-05 2.872690e-06 45.51660 #> 208 -0.059126606 1013 0.2146358 0.11932584 1.380459e-05 1.647244e-06 44.61617 #> 209 -1.166417621 1013 0.2307545 0.13301680 1.370345e-05 1.822788e-06 44.79781 #> 210 -1.904611631 1013 0.1647244 0.07671410 1.363620e-05 1.046089e-06 44.91972 #> 211 -2.889328092 1013 0.1553407 0.07108221 1.354673e-05 9.629314e-07 45.08339 #> 212 -3.608523637 1013 0.4836264 0.25316992 1.348155e-05 3.413123e-06 45.20368 #> 213 -3.608523637 1013 0.4836264 0.25316992 1.348155e-05 3.413123e-06 45.20368 #> 214 -4.231826442 1013 0.4878082 0.25623993 1.342518e-05 3.440066e-06 45.30846 #> 215 -4.491658964 1013 0.6499798 0.20960893 1.340171e-05 2.809117e-06 45.35228 #> 216 -4.538560535 1013 0.6781471 0.22338082 1.339747e-05 2.992738e-06 45.36020 #>     height #> 1     0.40 #> 2     0.20 #> 3     0.17 #> 4     0.03 #> 5     0.05 #> 6     0.05 #> 7     0.03 #> 8     0.07 #> 9     0.05 #> 10    0.40 #> 11    0.20 #> 12    0.20 #> 13    0.07 #> 14    0.03 #> 15    0.05 #> 16    0.05 #> 17    0.03 #> 18    0.04 #> 19    0.40 #> 20    0.20 #> 21    0.17 #> 22    0.03 #> 23    0.05 #> 24    0.05 #> 25    0.03 #> 26    0.07 #> 27    0.05 #> 28    0.40 #> 29    0.20 #> 30    0.20 #> 31    0.07 #> 32    0.03 #> 33    0.05 #> 34    0.05 #> 35    0.03 #> 36    0.04 #> 37    0.40 #> 38    0.20 #> 39    0.17 #> 40    0.03 #> 41    0.05 #> 42    0.05 #> 43    0.03 #> 44    0.07 #> 45    0.05 #> 46    0.40 #> 47    0.20 #> 48    0.20 #> 49    0.07 #> 50    0.03 #> 51    0.05 #> 52    0.05 #> 53    0.03 #> 54    0.04 #> 55    0.40 #> 56    0.20 #> 57    0.17 #> 58    0.03 #> 59    0.05 #> 60    0.05 #> 61    0.03 #> 62    0.07 #> 63    0.05 #> 64    0.40 #> 65    0.20 #> 66    0.20 #> 67    0.07 #> 68    0.03 #> 69    0.05 #> 70    0.05 #> 71    0.03 #> 72    0.04 #> 73    0.40 #> 74    0.20 #> 75    0.17 #> 76    0.03 #> 77    0.05 #> 78    0.05 #> 79    0.03 #> 80    0.07 #> 81    0.05 #> 82    0.40 #> 83    0.20 #> 84    0.20 #> 85    0.07 #> 86    0.03 #> 87    0.05 #> 88    0.05 #> 89    0.03 #> 90    0.04 #> 91    0.40 #> 92    0.20 #> 93    0.17 #> 94    0.03 #> 95    0.05 #> 96    0.05 #> 97    0.03 #> 98    0.07 #> 99    0.05 #> 100   0.40 #> 101   0.20 #> 102   0.20 #> 103   0.07 #> 104   0.03 #> 105   0.05 #> 106   0.05 #> 107   0.03 #> 108   0.04 #> 109   0.40 #> 110   0.20 #> 111   0.17 #> 112   0.03 #> 113   0.05 #> 114   0.05 #> 115   0.03 #> 116   0.07 #> 117   0.05 #> 118   0.40 #> 119   0.20 #> 120   0.20 #> 121   0.07 #> 122   0.03 #> 123   0.05 #> 124   0.05 #> 125   0.03 #> 126   0.04 #> 127   0.40 #> 128   0.20 #> 129   0.17 #> 130   0.03 #> 131   0.05 #> 132   0.05 #> 133   0.03 #> 134   0.07 #> 135   0.05 #> 136   0.40 #> 137   0.20 #> 138   0.20 #> 139   0.07 #> 140   0.03 #> 141   0.05 #> 142   0.05 #> 143   0.03 #> 144   0.04 #> 145   0.40 #> 146   0.20 #> 147   0.17 #> 148   0.03 #> 149   0.05 #> 150   0.05 #> 151   0.03 #> 152   0.07 #> 153   0.05 #> 154   0.40 #> 155   0.20 #> 156   0.20 #> 157   0.07 #> 158   0.03 #> 159   0.05 #> 160   0.05 #> 161   0.03 #> 162   0.04 #> 163   0.40 #> 164   0.20 #> 165   0.17 #> 166   0.03 #> 167   0.05 #> 168   0.05 #> 169   0.03 #> 170   0.07 #> 171   0.05 #> 172   0.40 #> 173   0.20 #> 174   0.20 #> 175   0.07 #> 176   0.03 #> 177   0.05 #> 178   0.05 #> 179   0.03 #> 180   0.04 #> 181   0.40 #> 182   0.20 #> 183   0.17 #> 184   0.03 #> 185   0.05 #> 186   0.05 #> 187   0.03 #> 188   0.07 #> 189   0.05 #> 190   0.40 #> 191   0.20 #> 192   0.20 #> 193   0.07 #> 194   0.03 #> 195   0.05 #> 196   0.05 #> 197   0.03 #> 198   0.04 #> 199   0.40 #> 200   0.20 #> 201   0.17 #> 202   0.03 #> 203   0.05 #> 204   0.05 #> 205   0.03 #> 206   0.07 #> 207   0.05 #> 208   0.40 #> 209   0.20 #> 210   0.20 #> 211   0.07 #> 212   0.03 #> 213   0.05 #> 214   0.05 #> 215   0.03 #> 216   0.04"},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_matching_repetitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Repetitions in layered profiles — check_matching_repetitions","title":"Repetitions in layered profiles — check_matching_repetitions","text":"check_matching_repetitions() compares structure layered profile objects. cfp_layered_profile() object split along parameter(s) defined rep_cols. Returns TRUE profiles match structure.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_matching_repetitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repetitions in layered profiles — check_matching_repetitions","text":"","code":"check_matching_repetitions(x, rep_cols)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_matching_repetitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repetitions in layered profiles — check_matching_repetitions","text":"x cfp_layered_profile object. rep_cols character vector columns define repetitions profiles within x. Must subset id_cols x.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_soilphys.html","id":null,"dir":"Reference","previous_headings":"","what":"check_soilphys — check_soilphys","title":"check_soilphys — check_soilphys","text":"function analyses soilphys dataframe flux calculation. presents warning, variables missing also looks suspicious patterns suggest error interpolation made discretize_depth. Mainly checks ceratain columns present missing, can calcluated data present. Looks following columns default: \"upper\",\"lower\",\"TPS\",\"SWC\",\"AFPS\",\"t\",\"p\",\"DSD0\",\"D0\",\"DS\"","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_soilphys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_soilphys — check_soilphys","text":"","code":"check_soilphys(df, extra_vars = c(), id_cols)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_soilphys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_soilphys — check_soilphys","text":"df (dataframe) soilphys dataframe extra_vars (character vector) column names additional variables checked. id_cols (character vector) columns , together, identify site uniquely (e.g. site, repetition)","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_soilphys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_soilphys — check_soilphys","text":"data frame 'suspicious' parameter/depth combinations, values NA.","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/check_soilphys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check_soilphys — check_soilphys","text":"","code":"{ data(\"soilphys\") check_soilphys(soilphys,id_cols = c(\"site\")) } #> -------------------------------------------------------- #> your soilphys-dataframe is #>  ready  #> the following parameters are still missing:  #>  #> please note that for DSD0 calculation, #>         there may be individual prerequesits of the #>         fitting parameters you applied. (If so: provide extra_vars = c('my variable')) #>  #> the following parameters have depths with all NA #> please check if they were discretized correctly #> -------------------------------------------------------- #> $result #> [1] TRUE #>  #> $suspects #> # A tibble: 0 × 4 #> # Groups:   site [0] #> # ℹ 4 variables: site <chr>, upper <dbl>, param <chr>, value <lgl> #>"},{"path":"https://valentingar.github.io/ConFluxPro/reference/coercion.html","id":null,"dir":"Reference","previous_headings":"","what":"coercion — as_cfp_fgmod","title":"coercion — as_cfp_fgmod","text":"functions help coerce different object types ConFluxPro.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/coercion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"coercion — as_cfp_fgmod","text":"","code":"as_cfp_fgmod(x)  as_cfp_pfmod(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/coercion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"coercion — as_cfp_fgmod","text":"x object coerced","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/coercion.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"coercion — as_cfp_fgmod","text":"as_cfp_fgmod(): cfp_fgmod as_cfp_pfmod(): cfp_pfmod","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/complete_soilphys.html","id":null,"dir":"Reference","previous_headings":"","what":"complete_soilphys — complete_soilphys","title":"complete_soilphys — complete_soilphys","text":"function completes soilphys dataset calculating different parameters necessary, long required parameters available. Diffusion coefficients, well air density calculated missing.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/complete_soilphys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"complete_soilphys — complete_soilphys","text":"","code":"complete_soilphys(   soilphys,   DSD0_formula = NULL,   gases = NULL,   overwrite = TRUE,   quiet = FALSE )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/complete_soilphys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"complete_soilphys — complete_soilphys","text":"soilphys (dataframe) soilphys dataframe DSD0_formula (character) character vector defining way DSD0 calculated. Must refer existing columns soilphys. See examples . gases (character) character vector defining gases calculate D0 DS. overwrite (logical) true, already existing columns overwritten. quiet (logical) Suppress messages.","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/complete_soilphys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"complete_soilphys — complete_soilphys","text":"","code":"soilphys <- complete_soilphys(soilphys, DSD0_formula = \"a*AFPS^b\") #> The following columns were overwritten: AFPS DSD0 D0 DS c_air"},{"path":"https://valentingar.github.io/ConFluxPro/reference/dcdz_layered.html","id":null,"dir":"Reference","previous_headings":"","what":"dcdz_layered — dcdz_layered","title":"dcdz_layered — dcdz_layered","text":"function calculates concentration gradients using different approaches.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/dcdz_layered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dcdz_layered — dcdz_layered","text":"","code":"dcdz_layered(df, layers_map, mode)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/dcdz_layered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dcdz_layered — dcdz_layered","text":"df (dataframe) gasdata dataframe, filtered one profile (e.g. 1 day & one Plot ). layers_map (dataframe) containing following parameters: \"layer\"=name layer; \"upper\"=upper limit layer cm; \"lower\" = lower limit layer cm; mode (character) One (\"LL\",\"LS\",\"EF\",\"DA\").","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/dcdz_layered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dcdz_layered — dcdz_layered","text":"df (dataframe) structure layer_map folowing columns: mode (character) used gradient method. layer (character) layer name upper (numeric) upper boundry cm lower (numeric) lower boundry cm dcdz_ppm (numeric) concentration gradient ppm/cm. dcdz_sd (numeric) standard error ppm/cm. dc_ppm (numeric) concentration difference ppm. r2 (linearised) R^2 model.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/dcdz_layered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dcdz_layered — dcdz_layered","text":"","code":"{ df <- data.frame(depth = c(10,0,-100),                  x_ppm = c(400,800,5000),                  gd_id = c(1,1,1))  lmap <- data.frame(upper = c(10,0),                    lower = c(0,-100),                    layer = c(\"HU\",\"MIN\")) dcdz_layered(df,              lmap,              mode = \"LL\" )   } #>   dcdz_ppm dcdz_sd dc_ppm r2 layer upper lower gd_id #> 1    -4000     NaN   -400  1    HU    10     0     1 #> 2    -4200     NaN  -4200  1   MIN     0  -100     1"},{"path":"https://valentingar.github.io/ConFluxPro/reference/deepflux.html","id":null,"dir":"Reference","previous_headings":"","what":"deepflux — deepflux","title":"deepflux — deepflux","text":"Extract incoming outgoing flux deepest layer pro_flux() model.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/deepflux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deepflux — deepflux","text":"","code":"deepflux(x, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/deepflux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deepflux — deepflux","text":"x valid cfp_pfres() object. ... parameters passed efflux() case cfp_fgres.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/deepflux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"deepflux — deepflux","text":"data.frame F0 (\\(µmol / m^2 / s\\))","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/deepflux.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"deepflux — deepflux","text":"F0 represents flux lowest layer defined cfp_pfres() model","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/depth_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique layers depths — depth_structure","title":"Unique layers depths — depth_structure","text":"Get unique layers depths, .e. backbone object given set identifying columns.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/depth_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique layers depths — depth_structure","text":"","code":"depth_structure(x, id_cols = NULL, ...)  # S3 method for class 'cfp_layered_profile' depth_structure(x, id_cols = NULL, ...)  # S3 method for class 'cfp_profile' depth_structure(x, id_cols = NULL, ...)  # S3 method for class 'cfp_dat' depth_structure(x, id_cols = NULL, structure_from = NULL, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/depth_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique layers depths — depth_structure","text":"x object get general structure . id_cols columns identify set depth structures extract (e.g. site identifier).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/discretize_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"discretize_depth — discretize_depth","title":"discretize_depth — discretize_depth","text":"Interpolate discretize data layered structure. output data.frame profile separated layers intersect depths defined function call. See cfp_layered_profile(). different interpolation methods implemented, might practical different parameters tasks. 'linear' interpolation continuous parameters, (e.g. soil temperature). 'boundary' interpolation suitable data already layered. selects value old layer new layer lay . 'linspline' interpolation fits linear spline model data knots defined  knots 'nearest' finds closest value new layer. can define whether closest value nearest top 1, bottom 0 layer using int_depth 'harmonic' similar linear interpolation uses harmonic mean harm() using distance depth value weights. Multiple variables can discretized time supplying multiple column names param. also possible use different method controlling parameters int_depth knots param. Just provide list settings length param. one value given, multiple param settins reused parameter.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/discretize_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"discretize_depth — discretize_depth","text":"","code":"discretize_depth(   df,   param,   method,   depth_target,   boundary_nearest = FALSE,   boundary_average = \"none\",   int_depth = 0.5,   knots = NULL,   ... )  # S3 method for class 'cfp_profile' discretize_depth(   df,   param,   method,   depth_target,   boundary_nearest = FALSE,   boundary_average = \"none\",   int_depth = 0.5,   knots = NULL,   ... )  # S3 method for class 'data.frame' discretize_depth(   df,   param,   method,   depth_target,   id_cols = NULL,   boundary_nearest = FALSE,   boundary_average = \"none\",   int_depth = 0.5,   knots = NULL,   ... )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/discretize_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"discretize_depth — discretize_depth","text":"df (dataframe) dataframe containing parameters interpolated, well columns \"depth\", \"upper\" \"lower\". param (character vector) column names name parameters interpolated. method (character vector) character (-vector) specifying methods used interpolation. Must order param. One linear boundary linspline nearest harmonic depth_target (numeric vector data frame) specifying new layers. Must include n+1 depths n target layers. target layers different id_cols, enter data.frame instead. data frame must \"depth\" column, well well id_cols needed must least subset id_cols original data. boundary_nearest (logical) = TRUE/FALSE TRUE target depth steps (partially) outside parameter boundaries, nearest neighbor returned, else returns NA. Default FALSE. boundary_average (\"character) Defines happens new layer contains multiple old layers. one none = deafult  new layer set NA arith new layer calculated arithmetic mean old harm new layer calculated harmonic mean old int_depth (numeric vector)  = value 0 1 1 = interpolation takes top depth step, 0.5 = middle 0= bottom. Default = 0.5 knots (numeric vector) = depths knots 'linspline' method placed. differs parameters, list numeric vectors length \"param\" can provided. differ id_cols. id_cols Column names data.frame uniquely identify profile.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/discretize_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"discretize_depth — discretize_depth","text":"cfp_layered_profile() data.frame variables upper lower defining layers derived depth_target. column depth middle layer. variables param","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/discretize_depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"discretize_depth — discretize_depth","text":"","code":"{  data(\"soiltemp\") library(dplyr)  dt <- soiltemp %>%   select(site,depth) %>%   distinct() %>%   group_by(site) %>%   slice_max(depth) %>%   reframe(depth = c(depth,seq(0,-100,-10)))  discretize_depth(soiltemp,                  \"t\",                  \"linear\",                  dt,c(                    \"site\",\"Date\")) } #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:ConFluxPro’: #>  #>     n_groups #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #>  #> A cfp_layered_profile object  #> id_cols: site Date  #> 24  unique profiles  #>  #>       site       Date           t depth upper lower #> 1   site_a 2021-01-01 -0.19747588 -95.0   -90  -100 #> 2   site_a 2021-01-01 -0.59242764 -85.0   -80   -90 #> 3   site_a 2021-01-01 -0.98737939 -75.0   -70   -80 #> 4   site_a 2021-01-01 -1.38233115 -65.0   -60   -70 #> 5   site_a 2021-01-01 -1.77728291 -55.0   -50   -60 #> 6   site_a 2021-01-01 -2.17223466 -45.0   -40   -50 #> 7   site_a 2021-01-01 -2.56718642 -35.0   -30   -40 #> 8   site_a 2021-01-01 -3.76136984 -25.0   -20   -30 #> 9   site_a 2021-01-01 -4.86022893 -15.0   -10   -20 #> 10  site_a 2021-01-01 -5.06453203  -5.0     0   -10 #> 11  site_a 2021-01-01 -5.97984391   2.5     5     0 #> 12  site_a 2021-02-01  0.53679849 -95.0   -90  -100 #> 13  site_a 2021-02-01  0.18280934 -85.0   -80   -90 #> 14  site_a 2021-02-01 -0.17117980 -75.0   -70   -80 #> 15  site_a 2021-02-01 -0.52516895 -65.0   -60   -70 #> 16  site_a 2021-02-01 -0.87915809 -55.0   -50   -60 #> 17  site_a 2021-02-01 -1.23314724 -45.0   -40   -50 #> 18  site_a 2021-02-01 -1.58713638 -35.0   -30   -40 #> 19  site_a 2021-02-01 -2.21903833 -25.0   -20   -30 #> 20  site_a 2021-02-01 -3.10548225 -15.0   -10   -20 #> 21  site_a 2021-02-01 -3.96855532  -5.0     0   -10 #> 22  site_a 2021-02-01 -4.35479103   2.5     5     0 #> 23  site_a 2021-03-01  2.45034545 -95.0   -90  -100 #> 24  site_a 2021-03-01  2.19007373 -85.0   -80   -90 #> 25  site_a 2021-03-01  1.92980200 -75.0   -70   -80 #> 26  site_a 2021-03-01  1.66953028 -65.0   -60   -70 #> 27  site_a 2021-03-01  1.40925855 -55.0   -50   -60 #> 28  site_a 2021-03-01  1.14898682 -45.0   -40   -50 #> 29  site_a 2021-03-01  0.88871510 -35.0   -30   -40 #> 30  site_a 2021-03-01  0.62285788 -25.0   -20   -30 #> 31  site_a 2021-03-01  0.24201891 -15.0   -10   -20 #> 32  site_a 2021-03-01 -0.24821632  -5.0     0   -10 #> 33  site_a 2021-03-01 -0.72315672   2.5     5     0 #> 34  site_a 2021-04-01  4.63736487 -95.0   -90  -100 #> 35  site_a 2021-04-01  4.69593355 -85.0   -80   -90 #> 36  site_a 2021-04-01  4.75450223 -75.0   -70   -80 #> 37  site_a 2021-04-01  4.81307092 -65.0   -60   -70 #> 38  site_a 2021-04-01  4.87163960 -55.0   -50   -60 #> 39  site_a 2021-04-01  4.93020828 -45.0   -40   -50 #> 40  site_a 2021-04-01  4.98877696 -35.0   -30   -40 #> 41  site_a 2021-04-01  4.56823988 -25.0   -20   -30 #> 42  site_a 2021-04-01  4.41830764 -15.0   -10   -20 #> 43  site_a 2021-04-01  5.01808601  -5.0     0   -10 #> 44  site_a 2021-04-01  5.31720325   2.5     5     0 #> 45  site_a 2021-05-01  8.71776729 -95.0   -90  -100 #> 46  site_a 2021-05-01  8.78971059 -85.0   -80   -90 #> 47  site_a 2021-05-01  8.86165389 -75.0   -70   -80 #> 48  site_a 2021-05-01  8.93359719 -65.0   -60   -70 #> 49  site_a 2021-05-01  9.00554049 -55.0   -50   -60 #> 50  site_a 2021-05-01  9.07748379 -45.0   -40   -50 #> 51  site_a 2021-05-01  9.14942709 -35.0   -30   -40 #> 52  site_a 2021-05-01  9.56124561 -25.0   -20   -30 #> 53  site_a 2021-05-01 10.00320297 -15.0   -10   -20 #> 54  site_a 2021-05-01 10.13542395  -5.0     0   -10 #> 55  site_a 2021-05-01 11.28144813   2.5     5     0 #> 56  site_a 2021-06-01 10.04192927 -95.0   -90  -100 #> 57  site_a 2021-06-01 10.26586735 -85.0   -80   -90 #> 58  site_a 2021-06-01 10.48980542 -75.0   -70   -80 #> 59  site_a 2021-06-01 10.71374349 -65.0   -60   -70 #> 60  site_a 2021-06-01 10.93768156 -55.0   -50   -60 #> 61  site_a 2021-06-01 11.16161964 -45.0   -40   -50 #> 62  site_a 2021-06-01 11.38555771 -35.0   -30   -40 #> 63  site_a 2021-06-01 11.73646565 -25.0   -20   -30 #> 64  site_a 2021-06-01 11.64841293 -15.0   -10   -20 #> 65  site_a 2021-06-01 10.99442969  -5.0     0   -10 #> 66  site_a 2021-06-01 14.05904033   2.5     5     0 #> 67  site_a 2021-07-01 10.36803576 -95.0   -90  -100 #> 68  site_a 2021-07-01 10.92458598 -85.0   -80   -90 #> 69  site_a 2021-07-01 11.48113620 -75.0   -70   -80 #> 70  site_a 2021-07-01 12.03768643 -65.0   -60   -70 #> 71  site_a 2021-07-01 12.59423665 -55.0   -50   -60 #> 72  site_a 2021-07-01 13.15078687 -45.0   -40   -50 #> 73  site_a 2021-07-01 13.70733709 -35.0   -30   -40 #> 74  site_a 2021-07-01 14.31162119 -25.0   -20   -30 #> 75  site_a 2021-07-01 14.00203586 -15.0   -10   -20 #> 76  site_a 2021-07-01 12.73084723  -5.0     0   -10 #> 77  site_a 2021-07-01 17.24908682   2.5     5     0 #> 78  site_a 2021-08-01  9.69338256 -95.0   -90  -100 #> 79  site_a 2021-08-01  9.90384293 -85.0   -80   -90 #> 80  site_a 2021-08-01 10.11430329 -75.0   -70   -80 #> 81  site_a 2021-08-01 10.32476366 -65.0   -60   -70 #> 82  site_a 2021-08-01 10.53522403 -55.0   -50   -60 #> 83  site_a 2021-08-01 10.74568439 -45.0   -40   -50 #> 84  site_a 2021-08-01 10.95614476 -35.0   -30   -40 #> 85  site_a 2021-08-01 12.37869429 -25.0   -20   -30 #> 86  site_a 2021-08-01 14.38298847 -15.0   -10   -20 #> 87  site_a 2021-08-01 15.75693814  -5.0     0   -10 #> 88  site_a 2021-08-01 16.95610179   2.5     5     0 #> 89  site_a 2021-09-01  7.99225807 -95.0   -90  -100 #> 90  site_a 2021-09-01  7.95784099 -85.0   -80   -90 #> 91  site_a 2021-09-01  7.92342391 -75.0   -70   -80 #> 92  site_a 2021-09-01  7.88900684 -65.0   -60   -70 #> 93  site_a 2021-09-01  7.85458976 -55.0   -50   -60 #> 94  site_a 2021-09-01  7.82017268 -45.0   -40   -50 #> 95  site_a 2021-09-01  7.78575560 -35.0   -30   -40 #> 96  site_a 2021-09-01  9.12594770 -25.0   -20   -30 #> 97  site_a 2021-09-01 10.40701863 -15.0   -10   -20 #> 98  site_a 2021-09-01 10.25435919  -5.0     0   -10 #> 99  site_a 2021-09-01 12.15748111   2.5     5     0 #> 100 site_a 2021-10-01  5.05716591 -95.0   -90  -100 #> 101 site_a 2021-10-01  5.08166485 -85.0   -80   -90 #> 102 site_a 2021-10-01  5.10616379 -75.0   -70   -80 #> 103 site_a 2021-10-01  5.13066273 -65.0   -60   -70 #> 104 site_a 2021-10-01  5.15516167 -55.0   -50   -60 #> 105 site_a 2021-10-01  5.17966061 -45.0   -40   -50 #> 106 site_a 2021-10-01  5.20415954 -35.0   -30   -40 #> 107 site_a 2021-10-01  4.95597291 -25.0   -20   -30 #> 108 site_a 2021-10-01  4.54898905 -15.0   -10   -20 #> 109 site_a 2021-10-01  4.25589354  -5.0     0   -10 #> 110 site_a 2021-10-01  4.53899437   2.5     5     0 #> 111 site_a 2021-11-01  1.69223699 -95.0   -90  -100 #> 112 site_a 2021-11-01  1.57325602 -85.0   -80   -90 #> 113 site_a 2021-11-01  1.45427505 -75.0   -70   -80 #> 114 site_a 2021-11-01  1.33529408 -65.0   -60   -70 #> 115 site_a 2021-11-01  1.21631311 -55.0   -50   -60 #> 116 site_a 2021-11-01  1.09733214 -45.0   -40   -50 #> 117 site_a 2021-11-01  0.97835117 -35.0   -30   -40 #> 118 site_a 2021-11-01  0.72205422 -25.0   -20   -30 #> 119 site_a 2021-11-01  0.27108478 -15.0   -10   -20 #> 120 site_a 2021-11-01 -0.23724116  -5.0     0   -10 #> 121 site_a 2021-11-01 -0.76927888   2.5     5     0 #> 122 site_a 2021-12-01  0.48212710 -95.0   -90  -100 #> 123 site_a 2021-12-01  0.06846827 -85.0   -80   -90 #> 124 site_a 2021-12-01 -0.34519056 -75.0   -70   -80 #> 125 site_a 2021-12-01 -0.75884939 -65.0   -60   -70 #> 126 site_a 2021-12-01 -1.17250822 -55.0   -50   -60 #> 127 site_a 2021-12-01 -1.58616705 -45.0   -40   -50 #> 128 site_a 2021-12-01 -1.99982589 -35.0   -30   -40 #> 129 site_a 2021-12-01 -2.26055623 -25.0   -20   -30 #> 130 site_a 2021-12-01 -3.00486165 -15.0   -10   -20 #> 131 site_a 2021-12-01 -4.38567065  -5.0     0   -10 #> 132 site_a 2021-12-01 -5.46154837   2.5     5     0 #> 133 site_b 2021-01-01 -0.19003417 -95.0   -90  -100 #> 134 site_b 2021-01-01 -0.57010251 -85.0   -80   -90 #> 135 site_b 2021-01-01 -0.95017086 -75.0   -70   -80 #> 136 site_b 2021-01-01 -1.33023920 -65.0   -60   -70 #> 137 site_b 2021-01-01 -1.71030754 -55.0   -50   -60 #> 138 site_b 2021-01-01 -2.09037588 -45.0   -40   -50 #> 139 site_b 2021-01-01 -2.47044422 -35.0   -30   -40 #> 140 site_b 2021-01-01 -3.09137342 -25.0   -20   -30 #> 141 site_b 2021-01-01 -4.23522906 -15.0   -10   -20 #> 142 site_b 2021-01-01 -5.66115028  -5.0     0   -10 #> 143 site_b 2021-01-01 -5.97518999   3.5     7     0 #> 144 site_b 2021-02-01  0.51180580 -95.0   -90  -100 #> 145 site_b 2021-02-01  0.17970689 -85.0   -80   -90 #> 146 site_b 2021-02-01 -0.15239202 -75.0   -70   -80 #> 147 site_b 2021-02-01 -0.48449093 -65.0   -60   -70 #> 148 site_b 2021-02-01 -0.81658984 -55.0   -50   -60 #> 149 site_b 2021-02-01 -1.14868875 -45.0   -40   -50 #> 150 site_b 2021-02-01 -1.48078766 -35.0   -30   -40 #> 151 site_b 2021-02-01 -2.30603584 -25.0   -20   -30 #> 152 site_b 2021-02-01 -3.24759795 -15.0   -10   -20 #> 153 site_b 2021-02-01 -3.81232473  -5.0     0   -10 #> 154 site_b 2021-02-01 -4.40428139   3.5     7     0 #> 155 site_b 2021-03-01  2.38760339 -95.0   -90  -100 #> 156 site_b 2021-03-01  2.17535645 -85.0   -80   -90 #> 157 site_b 2021-03-01  1.96310950 -75.0   -70   -80 #> 158 site_b 2021-03-01  1.75086256 -65.0   -60   -70 #> 159 site_b 2021-03-01  1.53861561 -55.0   -50   -60 #> 160 site_b 2021-03-01  1.32636867 -45.0   -40   -50 #> 161 site_b 2021-03-01  1.11412173 -35.0   -30   -40 #> 162 site_b 2021-03-01  0.74857063 -25.0   -20   -30 #> 163 site_b 2021-03-01  0.24864262 -15.0   -10   -20 #> 164 site_b 2021-03-01 -0.23235817  -5.0     0   -10 #> 165 site_b 2021-03-01 -0.72385380   3.5     7     0 #> 166 site_b 2021-04-01  5.07350535 -95.0   -90  -100 #> 167 site_b 2021-04-01  5.11244332 -85.0   -80   -90 #> 168 site_b 2021-04-01  5.15138129 -75.0   -70   -80 #> 169 site_b 2021-04-01  5.19031927 -65.0   -60   -70 #> 170 site_b 2021-04-01  5.22925724 -55.0   -50   -60 #> 171 site_b 2021-04-01  5.26819521 -45.0   -40   -50 #> 172 site_b 2021-04-01  5.30713318 -35.0   -30   -40 #> 173 site_b 2021-04-01  5.11761191 -25.0   -20   -30 #> 174 site_b 2021-04-01  5.00409080 -15.0   -10   -20 #> 175 site_b 2021-04-01  5.19502910  -5.0     0   -10 #> 176 site_b 2021-04-01  5.49518333   3.5     7     0 #> 177 site_b 2021-05-01  7.34627681 -95.0   -90  -100 #> 178 site_b 2021-05-01  7.76698327 -85.0   -80   -90 #> 179 site_b 2021-05-01  8.18768974 -75.0   -70   -80 #> 180 site_b 2021-05-01  8.60839621 -65.0   -60   -70 #> 181 site_b 2021-05-01  9.02910267 -55.0   -50   -60 #> 182 site_b 2021-05-01  9.44980914 -45.0   -40   -50 #> 183 site_b 2021-05-01  9.87051560 -35.0   -30   -40 #> 184 site_b 2021-05-01 10.23377393 -25.0   -20   -30 #> 185 site_b 2021-05-01 10.61665618 -15.0   -10   -20 #> 186 site_b 2021-05-01 11.07661051  -5.0     0   -10 #> 187 site_b 2021-05-01 11.21161654   3.5     7     0 #> 188 site_b 2021-06-01  9.16788014 -95.0   -90  -100 #> 189 site_b 2021-06-01  9.78426836 -85.0   -80   -90 #> 190 site_b 2021-06-01 10.40065658 -75.0   -70   -80 #> 191 site_b 2021-06-01 11.01704480 -65.0   -60   -70 #> 192 site_b 2021-06-01 11.63343301 -55.0   -50   -60 #> 193 site_b 2021-06-01 12.24982123 -45.0   -40   -50 #> 194 site_b 2021-06-01 12.86620945 -35.0   -30   -40 #> 195 site_b 2021-06-01 13.51001375 -25.0   -20   -30 #> 196 site_b 2021-06-01 14.18420826 -15.0   -10   -20 #> 197 site_b 2021-06-01 14.86137689  -5.0     0   -10 #> 198 site_b 2021-06-01 17.40943360   3.5     7     0 #> 199 site_b 2021-07-01  8.57868148 -95.0   -90  -100 #> 200 site_b 2021-07-01  9.05824260 -85.0   -80   -90 #> 201 site_b 2021-07-01  9.53780372 -75.0   -70   -80 #> 202 site_b 2021-07-01 10.01736484 -65.0   -60   -70 #> 203 site_b 2021-07-01 10.49692596 -55.0   -50   -60 #> 204 site_b 2021-07-01 10.97648708 -45.0   -40   -50 #> 205 site_b 2021-07-01 11.45604820 -35.0   -30   -40 #> 206 site_b 2021-07-01 13.82239584 -25.0   -20   -30 #> 207 site_b 2021-07-01 15.60741168 -15.0   -10   -20 #> 208 site_b 2021-07-01 14.92430917  -5.0     0   -10 #> 209 site_b 2021-07-01 17.49351653   3.5     7     0 #> 210 site_b 2021-08-01  9.34195517 -95.0   -90  -100 #> 211 site_b 2021-08-01 10.07905591 -85.0   -80   -90 #> 212 site_b 2021-08-01 10.81615666 -75.0   -70   -80 #> 213 site_b 2021-08-01 11.55325740 -65.0   -60   -70 #> 214 site_b 2021-08-01 12.29035815 -55.0   -50   -60 #> 215 site_b 2021-08-01 13.02745889 -45.0   -40   -50 #> 216 site_b 2021-08-01 13.76455964 -35.0   -30   -40 #> 217 site_b 2021-08-01 13.15905542 -25.0   -20   -30 #> 218 site_b 2021-08-01 12.37092737 -15.0   -10   -20 #> 219 site_b 2021-08-01 12.74278044  -5.0     0   -10 #> 220 site_b 2021-08-01 16.07059995   3.5     7     0 #> 221 site_b 2021-09-01  7.20725457 -95.0   -90  -100 #> 222 site_b 2021-09-01  7.39073908 -85.0   -80   -90 #> 223 site_b 2021-09-01  7.57422360 -75.0   -70   -80 #> 224 site_b 2021-09-01  7.75770812 -65.0   -60   -70 #> 225 site_b 2021-09-01  7.94119264 -55.0   -50   -60 #> 226 site_b 2021-09-01  8.12467716 -45.0   -40   -50 #> 227 site_b 2021-09-01  8.30816167 -35.0   -30   -40 #> 228 site_b 2021-09-01  9.25886753 -25.0   -20   -30 #> 229 site_b 2021-09-01 10.61045894 -15.0   -10   -20 #> 230 site_b 2021-09-01 11.59571455  -5.0     0   -10 #> 231 site_b 2021-09-01 12.50890523   3.5     7     0 #> 232 site_b 2021-10-01  6.25821774 -95.0   -90  -100 #> 233 site_b 2021-10-01  6.07276223 -85.0   -80   -90 #> 234 site_b 2021-10-01  5.88730672 -75.0   -70   -80 #> 235 site_b 2021-10-01  5.70185120 -65.0   -60   -70 #> 236 site_b 2021-10-01  5.51639569 -55.0   -50   -60 #> 237 site_b 2021-10-01  5.33094018 -45.0   -40   -50 #> 238 site_b 2021-10-01  5.14548466 -35.0   -30   -40 #> 239 site_b 2021-10-01  5.37415607 -25.0   -20   -30 #> 240 site_b 2021-10-01  5.55390660 -15.0   -10   -20 #> 241 site_b 2021-10-01  5.27060935  -5.0     0   -10 #> 242 site_b 2021-10-01  5.24469990   3.5     7     0 #> 243 site_b 2021-11-01  2.07363548 -95.0   -90  -100 #> 244 site_b 2021-11-01  1.90196454 -85.0   -80   -90 #> 245 site_b 2021-11-01  1.73029361 -75.0   -70   -80 #> 246 site_b 2021-11-01  1.55862268 -65.0   -60   -70 #> 247 site_b 2021-11-01  1.38695174 -55.0   -50   -60 #> 248 site_b 2021-11-01  1.21528081 -45.0   -40   -50 #> 249 site_b 2021-11-01  1.04360988 -35.0   -30   -40 #> 250 site_b 2021-11-01  0.70111748 -25.0   -20   -30 #> 251 site_b 2021-11-01  0.20723991 -15.0   -10   -20 #> 252 site_b 2021-11-01 -0.26720137  -5.0     0   -10 #> 253 site_b 2021-11-01 -0.65838839   3.5     7     0 #> 254 site_b 2021-12-01  0.49451890 -95.0   -90  -100 #> 255 site_b 2021-12-01  0.12542190 -85.0   -80   -90 #> 256 site_b 2021-12-01 -0.24367511 -75.0   -70   -80 #> 257 site_b 2021-12-01 -0.61277211 -65.0   -60   -70 #> 258 site_b 2021-12-01 -0.98186912 -55.0   -50   -60 #> 259 site_b 2021-12-01 -1.35096612 -45.0   -40   -50 #> 260 site_b 2021-12-01 -1.72006313 -35.0   -30   -40 #> 261 site_b 2021-12-01 -2.22915757 -25.0   -20   -30 #> 262 site_b 2021-12-01 -3.03316720 -15.0   -10   -20 #> 263 site_b 2021-12-01 -3.99209459  -5.0     0   -10 #> 264 site_b 2021-12-01 -4.51845986   3.5     7     0"},{"path":"https://valentingar.github.io/ConFluxPro/reference/efflux.html","id":null,"dir":"Reference","previous_headings":"","what":"efflux — efflux","title":"efflux — efflux","text":"Calculate extract soil/atmosphere efflux cfp_pfres cfp_fgres model results.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/efflux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"efflux — efflux","text":"","code":"efflux(x, ...)  # S3 method for class 'cfp_pfres' efflux(x, ...)  # S3 method for class 'cfp_fgres' efflux(x, ..., method = \"lm\", layers = NULL)  # S3 method for class 'cfp_altres' efflux(x, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/efflux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"efflux — efflux","text":"x cfp_pfres cfp_fgres model result, cfp_altres. method Method(s) used interpolate efflux top soil partial fluxes within soil. One top Use flux topmost model layer. lm linear model partial flux centered respective layer model evaluated top soil. lex Linearly exterpolate using fluxes two layers soil. layers Vector two integers selecting layers lex method. Layers indexed 1 (topmost) number layers used flux calculation.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/error_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"error_funs — error_concentration","title":"error_funs — error_concentration","text":"set functions can called cfp_pfres object (result call pro_flux) assess quality model.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/error_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"error_funs — error_concentration","text":"","code":"error_concentration(x, param_cols = NULL, normer)  error_efflux(x, param_cols, EFFLUX, normer, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/error_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"error_funs — error_concentration","text":"x cfp_pfres object, returned call pro_flux() param_cols columns , together, define different parameters (e.g. different gases) NRMSEs calculated separately (e.g. \"gas\"). Defaults id_cols layers_map. destinction wished, set character() normer character string defining type normalization applied. Can one mean arithmetic mean sd standard deviation range difference range IQR difference interquantile range EFFLUX data.frame () one value efflux per profile x. Must contain id_cols x needed. ... arguments passed efflux() case cfp_fgres.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/error_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"error_funs — error_concentration","text":"error_concentration, way error parameter calculated cfp_fgres cfp_pfres objects entirely different used comparison two. NRMSE cfp_pfres objects calculated mean depth-wise NRMSEs modelled versus input gas concentrations. 'NRMSE's cfp_fgres objects simply calculate mean (dcdz_sd / dcdz_ppm) per group described param_cols.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/extractors.html","id":null,"dir":"Reference","previous_headings":"","what":"extractors — extractors","title":"extractors — extractors","text":"functions extract components different objects can created ConFluxPro.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/extractors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extractors — extractors","text":"","code":"cfp_id_cols(x)  n_groups(x)  get_soilphys(x)  get_gasdata(x)  get_layers_map(x)  cfp_gases(x)  cfp_modes(x)  cfp_param(x)  cfp_funs(x)  cfp_zero_flux(x)  cfp_zero_limits(x)  cfp_DSD0_optim(x)  cfp_evenness_factor(x)  cfp_known_flux_factor(x)  get_PROFLUX(x)  cfp_runmap_type(x)  cfp_params_df(x)  cfp_n_runs(x)  cfp_layers_different(x)  cfp_layers_from(x)  cfp_layers_altmap(x)  n_profiles(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/extractors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extractors — extractors","text":"x object extract information.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/fg_flux.html","id":null,"dir":"Reference","previous_headings":"","what":"Flux gradient method — fg_flux","title":"Flux gradient method — fg_flux","text":"function takes valid input dataset cfp_dat calculates fluxes accordingly. Fluxes calculated layer defined layers map given mumol/m^2/s.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/fg_flux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flux gradient method — fg_flux","text":"","code":"fg_flux(x, ...)  # S3 method for class 'cfp_dat' fg_flux(   x,   ...,   gases = unique_gases(x),   modes = \"LL\",   param = c(\"c_air\", \"DS\"),   funs = c(\"arith\", \"harm\"),   quiet = FALSE )  # S3 method for class 'cfp_fgres' fg_flux(x, ...)  # S3 method for class 'cfp_fgmod' fg_flux(x, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/fg_flux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flux gradient method — fg_flux","text":"x cfp_dat object necessary input datasets. ... Arguments passed cfp_fgmod gases (character) character vector defining gases fluxes shall calulated. modes (character) character vector specifying mode(s) dcdz calculation. Can \"LL\",\"LS\",\"EF\". LL local linear approach: within layer linear model evaluated concentration depth. LS linear spline approach: linear spline fitted complete profile nodes layer intersections. EF exponential fit approach: exponential function form y=+b*x^c fit concentration depth. Using first derivative function concentration gradient evaluated layer. DA exponential fit approach: exponential function form y=+b*(1-exp(-*x)) fit concentration depth. Using first derivative function concentration gradient evaluated layer. Davidson (2006) param (character) vector containing parameters soilphys, means calculated, must contain \"c_air\" \"DS\", parameters may help interpretation. funs (character) vector defining type mean used parameter param. One \"arith\" \"harm\".","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/fg_flux.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Flux gradient method — fg_flux","text":"DAVIDSON, E. ., SAVAGE, K. E., TRUMBORE, S. E., & BORKEN, W. (2006). Vertical partitioning CO2 production within temperate forest soil. Global Change Biology (Vol. 12, Issue 6, pp. 944–956). Wiley. https://doi.org/10.1111/j.1365-2486.2005.01142.x","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/flux.html","id":null,"dir":"Reference","previous_headings":"","what":"flux — flux","title":"flux — flux","text":"function either run fg_flux() pro_flux() models valid cfp_fgmod cfp_pfmod objects.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/flux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flux — flux","text":"","code":"flux(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/flux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flux — flux","text":"x valid cfp_fgmod cfp_pfmod object.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/gasdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil CO2 concentrations — gasdata","title":"Soil CO2 concentrations — gasdata","text":"synthetic dataset soil CO2 concentrations two sites one-year period.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/gasdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil CO2 concentrations — gasdata","text":"","code":"gasdata"},{"path":"https://valentingar.github.io/ConFluxPro/reference/gasdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil CO2 concentrations — gasdata","text":"tibble 312 rows 6 variables: site name site Date Date format \"YYYY-MM-DD\" depth depth mineral soil cm repetition id repetition depth x_ppm concentration, ppm gas name gas","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/harm.html","id":null,"dir":"Reference","previous_headings":"","what":"harm — harm","title":"harm — harm","text":"function calculates harmonic mean vector can used analogous base functions mean() median()","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/harm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"harm — harm","text":"","code":"harm(x, w = 1, na.rm = FALSE)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/harm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"harm — harm","text":"x (numeric vector) w (numeric vector) optional vector weights corresponding x. Default 1 . na.rm (logical) TRUE, NA values omitted mean calculated remaining values. FALSE (default) returns NA x contains NA values.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/harm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"harm — harm","text":"(numeric) harmonic mean x","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/harm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"harm — harm","text":"","code":"{  harm(c(1:10))  harm(c(1:10),c(10:1)) } #> [1] 2.475398"},{"path":"https://valentingar.github.io/ConFluxPro/reference/layers_map.html","id":null,"dir":"Reference","previous_headings":"","what":"layers_map — layers_map","title":"layers_map — layers_map","text":"example dataset layers_map devides site two layers.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/layers_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"layers_map — layers_map","text":"","code":"layers_map"},{"path":"https://valentingar.github.io/ConFluxPro/reference/layers_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"layers_map — layers_map","text":"data.frame 4 rows 3 variables: site name site upper upper limit layer cm lower lower limit layer cm","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"offset_correction — offset_correction","title":"offset_correction — offset_correction","text":"function correction offsets whole gas-dataset. basic assumption atmospheric values gases fairly constant long periods time. offsets atmospheric concentrations, probably introduced via calibration differences similar factors within gas analysis. time series smoothed subdividing whole dataset per gas homogeneous subsections (section). Mean values atmospheric concentrations calculated, linear model fit time. correction factor calculated dividing target atmospheric value (gases_std) mean values predicted linear model. x_ppm values multiplied factor.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"offset_correction — offset_correction","text":"","code":"offset_correction(df, corr_map, gases, gases_std, depth_cal)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"offset_correction — offset_correction","text":"df (dataframe) gasdata-dataframe. corr_map (dataframe) dataframe four columns (\"gas\",\"SAMPLE_NO\",\"section\",\"mode\") mapping pair gases sample-id SAMPLE_NO gasdata data.frame subsection-number (section). column \"mode\" determines, whether correction performed using linear regression, account drifts time (\"lin\") using mean (\"const\"). dataframe can created using helper-function offset_subsetting() gases (vector, character) vector containing names gases corrected. Spelling must match gasdata$gas. gases_std (vector, numeric) numeric vector standard concentrations gases atmosphere. Unit fraction Volume (e.g. N2 = 0.78). Must match order gases. depth_cal (character) character (-vector) containing value(s) depth_cat gasdata dataframe used calculation correction factor. depth_cat air concentration.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"offset_correction — offset_correction","text":"df (dataframe)","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"offset_correction — offset_correction","text":"","code":"{ data(\"gasdata\")  library(dplyr)  gasdata <- gasdata %>%   mutate(depth_cat = ifelse(depth>0,\"HU\",\"MIN\"),          SAMPLE_NO = row_number())  cmap <-   offset_subsetting(gasdata,                     start = \"2021-01-01\",                     end = \"2022-01-01\",                     mode = \"const\")  offset_correction(gasdata,                   corr_map = cmap,                   gases = \"CO2\",                   gases_std = 400e-6,                   depth_cal = \"HU\")  } #> Joining with `by = join_by(Date, SAMPLE_NO)` #> Joining with `by = join_by(gas)` #> Adding missing grouping variables: `section` #> Joining with `by = join_by(Date, gas)` #> # A tibble: 624 × 9 #> # Groups:   gas, section [1] #>    section Date       gas   corr_fac site   depth x_ppm depth_cat SAMPLE_NO #>      <int> <date>     <chr>    <dbl> <chr>  <dbl> <dbl> <chr>         <int> #>  1       1 2021-01-01 CO2      0.952 site_a     5  403. HU                1 #>  2       1 2021-01-01 CO2      0.952 site_a     0  526. MIN               2 #>  3       1 2021-01-01 CO2      0.952 site_a     0  529. MIN               3 #>  4       1 2021-01-01 CO2      0.952 site_a     0  530. MIN               4 #>  5       1 2021-01-01 CO2      0.952 site_a   -10  682. MIN               5 #>  6       1 2021-01-01 CO2      0.952 site_a   -10  679. MIN               6 #>  7       1 2021-01-01 CO2      0.952 site_a   -10  689. MIN               7 #>  8       1 2021-01-01 CO2      0.952 site_a   -20  759. MIN               8 #>  9       1 2021-01-01 CO2      0.952 site_a   -20  779. MIN               9 #> 10       1 2021-01-01 CO2      0.952 site_a   -20  759. MIN              10 #> # ℹ 614 more rows"},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_subsetting.html","id":null,"dir":"Reference","previous_headings":"","what":"offset_subsetting — offset_subsetting","title":"offset_subsetting — offset_subsetting","text":"function helps create corr_map dataframe offset correction. Based Date input, creates new section variable maps SAMPLE_NO.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_subsetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"offset_subsetting — offset_subsetting","text":"","code":"offset_subsetting(df, start, end, mode)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_subsetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"offset_subsetting — offset_subsetting","text":"df (dataframe) gasdata-dataframe. start (vector, Date) vector type Date specifies starting date section (starting date included section!). end (vector, Date) vector type Date specifies end date section (end date included section!). start date element end date (-1) +1 day. mode (vector, character) vector type character specifies correction method used section. Valid methods \"const\", median value used constant factor, \"lin\", linear model fit time, account temporal drift.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_subsetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"offset_subsetting — offset_subsetting","text":"df (dataframe) corr_map dataframe used offset_correction() function","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/offset_subsetting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"offset_subsetting — offset_subsetting","text":"","code":"{ data(\"gasdata\")  library(dplyr)  gasdata <- gasdata %>%   mutate(depth_cat = ifelse(depth>0,\"HU\",\"MIN\"),          SAMPLE_NO = row_number())  cmap <-   offset_subsetting(gasdata,                     start = \"2021-01-01\",                     end = \"2022-01-01\",                     mode = \"const\")  offset_correction(gasdata,                   corr_map = cmap,                   gases = \"CO2\",                   gases_std = 400e-6,                   depth_cal = \"HU\")  } #> Joining with `by = join_by(Date, SAMPLE_NO)` #> Joining with `by = join_by(gas)` #> Adding missing grouping variables: `section` #> Joining with `by = join_by(Date, gas)` #> # A tibble: 624 × 9 #> # Groups:   gas, section [1] #>    section Date       gas   corr_fac site   depth x_ppm depth_cat SAMPLE_NO #>      <int> <date>     <chr>    <dbl> <chr>  <dbl> <dbl> <chr>         <int> #>  1       1 2021-01-01 CO2      0.952 site_a     5  403. HU                1 #>  2       1 2021-01-01 CO2      0.952 site_a     0  526. MIN               2 #>  3       1 2021-01-01 CO2      0.952 site_a     0  529. MIN               3 #>  4       1 2021-01-01 CO2      0.952 site_a     0  530. MIN               4 #>  5       1 2021-01-01 CO2      0.952 site_a   -10  682. MIN               5 #>  6       1 2021-01-01 CO2      0.952 site_a   -10  679. MIN               6 #>  7       1 2021-01-01 CO2      0.952 site_a   -10  689. MIN               7 #>  8       1 2021-01-01 CO2      0.952 site_a   -20  759. MIN               8 #>  9       1 2021-01-01 CO2      0.952 site_a   -20  779. MIN               9 #> 10       1 2021-01-01 CO2      0.952 site_a   -20  759. MIN              10 #> # ℹ 614 more rows"},{"path":"https://valentingar.github.io/ConFluxPro/reference/plan_parallel_automatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically plan for parallel computing in cfp. — plan_parallel_automatic","title":"Automatically plan for parallel computing in cfp. — plan_parallel_automatic","text":"Automatically plan parallel computing cfp.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/plan_parallel_automatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically plan for parallel computing in cfp. — plan_parallel_automatic","text":"","code":"plan_parallel_automatic(x, number_of_workers)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/plan_parallel_automatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically plan for parallel computing in cfp. — plan_parallel_automatic","text":"x cfp_dat object. number_of_workers Number session create total. Defaults number available cores.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/plot_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_profile — plot_profile","title":"plot_profile — plot_profile","text":"Plot vertical soil-profiles ConFluxPro objects using ggplot. mainly intended diagnostic purposes better understand underlying data. Supported objects: cfp_pfres Displays TPS, SWC AFPS, well production measured modelled gas concentrations. cfp_fgres Displays TPS, SWC AFPS, well measured concentration profile, concentration gradients layer. cfp_soilphys Displays TPS, SWC AFPS, well values Ds Temperature. cfp_gasdata Displays concentration profile. cfp_layers_map Displays layer names, pmap layer_couple, well allowed production range.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/plot_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_profile — plot_profile","text":"","code":"plot_profile(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/plot_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_profile — plot_profile","text":"x cfp_pfres, cfp_fgres model result, cfp_soilphys, cfp_gasdata cfp_layers_map object","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/plot_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_profile — plot_profile","text":"ggplot2 plot facets distinct profile. 20 profiles plotted message sent can take long time.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/pro_flux.html","id":null,"dir":"Reference","previous_headings":"","what":"pro_flux — pro_flux","title":"pro_flux — pro_flux","text":"implements inverse modeling approach optimizes vertically resolved production (consumption) gases question fit modeled concentration profile observed data. One boundary condition model , incoming outgoing flux bottom lowest layer profile. boundary condition met, flux must optimised well. can set zero_flux.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/pro_flux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pro_flux — pro_flux","text":"","code":"pro_flux(x, ...)  # S3 method for class 'cfp_dat' pro_flux(   x,   ...,   zero_flux = TRUE,   zero_limits = c(-Inf, Inf),   DSD0_optim = FALSE,   evenness_factor = 0,   known_flux_factor = 0 )  # S3 method for class 'cfp_pfres' pro_flux(x, ...)  # S3 method for class 'cfp_pfmod' pro_flux(x, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/pro_flux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pro_flux — pro_flux","text":"x cfp_dat object necessary input datasets. ... Arguments passed cfp_pfmod   zero_flux (logical) Applies zero-flux boundary condition? FALSE, first value X represents incoming flux lowest layer. zero_limits (numeric vector) vector length 2 defining lower upper limit lowest flux zero_flux = F. DSD0_optim RESERVED FUTURE EXPANSION evenness_factor (numeric) user defined factor used penalise strong differences optimised production rates. must identified trial--error can help prevent production rates simply set zero basically lower production relative maximum absolute productions, higher penalised. evenness_factor defines weight penalty optimisation algorithm prod_optim. known_flux_factor RESERVED FUTURE EXPANSION","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/pro_flux.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pro_flux — pro_flux","text":"","code":"{  soilphys <-  cfp_soilphys(    ConFluxPro::soilphys,    id_cols = c(\"site\", \"Date\")  )  gasdata <-  cfp_gasdata(    ConFluxPro::gasdata,    id_cols = c(\"site\", \"Date\")  )   lmap <-  cfp_layers_map(    ConFluxPro::layers_map,    gas = \"CO2\",    lowlim = 0,    highlim = 1000,    id_cols = \"site\"  )  PROFLUX <-  cfp_dat(gasdata,          soilphys,          lmap ) |>  pro_flux() } #>  #> added 'gas' to id_cols #>  #> added 'gas' to id_cols #>  #> added 'gas' to id_cols #>  #> validating datasets #> id_cols: site, Date, gas #> 24 unique profiles"},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_mod_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"prod_mod — prod_mod_conc","title":"prod_mod — prod_mod_conc","text":"functions calculates flux concentration profile gas based fixed production known diffusion coefficient Ds. basis stepwise calculation beginning bottom-layer incoming flux F0 known concentration C0 lower end step. following input parameters must vectors sorted lowest depth profile highest. Note assigned units examples. However, units concise match parameters. functions designed used optimization hence fast possible.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_mod_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prod_mod — prod_mod_conc","text":"","code":"prod_mod_conc(prod, height, DS, F0, C0)  prod_mod_flux(prod, height, F0)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_mod_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prod_mod — prod_mod_conc","text":"prod production assinged step production \\(\\mu~mol/s/m^3\\) height height step m DS diffusion coefficient DS \\(m^2/s\\) F0 (numeric) Incoming flux lowest step \\(\\mu mol/m^2/s\\) C0 (numeric) Concentration lower end lowest step \\(\\mu mol/m^3\\).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_mod_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prod_mod — prod_mod_conc","text":"conc top step \\(\\mu mol/m^3\\) flux top step \\(\\mu mol/m^2/s\\)","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_mod_conc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"prod_mod — prod_mod_conc","text":"prod_mod_flux(): flux output examples prod_mod_flux(prod = c(0.01,0.02,0.65,0.5,0.4), height = c(0.5,0.2,0.1,0.03,0.02), F0=0 )","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_mod_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prod_mod — prod_mod_conc","text":"","code":"{ prod_mod_conc(prod = c(0.01,0.02,0.65,0.5,0.4),               height = c(0.5,0.2,0.1,0.03,0.02),               DS = c(rep(2.5E-7,3),rep(1E-6,2)),               F0=0,               C0=48000E-6)} #> [1]  -4999.952 -10599.952 -27199.952 -29644.952 -31504.952"},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"prod_optim — prod_optim","title":"prod_optim — prod_optim","text":"optimizer-function minimized inverse, production based model. takes input vector influx, well values production optimized. function embedded pro_flux intended used manually.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prod_optim — prod_optim","text":"","code":"prod_optim(   X,   height,   DS,   D0 = NA,   C0,   pmap,   cmap,   conc,   dstor = 0,   zero_flux = TRUE,   F0 = 0,   known_flux = NA,   known_flux_factor = 0,   DSD0_optim = FALSE,   layer_couple,   wmap,   evenness_factor )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prod_optim — prod_optim","text":"X (numeric vector) specifying productions optimized height (numeric vector) giving height step DS (numeric vector) giving DS step D0 RESERVED FUTURE EXPANSION C0 (numeric) concentration bottom lowermost step. pmap (integer vector) assigning production X step cmap (integer vector) assigning modeled concentrations observed concentrations can multiple observations per depth conc (numeric) observed concentrations (unit modelled concentrations). dstor RESERVED FUTURE EXPANSION zero_flux (logical) Applies zero-flux boundary condition(TRUE)? FALSE, first value X represents incoming flux lowest layer. F0 (numeric) flux lowest layer. known_flux RESERVED FUTURE EXPANSION known_flux_factor (numeric) factor defining much known flux weigh RMSE calculation DSD0_optim (logical) DSD0 optimised well? layer_couple (numeric vector) vector defining weights bind different layers together. zero, penalisation stark differences optimised production rates adjecent layers takes place wmap (numeric) vector defining weights different concentration measurements RMSE calculation evenness_factor (numeric) Defines strong stark differences production rates small production rates penalised.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/prod_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prod_optim — prod_optim","text":"RMSE real mean square error modeled measured concentration.","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/production.html","id":null,"dir":"Reference","previous_headings":"","what":"production — production","title":"production — production","text":"Easily extract production cfp_pfres() cfp_fgres() models per layer defined layers_map() calculate relative contribution per layer.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"production — production","text":"","code":"production(x, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"production — production","text":"x valid cfp_pfres() cfp_fgres() object. ... parameters passed efflux() case cfp_fgres.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/production.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"production — production","text":"data.frame prod_abs (\\(µmol / m^2 / s\\)), efflux (\\(µmol / m^2 / s\\)) prod_rel \\(prod_{rel} = efflux / prod_{abs}\\).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/production.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"production — production","text":"pro_flux() model, extraction straightforward simply product optimised production rate (per volume) multiplied height layer. fg_flux(), assumption made production layer \\(\\) difference flux layer \\(F_{+1}\\) layer \\(F_{-1}\\). flux lowest layer assumed zero flux topmost layer efflux. approach uncertainties evaluated applies model. error estimates available call bootstrap_error(), errors propagated follows: $$\\Delta prod_{rel} = |\\Delta efflux \\cdot \\frac{prod_{abs}}{efflux^2}| + |\\Delta prod_{abs}\\cdot\\frac{1}{efflux}|$$","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"(N)RMSE — rmse","title":"(N)RMSE — rmse","text":"(N)RMSE Calculate (normalized) root-mean-square-error two vectors.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(N)RMSE — rmse","text":"","code":"rmse(a, b)  nrmse(a, b, normer)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(N)RMSE — rmse","text":", b numeric vectors length compared normer character string defining type normalization applied. Can one mean arithmetic mean sd standard deviation range difference range IQR difference interquantile range ","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/run_map.html","id":null,"dir":"Reference","previous_headings":"","what":"run_map — run_map","title":"run_map — run_map","text":"run_map() deprecated favour cfp_run_map() concistency. Create cfp_run_map model alteration alternate()","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/run_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_map — run_map","text":"","code":"run_map(   x,   params = list(),   type = NULL,   method = NULL,   n_runs = NULL,   layers_different = FALSE,   layers_from = \"layers_map\",   layers_altmap = NULL,   topheight_adjust = FALSE )"},{"path":"https://valentingar.github.io/ConFluxPro/reference/run_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_map — run_map","text":"x Either cfp_pfres cfp_fgres model result. params named list numeric vectors. Names indicate column names soilphys, vectors either distinct values (method permutation) limits (method random). type vector length param indicating values params represent. One abs Absolute values applied -. factor Factors multiplied original values. addition Factors added original values. method Either 'random', random value chosen within bounds set params 'permutation', every permutation values params added. n_runs Integer value number alterations done method = 'random'. layers_different layers layers_map changed individually? TRUE allows different changes different depths. layers_from (character) layers_different TRUE, source layers created? One : layers_map (default) Use layers defined layers_map. soilphys Use layers defined soilphys layers_altmap Use layers defined provided layers_altmap object. layers_altmap optional layers_map created using layers_map() defines layers used layers_different = TRUE. topheight_adjust (logical) proposed change topheight larger highest layer soilphys, limits automatically adjusted per id_cols indivdually? Default FALSE, leads error case.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/season.html","id":null,"dir":"Reference","previous_headings":"","what":"season — season","title":"season — season","text":"simple function return character (-vector) season Date (-vector). Months: spring 3-5 summer 6-8 fall 9-11 winter 12-2","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"season — season","text":"","code":"season(d)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"season — season","text":"d (Date) date object","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/season.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"season — season","text":"m (character)","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/season.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"season — season","text":"","code":"season(as.Date(c(\"1955-01-15\",\"1985-06-15\",\"2015-10-15\"))) #> [1] \"winter\" \"summer\" \"fall\""},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_calc_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"sobol_calc_indices — sobol_calc_indices","title":"sobol_calc_indices — sobol_calc_indices","text":"result parameter corresponding cfp_run_map calculate first-order total sobol indices using Azzini (2021) method.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_calc_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sobol_calc_indices — sobol_calc_indices","text":"","code":"sobol_calc_indices(Y, effect_cols, id_cols = character(), run_map)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_calc_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sobol_calc_indices — sobol_calc_indices","text":"Y data.frame desired effect parameter(s) model output, e.g. efflux(). output come list model results produced call alternate() valid cfp_run_map produced sobol_run_map(). effect_cols character vector column names Y sobol indices calculated, e.g. 'efflux'. id_cols character vector column names Y specifying grouping variables. Indices calculated group individually. run_map cfp_run_map used calculaton Y produced call sobol_run_map().","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_calc_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sobol_calc_indices — sobol_calc_indices","text":"data.frame following columns ... id_cols specified param_id, param, pmap Parameter identificators cfp_run_map used. effect_param parameter effect calulated. Vt, Vi, VY Internal parameters indice calculation. Si First order sobol indice. ST Total order sobol indice.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_calc_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sobol_calc_indices — sobol_calc_indices","text":"implements approach outlined Azzini et al (2021).","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_calc_indices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"sobol_calc_indices — sobol_calc_indices","text":"Azzini, Ivano; Mara, Thierry .; Rosati, Rossana: Comparison two sets Monte Carlo estimators Sobol’ indices, Environmental Modelling & Software, Volume 144, 2021, 105167, ISSN 1364-8152, https://doi.org/10.1016/j.envsoft.2021.105167","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_run_map.html","id":null,"dir":"Reference","previous_headings":"","what":"sobol_run_map — sobol_run_map","title":"sobol_run_map — sobol_run_map","text":"Modify existing cfp_run_map sobol indice estimation create new one scratch.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_run_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sobol_run_map — sobol_run_map","text":"","code":"sobol_run_map(x, ...)  # S3 method for class 'cfp_dat' sobol_run_map(x, ...)  # S3 method for class 'cfp_run_map' sobol_run_map(x, ...)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/sobol_run_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sobol_run_map — sobol_run_map","text":"x Either object class cfp_run_map created call cfp_run_map() method = 'random', cfp_pfres cfp_fgres model result. ... Arguments passed run_map params named list numeric vectors. Names indicate column names soilphys, vectors either distinct values (method permutation) limits (method random). type vector length param indicating values params represent. One abs Absolute values applied -. factor Factors multiplied original values. addition Factors added original values. method Either 'random', random value chosen within bounds set params 'permutation', every permutation values params added. n_runs Integer value number alterations done method = 'random'. layers_different layers layers_map changed individually? TRUE allows different changes different depths. layers_from (character) layers_different TRUE, source layers created? One : layers_map (default) Use layers defined layers_map. soilphys Use layers defined soilphys layers_altmap Use layers defined provided layers_altmap object. layers_altmap optional layers_map created using layers_map() defines layers used layers_different = TRUE. topheight_adjust (logical) proposed change topheight larger highest layer soilphys, limits automatically adjusted per id_cols indivdually? Default FALSE, leads error case.","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/soildiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil diffusion models — soildiff","title":"Soil diffusion models — soildiff","text":"synthetic dataset soil total pore space diffusion models general formula *AFPS^b.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soildiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil diffusion models — soildiff","text":"","code":"soildiff"},{"path":"https://valentingar.github.io/ConFluxPro/reference/soildiff.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil diffusion models — soildiff","text":"tibble 8 rows 6 variables: site name site upper upper limit layer cm lower lower limit layer cm TPS total pore space fraction volume diffusion-model fit parameter b diffusion-model fit parameter b","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilphys.html","id":null,"dir":"Reference","previous_headings":"","what":"soilphys — soilphys","title":"soilphys — soilphys","text":"example dataset soilphys based sets soiltemp, soilwater soildiff","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilphys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"soilphys — soilphys","text":"","code":"soilphys"},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilphys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"soilphys — soilphys","text":"tibble 120 rows 4 variables: site name site Date Date format \"YYYY-MM-DD\" depth depth cm t temperature °C","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilphys_layered.html","id":null,"dir":"Reference","previous_headings":"","what":"soilphys_layered — soilphys_layered","title":"soilphys_layered — soilphys_layered","text":"function calculates (harmonic-) means soilphys dataframe per layer flux calculation.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilphys_layered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"soilphys_layered — soilphys_layered","text":"","code":"soilphys_layered(soilphys, layers_map, param, funs, id_cols)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilphys_layered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"soilphys_layered — soilphys_layered","text":"soilphys (dataframe) soilphys dataframe layers_map (dataframe) containing following parameters: upper upper limit layer cm lower lower limit layer cm layer name layer ... id_cols necessary param (character vector) vector containing names variables soilphys carried funs (character vector) vector defining type mean used. One \"arith\" \"harm\" id_cols (character vector) list columns, , together, uniquely identify one profile.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilphys_layered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"soilphys_layered — soilphys_layered","text":"soilphys, reduced id_cols param columns summarised layers provided layers_map #' @examples data(soildiff) layers_map <- data.frame(site = rep(c(\"site_a\", \"site_b\"),= 2), upper = c(5,0,7,0), lower = c(0,-100,0,-100), layer = rep(c(\"HU\",\"M1\"),times = 2) )soildiff$depth <- (soildiff$upper + soildiff$lower) / 2soilphys_layered(soilphys = soildiff, layers_map = layers_map, param = c(\"TPS\",\"\"), funs = c(\"harm\",\"arith\"), id_cols = c(\"site\"))","code":""},{"path":[]},{"path":"https://valentingar.github.io/ConFluxPro/reference/soiltemp.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil temperature — soiltemp","title":"Soil temperature — soiltemp","text":"synthetic dataset soil temperature discrete depths. dates correspond gasdata.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soiltemp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil temperature — soiltemp","text":"","code":"soiltemp"},{"path":"https://valentingar.github.io/ConFluxPro/reference/soiltemp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil temperature — soiltemp","text":"tibble 120 rows 4 variables: site name site Date Date format \"YYYY-MM-DD\" depth depth cm t temperature °C","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilwater.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil water content — soilwater","title":"Soil water content — soilwater","text":"synthetic dataset soil water content layered structure. dates correspond gasdata.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilwater.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil water content — soilwater","text":"","code":"soilwater"},{"path":"https://valentingar.github.io/ConFluxPro/reference/soilwater.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil water content — soilwater","text":"tibble 180 rows 5 variables: site name site Date Date format \"YYYY-MM-DD\" upper upper limit layer cm lower lower limit layer cm SWC soil water content fraction volume","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/split_by_prof.html","id":null,"dir":"Reference","previous_headings":"","what":"Split by profile — split_by_prof","title":"Split by profile — split_by_prof","text":"Split profile data list single profile.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/split_by_prof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split by profile — split_by_prof","text":"","code":"split_by_prof(x)  # S3 method for class 'cfp_dat' split_by_prof(x)  # S3 method for class 'cfp_profile' split_by_prof(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/split_by_prof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split by profile — split_by_prof","text":"x object grouped profiles id_cols.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/split_by_prof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split by profile — split_by_prof","text":"list entry one profile class x.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/split_by_prof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split by profile — split_by_prof","text":"","code":"df <- cfp_profile(   data.frame(       site = rep(c(\"site_a\", \"site_b\"),                  each = 2),       variable = 1:4),    id_cols = \"site\") split_by_prof(df) #> [[1]] #>  #> A cfp_profile object  #> id_cols: site  #> 1  unique profiles  #>  #>     site variable #> 1 site_a        1 #> 2 site_a        2 #>  #> [[2]] #>  #> A cfp_profile object  #> id_cols: site  #> 1  unique profiles  #>  #>     site variable #> 1 site_b        3 #> 2 site_b        4 #>   base_dat <- ConFluxPro::base_dat split_by_prof(base_dat) #> [[1]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[2]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[3]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[4]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[5]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[6]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[7]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[8]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[9]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[10]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[11]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[12]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[13]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[14]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[15]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[16]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[17]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[18]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[19]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[20]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[21]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[22]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[23]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>  #> [[24]] #>  #> A cfp_dat object to be used as input in ConFluxPro models.  #> id_cols: site Date gas  #> number of profiles:  1  #> number of groups:  2  #>  #>"},{"path":"https://valentingar.github.io/ConFluxPro/reference/unique_gases.html","id":null,"dir":"Reference","previous_headings":"","what":"unique_gases — unique_gases","title":"unique_gases — unique_gases","text":"Get gases CFP object.","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/unique_gases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unique_gases — unique_gases","text":"","code":"unique_gases(x)"},{"path":"https://valentingar.github.io/ConFluxPro/reference/unique_gases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unique_gases — unique_gases","text":"x object extract gases .","code":""},{"path":"https://valentingar.github.io/ConFluxPro/reference/unique_gases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unique_gases — unique_gases","text":"character vector gases object.","code":""}]
